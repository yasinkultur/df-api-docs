{
  "basePath": "/api",
  "consumes": [
    "application/json"
  ],
  "host": "www.directfreight.com",
  "info": {
    "description": "In order to use the Direct Freight API please first contact us to get an API Token. This token needs to be sent as a HTTP header argument in every request to our API.\n\napi-token=\"SECRET KEY\"\n\nPlease keep your api-token a secret. If the token is compromised please contact us to get a new one.\n\nThis api token authenticates your application and gives it access to the API.\n\nThe API token should not be confused with the end-user-token. That token is given to you via the end_user_authentications endpoint when the user logs in. This token is needed in order to use certain features, and get certain sensitive information.\n\nBoth Tokens are stateless, and delivered via the HTTP headers.",
    "title": "Direct Freight API",
    "version": "2.0.0",
    "x-logo": {
      "url": "https://www.directfreight.com/home/images/logo-direct-freight.png"
    }
  },
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "security": [
    {
      "api_key": []
    }
  ],
  "securityDefinitions": {
    "api_key": {
      "description": "This token needs to be sent as a HTTP header argument in every request to our API.",
      "in": "header",
      "name": "api-token",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "x-restlet": {
    "sections": {
      "ALERTS": {},
      "BILLINGS": {},
      "BOARDS": {},
      "CREDIT_REPORTS": {},
      "END_USER_AUTHENTICATIONS": {},
      "LOCATIONS": {},
      "POSTINGS": {},
      "PROFILES": {},
      "VALIDATIONS": {},
      "common_definitions": {},
      "not categorized yet": {}
    }
  },
  "parameters": {
    "end-user-token": {
      "in": "header",
      "name": "end-user-token",
      "required": true,
      "type": "string"
    },
    "end-user-token-optional": {
      "in": "header",
      "name": "end-user-token",
      "required": false,
      "type": "string"
    },
    "board_type": {
      "description": "Valid types are \"loads\", and \"trucks\".",
      "enum": [
        "loads",
        "trucks"
      ],
      "in": "path",
      "name": "board_type",
      "required": true,
      "type": "string"
    },
    "posting_type": {
      "description": "Valid types are \"loads\", \"trucks\", \"private_loads\", \"private_trucks\", \"test_loads\", and \"test_trucks\"",
      "enum": [
        "loads",
        "trucks",
        "private_loads",
        "private_trucks",
        "test_loads",
        "test_trucks"
      ],
      "in": "path",
      "name": "posting_type",
      "required": true,
      "type": "string"
    }
  },
  "responses": {
    "error_422": {
      "description": "Unprocessable Entity. More information provided in the return object.",
      "schema": {
        "$ref": "#/definitions/error_object"
      }
    },
    "object_created": {
      "description": "Object created check the headers for a reference URL.",
      "schema": {
        "$ref": "#/definitions/create_status"
      }
    }
  },
  "paths": {
    "/alerts/{board_type}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "Specify to just delete some alerts.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "alert_id",
            "required": true,
            "type": "array"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "STAGE=UNK Delete an alert.",
        "tags": [
          "alerts"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request DELETE \\\n  --url 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\",\n  \"method\": \"DELETE\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'DELETE',\n  url: 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D',\n  qs: { alert_id: 'SOME_ARRAY_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"DELETE\", \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\");\n\nreq.query({\n  \"alert_id\": \"SOME_ARRAY_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"DELETE\",\n\"'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setQueryData(array(\n  'alert_id' => 'SOME_ARRAY_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');\n$request->setRequestMethod('DELETE');\n$request->setQuery(new http\\QueryString(array(\n  'alert_id' => 'SOME_ARRAY_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"DELETE\", \"/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\"\n\nquerystring = {\"alert_id\":\"SOME_ARRAY_VALUE\"}\n\nresponse = requests.request(\"DELETE\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http DELETE 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"DELETE\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method DELETE \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "only get a subset of alerts. As this is a get request this is specified as a query string parameter.",
            "in": "query",
            "items": {
              "type": "integer"
            },
            "name": "alert_id",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "On success will return a list of alerts.",
            "schema": {
              "$ref": "#/definitions/alert_list"
            }
          }
        },
        "summary": "STAGE=UNK Get a list of alerts. You can optionally limit the list by specifcying alerts by their alert_id.",
        "tags": [
          "alerts"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D',\n  qs: { alert_id: 'SOME_ARRAY_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\");\n\nreq.query({\n  \"alert_id\": \"SOME_ARRAY_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'alert_id' => 'SOME_ARRAY_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'alert_id' => 'SOME_ARRAY_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\"\n\nquerystring = {\"alert_id\":\"SOME_ARRAY_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/board_type"
        }
      ],
      "patch": {
        "consumes": [],
        "description": "Search objects are set at creation. You cannot modify them after the alert has been created.",
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "Specify which alert you are updating.",
            "in": "query",
            "name": "alert_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patch_alert_properties"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returned on response."
          }
        },
        "summary": "STAGE=UNK Update an alert.",
        "tags": [
          "alerts"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PATCH\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"days_of_week\\\":{},\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddParameter(\"undefined\", \"{\\\"days_of_week\\\":{},\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request PATCH \\\n  --url 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE' \\\n  --data '{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"{\\\"days_of_week\\\":{},\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"days_of_week\\\":{},\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{}}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE\")\n  .patch(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE\")\n  .body(\"{\\\"days_of_week\\\":{},\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{}}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE\",\n  \"method\": \"PATCH\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"days_of_week\\\":{},\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{}}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"days_of_week\": {},\n  \"end_hour\": {},\n  \"expires_after\": {},\n  \"list_order\": {},\n  \"list_type\": {},\n  \"minute_frequency\": {},\n  \"send_type\": {},\n  \"start_hour\": {},\n  \"time_zone\": {}\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ days_of_week: {},\n  end_hour: {},\n  expires_after: {},\n  list_order: {},\n  list_type: {},\n  minute_frequency: {},\n  send_type: {},\n  start_hour: {},\n  time_zone: {} }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'PATCH',\n  url: 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D',\n  qs: { alert_id: 'SOME_STRING_VALUE' },\n  body: \n   { days_of_week: {},\n     end_hour: {},\n     expires_after: {},\n     list_order: {},\n     list_type: {},\n     minute_frequency: {},\n     send_type: {},\n     start_hour: {},\n     time_zone: {} },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"PATCH\", \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\");\n\nreq.query({\n  \"alert_id\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"days_of_week\": {},\n  \"end_hour\": {},\n  \"expires_after\": {},\n  \"list_order\": {},\n  \"list_type\": {},\n  \"minute_frequency\": {},\n  \"send_type\": {},\n  \"start_hour\": {},\n  \"time_zone\": {}\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"days_of_week\": @{  },\n                              @\"end_hour\": @{  },\n                              @\"expires_after\": @{  },\n                              @\"list_order\": @{  },\n                              @\"list_type\": @{  },\n                              @\"minute_frequency\": @{  },\n                              @\"send_type\": @{  },\n                              @\"start_hour\": @{  },\n                              @\"time_zone\": @{  } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"days_of_week\\\":{},\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{}}\" in\n\nClient.call ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"PATCH\",\n\"'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE'\");\n$request->content('{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"days_of_week\\\":{},\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{}}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setQueryData(array(\n  'alert_id' => 'SOME_STRING_VALUE'\n));\n\n$request->setBody('{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setQuery(new http\\QueryString(array(\n  'alert_id' => 'SOME_STRING_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"days_of_week\\\":{},\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{}}\"\n\nconn.request(\"PATCH\", \"/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\"\n\nquerystring = {\"alert_id\":\"SOME_STRING_VALUE\"}\n\npayload = \"{\\\"days_of_week\\\":{},\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{}}\"\nresponse = requests.request(\"PATCH\", url, data=payload, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"{\\\"days_of_week\\\":{},\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}' |  \\\n  http PATCH 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"days_of_week\": [],\n  \"end_hour\": [],\n  \"expires_after\": [],\n  \"list_order\": [],\n  \"list_type\": [],\n  \"minute_frequency\": [],\n  \"send_type\": [],\n  \"start_hour\": [],\n  \"time_zone\": []\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"PATCH\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method PATCH \\\n  --body-data '{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}' \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE'"
          }
        ]
      },
      "post": {
        "consumes": [],
        "description": "Any parameter that is defined here and is also defined on the boards GET, follows the same rules.",
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/alert"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/object_created"
          }
        },
        "summary": "STAGE=UNK Create an alert.",
        "tags": [
          "alerts"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"days_of_week\\\":{},\\\"email_address\\\":\\\"<ADD STRING VALUE>\\\",\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{},\\\"search\\\":{\\\"search_id\\\":0,\\\"search_type\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_received\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailers\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_available\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":0,\\\"destination_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":0,\\\"load_size\\\":\\\"<ADD STRING VALUE>\\\"}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"days_of_week\\\":{},\\\"email_address\\\":\\\"<ADD STRING VALUE>\\\",\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{},\\\"search\\\":{\\\"search_id\\\":0,\\\"search_type\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_received\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailers\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_available\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":0,\\\"destination_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":0,\\\"load_size\\\":\\\"<ADD STRING VALUE>\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request POST \\\n  --url https://www.directfreight.com/api/alerts/%7Bboard_type%7D \\\n  --data '{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"days_of_week\\\":{},\\\"email_address\\\":\\\"<ADD STRING VALUE>\\\",\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{},\\\"search\\\":{\\\"search_id\\\":0,\\\"search_type\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_received\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailers\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_available\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":0,\\\"destination_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":0,\\\"load_size\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"days_of_week\\\":{},\\\"email_address\\\":\\\"<ADD STRING VALUE>\\\",\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{},\\\"search\\\":{\\\"search_id\\\":0,\\\"search_type\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_received\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailers\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_available\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":0,\\\"destination_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":0,\\\"load_size\\\":\\\"<ADD STRING VALUE>\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\")\n  .post(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\")\n  .body(\"{\\\"days_of_week\\\":{},\\\"email_address\\\":\\\"<ADD STRING VALUE>\\\",\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{},\\\"search\\\":{\\\"search_id\\\":0,\\\"search_type\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_received\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailers\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_available\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":0,\\\"destination_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":0,\\\"load_size\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\",\n  \"method\": \"POST\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"days_of_week\\\":{},\\\"email_address\\\":\\\"<ADD STRING VALUE>\\\",\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{},\\\"search\\\":{\\\"search_id\\\":0,\\\"search_type\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_received\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailers\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_available\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":0,\\\"destination_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":0,\\\"load_size\\\":\\\"<ADD STRING VALUE>\\\"}}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"days_of_week\": {},\n  \"email_address\": \"<ADD STRING VALUE>\",\n  \"end_hour\": {},\n  \"expires_after\": {},\n  \"list_order\": {},\n  \"list_type\": {},\n  \"minute_frequency\": {},\n  \"send_type\": {},\n  \"start_hour\": {},\n  \"time_zone\": {},\n  \"search\": {\n    \"search_id\": 0,\n    \"search_type\": \"<ADD STRING VALUE>\",\n    \"date_received\": \"<ADD STRING VALUE>\",\n    \"trailers\": \"<ADD STRING VALUE>\",\n    \"date_available\": \"<ADD STRING VALUE>\",\n    \"origin_state\": \"<ADD STRING VALUE>\",\n    \"origin_city\": \"<ADD STRING VALUE>\",\n    \"origin_radius\": 0,\n    \"destination_state\": \"<ADD STRING VALUE>\",\n    \"destination_city\": \"<ADD STRING VALUE>\",\n    \"destination_radius\": 0,\n    \"load_size\": \"<ADD STRING VALUE>\"\n  }\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/alerts/%7Bboard_type%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ days_of_week: {},\n  email_address: '<ADD STRING VALUE>',\n  end_hour: {},\n  expires_after: {},\n  list_order: {},\n  list_type: {},\n  minute_frequency: {},\n  send_type: {},\n  start_hour: {},\n  time_zone: {},\n  search: \n   { search_id: 0,\n     search_type: '<ADD STRING VALUE>',\n     date_received: '<ADD STRING VALUE>',\n     trailers: '<ADD STRING VALUE>',\n     date_available: '<ADD STRING VALUE>',\n     origin_state: '<ADD STRING VALUE>',\n     origin_city: '<ADD STRING VALUE>',\n     origin_radius: 0,\n     destination_state: '<ADD STRING VALUE>',\n     destination_city: '<ADD STRING VALUE>',\n     destination_radius: 0,\n     load_size: '<ADD STRING VALUE>' } }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D',\n  body: \n   { days_of_week: {},\n     email_address: '<ADD STRING VALUE>',\n     end_hour: {},\n     expires_after: {},\n     list_order: {},\n     list_type: {},\n     minute_frequency: {},\n     send_type: {},\n     start_hour: {},\n     time_zone: {},\n     search: \n      { search_id: 0,\n        search_type: '<ADD STRING VALUE>',\n        date_received: '<ADD STRING VALUE>',\n        trailers: '<ADD STRING VALUE>',\n        date_available: '<ADD STRING VALUE>',\n        origin_state: '<ADD STRING VALUE>',\n        origin_city: '<ADD STRING VALUE>',\n        origin_radius: 0,\n        destination_state: '<ADD STRING VALUE>',\n        destination_city: '<ADD STRING VALUE>',\n        destination_radius: 0,\n        load_size: '<ADD STRING VALUE>' } },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\");\n\nreq.type(\"json\");\nreq.send({\n  \"days_of_week\": {},\n  \"email_address\": \"<ADD STRING VALUE>\",\n  \"end_hour\": {},\n  \"expires_after\": {},\n  \"list_order\": {},\n  \"list_type\": {},\n  \"minute_frequency\": {},\n  \"send_type\": {},\n  \"start_hour\": {},\n  \"time_zone\": {},\n  \"search\": {\n    \"search_id\": 0,\n    \"search_type\": \"<ADD STRING VALUE>\",\n    \"date_received\": \"<ADD STRING VALUE>\",\n    \"trailers\": \"<ADD STRING VALUE>\",\n    \"date_available\": \"<ADD STRING VALUE>\",\n    \"origin_state\": \"<ADD STRING VALUE>\",\n    \"origin_city\": \"<ADD STRING VALUE>\",\n    \"origin_radius\": 0,\n    \"destination_state\": \"<ADD STRING VALUE>\",\n    \"destination_city\": \"<ADD STRING VALUE>\",\n    \"destination_radius\": 0,\n    \"load_size\": \"<ADD STRING VALUE>\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"days_of_week\": @{  },\n                              @\"email_address\": @\"<ADD STRING VALUE>\",\n                              @\"end_hour\": @{  },\n                              @\"expires_after\": @{  },\n                              @\"list_order\": @{  },\n                              @\"list_type\": @{  },\n                              @\"minute_frequency\": @{  },\n                              @\"send_type\": @{  },\n                              @\"start_hour\": @{  },\n                              @\"time_zone\": @{  },\n                              @\"search\": @{ @\"search_id\": @0, @\"search_type\": @\"<ADD STRING VALUE>\", @\"date_received\": @\"<ADD STRING VALUE>\", @\"trailers\": @\"<ADD STRING VALUE>\", @\"date_available\": @\"<ADD STRING VALUE>\", @\"origin_state\": @\"<ADD STRING VALUE>\", @\"origin_city\": @\"<ADD STRING VALUE>\", @\"origin_radius\": @0, @\"destination_state\": @\"<ADD STRING VALUE>\", @\"destination_city\": @\"<ADD STRING VALUE>\", @\"destination_radius\": @0, @\"load_size\": @\"<ADD STRING VALUE>\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"days_of_week\\\":{},\\\"email_address\\\":\\\"<ADD STRING VALUE>\\\",\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{},\\\"search\\\":{\\\"search_id\\\":0,\\\"search_type\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_received\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailers\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_available\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":0,\\\"destination_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":0,\\\"load_size\\\":\\\"<ADD STRING VALUE>\\\"}}\" in\n\nClient.call ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"POST\",\n\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\");\n$request->content('{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"days_of_week\\\":{},\\\"email_address\\\":\\\"<ADD STRING VALUE>\\\",\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{},\\\"search\\\":{\\\"search_id\\\":0,\\\"search_type\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_received\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailers\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_available\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":0,\\\"destination_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":0,\\\"load_size\\\":\\\"<ADD STRING VALUE>\\\"}}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"days_of_week\\\":{},\\\"email_address\\\":\\\"<ADD STRING VALUE>\\\",\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{},\\\"search\\\":{\\\"search_id\\\":0,\\\"search_type\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_received\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailers\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_available\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":0,\\\"destination_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":0,\\\"load_size\\\":\\\"<ADD STRING VALUE>\\\"}}\"\n\nconn.request(\"POST\", \"/api/alerts/%7Bboard_type%7D\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\"\n\npayload = \"{\\\"days_of_week\\\":{},\\\"email_address\\\":\\\"<ADD STRING VALUE>\\\",\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{},\\\"search\\\":{\\\"search_id\\\":0,\\\"search_type\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_received\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailers\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_available\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":0,\\\"destination_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":0,\\\"load_size\\\":\\\"<ADD STRING VALUE>\\\"}}\"\nresponse = requests.request(\"POST\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"days_of_week\\\":{},\\\"email_address\\\":\\\"<ADD STRING VALUE>\\\",\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{},\\\"search\\\":{\\\"search_id\\\":0,\\\"search_type\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_received\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailers\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_available\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":0,\\\"destination_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":0,\\\"load_size\\\":\\\"<ADD STRING VALUE>\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}' |  \\\n  http POST https://www.directfreight.com/api/alerts/%7Bboard_type%7D"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"days_of_week\": [],\n  \"email_address\": \"<ADD STRING VALUE>\",\n  \"end_hour\": [],\n  \"expires_after\": [],\n  \"list_order\": [],\n  \"list_type\": [],\n  \"minute_frequency\": [],\n  \"send_type\": [],\n  \"start_hour\": [],\n  \"time_zone\": [],\n  \"search\": [\n    \"search_id\": 0,\n    \"search_type\": \"<ADD STRING VALUE>\",\n    \"date_received\": \"<ADD STRING VALUE>\",\n    \"trailers\": \"<ADD STRING VALUE>\",\n    \"date_available\": \"<ADD STRING VALUE>\",\n    \"origin_state\": \"<ADD STRING VALUE>\",\n    \"origin_city\": \"<ADD STRING VALUE>\",\n    \"origin_radius\": 0,\n    \"destination_state\": \"<ADD STRING VALUE>\",\n    \"destination_city\": \"<ADD STRING VALUE>\",\n    \"destination_radius\": 0,\n    \"load_size\": \"<ADD STRING VALUE>\"\n  ]\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --body-data '{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/alerts/%7Bboard_type%7D"
          }
        ]
      },
      "x-restlet": {
        "section": "ALERTS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/alerts/%7Bboard_type%7D"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/alerts/%7Bboard_type%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/alerts/%7Bboard_type%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/alerts/%7Bboard_type%7D"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/alerts/%7Bboard_type%7D"
          }
        ]
      }
    },
    "/billings": {
      "get": {
        "description": "Will return how much the end user will be charged to upgrade. It will not charge the user, or consume the promo code.",
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "The promo code. ",
            "in": "query",
            "name": "promo_code",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/get_billing_response"
            }
          }
        },
        "summary": "STAGE=UNK Returns the amount the end user will be charged. If a promo code is present return adjusted amount. If there are special conditions a string with the promo code benefits will also be returned.",
        "tags": [
          "billings"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url 'https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/billings?promo_code=SOME_STRING_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/billings',\n  qs: { promo_code: 'SOME_STRING_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/billings\");\n\nreq.query({\n  \"promo_code\": \"SOME_STRING_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"'https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/billings');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'promo_code' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/billings');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'promo_code' => 'SOME_STRING_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/billings?promo_code=SOME_STRING_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/billings\"\n\nquerystring = {\"promo_code\":\"SOME_STRING_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE'"
          }
        ]
      },
      "post": {
        "consumes": [],
        "description": "This function will attempt to process a payment, and upgrade a non subscibed user. ",
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bill_user"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/object_created"
          }
        },
        "summary": "STAGE=UNK This function will attempt to process a payment, and upgrade a non subscibed user. ",
        "tags": [
          "billings"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/billings\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"billing_address\\\":{},\\\"cc_data\\\":{},\\\"check_data\\\":{},\\\"promo_code\\\":\\\"<ADD STRING VALUE>\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/billings\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"billing_address\\\":{},\\\"cc_data\\\":{},\\\"check_data\\\":{},\\\"promo_code\\\":\\\"<ADD STRING VALUE>\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request POST \\\n  --url https://www.directfreight.com/api/billings \\\n  --data '{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/billings\"\n\n\tpayload := strings.NewReader(\"{\\\"billing_address\\\":{},\\\"cc_data\\\":{},\\\"check_data\\\":{},\\\"promo_code\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"billing_address\\\":{},\\\"cc_data\\\":{},\\\"check_data\\\":{},\\\"promo_code\\\":\\\"<ADD STRING VALUE>\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/billings\")\n  .post(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://www.directfreight.com/api/billings\")\n  .body(\"{\\\"billing_address\\\":{},\\\"cc_data\\\":{},\\\"check_data\\\":{},\\\"promo_code\\\":\\\"<ADD STRING VALUE>\\\"}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/billings\",\n  \"method\": \"POST\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"billing_address\\\":{},\\\"cc_data\\\":{},\\\"check_data\\\":{},\\\"promo_code\\\":\\\"<ADD STRING VALUE>\\\"}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"billing_address\": {},\n  \"cc_data\": {},\n  \"check_data\": {},\n  \"promo_code\": \"<ADD STRING VALUE>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://www.directfreight.com/api/billings\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/billings\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ billing_address: {},\n  cc_data: {},\n  check_data: {},\n  promo_code: '<ADD STRING VALUE>' }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://www.directfreight.com/api/billings',\n  body: \n   { billing_address: {},\n     cc_data: {},\n     check_data: {},\n     promo_code: '<ADD STRING VALUE>' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://www.directfreight.com/api/billings\");\n\nreq.type(\"json\");\nreq.send({\n  \"billing_address\": {},\n  \"cc_data\": {},\n  \"check_data\": {},\n  \"promo_code\": \"<ADD STRING VALUE>\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"billing_address\": @{  },\n                              @\"cc_data\": @{  },\n                              @\"check_data\": @{  },\n                              @\"promo_code\": @\"<ADD STRING VALUE>\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/billings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/billings\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"billing_address\\\":{},\\\"cc_data\\\":{},\\\"check_data\\\":{},\\\"promo_code\\\":\\\"<ADD STRING VALUE>\\\"}\" in\n\nClient.call ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"POST\",\n\"https://www.directfreight.com/api/billings\");\n$request->content('{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/billings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"billing_address\\\":{},\\\"cc_data\\\":{},\\\"check_data\\\":{},\\\"promo_code\\\":\\\"<ADD STRING VALUE>\\\"}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/billings');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/billings');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"billing_address\\\":{},\\\"cc_data\\\":{},\\\"check_data\\\":{},\\\"promo_code\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nconn.request(\"POST\", \"/api/billings\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/billings\"\n\npayload = \"{\\\"billing_address\\\":{},\\\"cc_data\\\":{},\\\"check_data\\\":{},\\\"promo_code\\\":\\\"<ADD STRING VALUE>\\\"}\"\nresponse = requests.request(\"POST\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/billings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"billing_address\\\":{},\\\"cc_data\\\":{},\\\"check_data\\\":{},\\\"promo_code\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}' |  \\\n  http POST https://www.directfreight.com/api/billings"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"billing_address\": [],\n  \"cc_data\": [],\n  \"check_data\": [],\n  \"promo_code\": \"<ADD STRING VALUE>\"\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/billings\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --body-data '{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/billings"
          }
        ]
      },
      "x-restlet": {
        "section": "BILLINGS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/billings\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/billings"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/billings\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/billings\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/billings\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/billings\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/billings\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/billings\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/billings' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/billings\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/billings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/billings\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/billings\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/billings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/billings');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/billings');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/billings\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/billings\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/billings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/billings"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/billings\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/billings"
          }
        ]
      }
    },
    "/boards/{board_type}": {
      "parameters": [
        {
          "$ref": "#/parameters/board_type"
        }
      ],
      "post": {
        "consumes": [],
        "description": "This is the primary search method. Please specifify at least a partial origin or destination.",
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token-optional"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/board_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list matching your search.",
            "schema": {
              "$ref": "#/definitions/board_response"
            }
          },
          "422": {
            "$ref": "#/responses/error_422"
          }
        },
        "summary": "Get a board",
        "tags": [
          "boards"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"alert_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":30,\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"item_count\\\":50,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":30,\\\"origin_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"page_number\\\":0,\\\"return_count\\\":false,\\\"return_only_new\\\":false,\\\"ship_date\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"sort_parameter\\\":\\\"age\\\",\\\"trailer_type\\\":[\\\"V\\\"]}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/boards/%7Bboard_type%7D\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"alert_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":30,\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"item_count\\\":50,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":30,\\\"origin_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"page_number\\\":0,\\\"return_count\\\":false,\\\"return_only_new\\\":false,\\\"ship_date\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"sort_parameter\\\":\\\"age\\\",\\\"trailer_type\\\":[\\\"V\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request POST \\\n  --url https://www.directfreight.com/api/boards/%7Bboard_type%7D \\\n  --data '{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"alert_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":30,\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"item_count\\\":50,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":30,\\\"origin_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"page_number\\\":0,\\\"return_count\\\":false,\\\"return_only_new\\\":false,\\\"ship_date\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"sort_parameter\\\":\\\"age\\\",\\\"trailer_type\\\":[\\\"V\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"alert_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":30,\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"item_count\\\":50,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":30,\\\"origin_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"page_number\\\":0,\\\"return_count\\\":false,\\\"return_only_new\\\":false,\\\"ship_date\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"sort_parameter\\\":\\\"age\\\",\\\"trailer_type\\\":[\\\"V\\\"]}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/%7Bboard_type%7D\")\n  .post(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://www.directfreight.com/api/boards/%7Bboard_type%7D\")\n  .body(\"{\\\"alert_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":30,\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"item_count\\\":50,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":30,\\\"origin_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"page_number\\\":0,\\\"return_count\\\":false,\\\"return_only_new\\\":false,\\\"ship_date\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"sort_parameter\\\":\\\"age\\\",\\\"trailer_type\\\":[\\\"V\\\"]}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\",\n  \"method\": \"POST\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"alert_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":30,\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"item_count\\\":50,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":30,\\\"origin_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"page_number\\\":0,\\\"return_count\\\":false,\\\"return_only_new\\\":false,\\\"ship_date\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"sort_parameter\\\":\\\"age\\\",\\\"trailer_type\\\":[\\\"V\\\"]}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"alert_id\": 0,\n  \"destination_city\": \"<ADD STRING VALUE>\",\n  \"destination_radius\": 30,\n  \"destination_state\": [\n    \"<ADD STRING VALUE>\"\n  ],\n  \"full_load\": false,\n  \"item_count\": 50,\n  \"origin_city\": \"<ADD STRING VALUE>\",\n  \"origin_radius\": 30,\n  \"origin_state\": [\n    \"<ADD STRING VALUE>\"\n  ],\n  \"page_number\": 0,\n  \"return_count\": false,\n  \"return_only_new\": false,\n  \"ship_date\": [\n    \"<ADD STRING VALUE>\"\n  ],\n  \"sort_parameter\": \"age\",\n  \"trailer_type\": [\n    \"V\"\n  ]\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/%7Bboard_type%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ alert_id: 0,\n  destination_city: '<ADD STRING VALUE>',\n  destination_radius: 30,\n  destination_state: [ '<ADD STRING VALUE>' ],\n  full_load: false,\n  item_count: 50,\n  origin_city: '<ADD STRING VALUE>',\n  origin_radius: 30,\n  origin_state: [ '<ADD STRING VALUE>' ],\n  page_number: 0,\n  return_count: false,\n  return_only_new: false,\n  ship_date: [ '<ADD STRING VALUE>' ],\n  sort_parameter: 'age',\n  trailer_type: [ 'V' ] }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://www.directfreight.com/api/boards/%7Bboard_type%7D',\n  body: \n   { alert_id: 0,\n     destination_city: '<ADD STRING VALUE>',\n     destination_radius: 30,\n     destination_state: [ '<ADD STRING VALUE>' ],\n     full_load: false,\n     item_count: 50,\n     origin_city: '<ADD STRING VALUE>',\n     origin_radius: 30,\n     origin_state: [ '<ADD STRING VALUE>' ],\n     page_number: 0,\n     return_count: false,\n     return_only_new: false,\n     ship_date: [ '<ADD STRING VALUE>' ],\n     sort_parameter: 'age',\n     trailer_type: [ 'V' ] },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\");\n\nreq.type(\"json\");\nreq.send({\n  \"alert_id\": 0,\n  \"destination_city\": \"<ADD STRING VALUE>\",\n  \"destination_radius\": 30,\n  \"destination_state\": [\n    \"<ADD STRING VALUE>\"\n  ],\n  \"full_load\": false,\n  \"item_count\": 50,\n  \"origin_city\": \"<ADD STRING VALUE>\",\n  \"origin_radius\": 30,\n  \"origin_state\": [\n    \"<ADD STRING VALUE>\"\n  ],\n  \"page_number\": 0,\n  \"return_count\": false,\n  \"return_only_new\": false,\n  \"ship_date\": [\n    \"<ADD STRING VALUE>\"\n  ],\n  \"sort_parameter\": \"age\",\n  \"trailer_type\": [\n    \"V\"\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"alert_id\": @0,\n                              @\"destination_city\": @\"<ADD STRING VALUE>\",\n                              @\"destination_radius\": @30,\n                              @\"destination_state\": @[ @\"<ADD STRING VALUE>\" ],\n                              @\"full_load\": @NO,\n                              @\"item_count\": @50,\n                              @\"origin_city\": @\"<ADD STRING VALUE>\",\n                              @\"origin_radius\": @30,\n                              @\"origin_state\": @[ @\"<ADD STRING VALUE>\" ],\n                              @\"page_number\": @0,\n                              @\"return_count\": @NO,\n                              @\"return_only_new\": @NO,\n                              @\"ship_date\": @[ @\"<ADD STRING VALUE>\" ],\n                              @\"sort_parameter\": @\"age\",\n                              @\"trailer_type\": @[ @\"V\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/%7Bboard_type%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"alert_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":30,\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"item_count\\\":50,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":30,\\\"origin_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"page_number\\\":0,\\\"return_count\\\":false,\\\"return_only_new\\\":false,\\\"ship_date\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"sort_parameter\\\":\\\"age\\\",\\\"trailer_type\\\":[\\\"V\\\"]}\" in\n\nClient.call ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"POST\",\n\"https://www.directfreight.com/api/boards/%7Bboard_type%7D\");\n$request->content('{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"alert_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":30,\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"item_count\\\":50,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":30,\\\"origin_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"page_number\\\":0,\\\"return_count\\\":false,\\\"return_only_new\\\":false,\\\"ship_date\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"sort_parameter\\\":\\\"age\\\",\\\"trailer_type\\\":[\\\"V\\\"]}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"alert_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":30,\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"item_count\\\":50,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":30,\\\"origin_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"page_number\\\":0,\\\"return_count\\\":false,\\\"return_only_new\\\":false,\\\"ship_date\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"sort_parameter\\\":\\\"age\\\",\\\"trailer_type\\\":[\\\"V\\\"]}\"\n\nconn.request(\"POST\", \"/api/boards/%7Bboard_type%7D\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\"\n\npayload = \"{\\\"alert_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":30,\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"item_count\\\":50,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":30,\\\"origin_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"page_number\\\":0,\\\"return_count\\\":false,\\\"return_only_new\\\":false,\\\"ship_date\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"sort_parameter\\\":\\\"age\\\",\\\"trailer_type\\\":[\\\"V\\\"]}\"\nresponse = requests.request(\"POST\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/boards/%7Bboard_type%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"alert_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":30,\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"item_count\\\":50,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":30,\\\"origin_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"page_number\\\":0,\\\"return_count\\\":false,\\\"return_only_new\\\":false,\\\"ship_date\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"sort_parameter\\\":\\\"age\\\",\\\"trailer_type\\\":[\\\"V\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}' |  \\\n  http POST https://www.directfreight.com/api/boards/%7Bboard_type%7D"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"alert_id\": 0,\n  \"destination_city\": \"<ADD STRING VALUE>\",\n  \"destination_radius\": 30,\n  \"destination_state\": [\"<ADD STRING VALUE>\"],\n  \"full_load\": false,\n  \"item_count\": 50,\n  \"origin_city\": \"<ADD STRING VALUE>\",\n  \"origin_radius\": 30,\n  \"origin_state\": [\"<ADD STRING VALUE>\"],\n  \"page_number\": 0,\n  \"return_count\": false,\n  \"return_only_new\": false,\n  \"ship_date\": [\"<ADD STRING VALUE>\"],\n  \"sort_parameter\": \"age\",\n  \"trailer_type\": [\"V\"]\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --body-data '{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/boards/%7Bboard_type%7D"
          }
        ]
      },
      "x-restlet": {
        "section": "BOARDS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/boards/%7Bboard_type%7D"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/%7Bboard_type%7D\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/boards/%7Bboard_type%7D\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/%7Bboard_type%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/boards/%7Bboard_type%7D' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/%7Bboard_type%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/boards/%7Bboard_type%7D\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/boards/%7Bboard_type%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/boards/%7Bboard_type%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/boards/%7Bboard_type%7D"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/boards/%7Bboard_type%7D"
          }
        ]
      }
    },
    "/boards/{board_type}/state_list": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/get_state_list_response"
            }
          }
        },
        "summary": "A convenience method to get totals by state.",
        "tags": [
          "boards"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/%7Bboard_type%7D/state_list\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/boards/%7Bboard_type%7D/state_list\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/board_type"
        }
      ],
      "x-restlet": {
        "section": "BOARDS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/%7Bboard_type%7D/state_list\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/boards/%7Bboard_type%7D/state_list\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list"
          }
        ]
      }
    },
    "/boards/hidden_companies": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "The company that need to be marked as not hidden.",
            "in": "query",
            "name": "company_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "STAGE=UNK Mark a company as not hidden.",
        "tags": [
          "boards"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request DELETE \\\n  --url 'https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE\")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE\",\n  \"method\": \"DELETE\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/hidden_companies?company_id=SOME_STRING_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'DELETE',\n  url: 'https://www.directfreight.com/api/boards/hidden_companies',\n  qs: { company_id: 'SOME_STRING_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"DELETE\", \"https://www.directfreight.com/api/boards/hidden_companies\");\n\nreq.query({\n  \"company_id\": \"SOME_STRING_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE\" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"DELETE\",\n\"'https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/hidden_companies');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setQueryData(array(\n  'company_id' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_companies');\n$request->setRequestMethod('DELETE');\n$request->setQuery(new http\\QueryString(array(\n  'company_id' => 'SOME_STRING_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"DELETE\", \"/api/boards/hidden_companies?company_id=SOME_STRING_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/hidden_companies\"\n\nquerystring = {\"company_id\":\"SOME_STRING_VALUE\"}\n\nresponse = requests.request(\"DELETE\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http DELETE 'https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"DELETE\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method DELETE \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "A list of id's to check if any should be visually hidden.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "company_name",
            "required": true,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/get_hidden_companies_response"
            }
          }
        },
        "summary": "STAGE=UNK Get a list of companies that should be hidden.",
        "tags": [
          "boards"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url 'https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/boards/hidden_companies',\n  qs: { company_name: 'SOME_ARRAY_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/boards/hidden_companies\");\n\nreq.query({\n  \"company_name\": \"SOME_ARRAY_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"'https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/hidden_companies');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'company_name' => 'SOME_ARRAY_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_companies');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'company_name' => 'SOME_ARRAY_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/hidden_companies\"\n\nquerystring = {\"company_name\":\"SOME_ARRAY_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE'"
          }
        ]
      },
      "patch": {
        "consumes": [],
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/toggle_hidden_companies"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "STAGE=UNK Toggle one or more company between hidden and unhidden.",
        "tags": [
          "boards"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PATCH\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/hidden_companies\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"company_id\\\":\\\"<ADD STRING VALUE>\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/boards/hidden_companies\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddParameter(\"undefined\", \"{\\\"company_id\\\":\\\"<ADD STRING VALUE>\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request PATCH \\\n  --url https://www.directfreight.com/api/boards/hidden_companies \\\n  --data '{\"company_id\":\"<ADD STRING VALUE>\"}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_companies\"\n\n\tpayload := strings.NewReader(\"{\\\"company_id\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"company_id\\\":\\\"<ADD STRING VALUE>\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/hidden_companies\")\n  .patch(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://www.directfreight.com/api/boards/hidden_companies\")\n  .body(\"{\\\"company_id\\\":\\\"<ADD STRING VALUE>\\\"}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/hidden_companies\",\n  \"method\": \"PATCH\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"company_id\\\":\\\"<ADD STRING VALUE>\\\"}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"company_id\": \"<ADD STRING VALUE>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://www.directfreight.com/api/boards/hidden_companies\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/hidden_companies\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ company_id: '<ADD STRING VALUE>' }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'PATCH',\n  url: 'https://www.directfreight.com/api/boards/hidden_companies',\n  body: { company_id: '<ADD STRING VALUE>' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"PATCH\", \"https://www.directfreight.com/api/boards/hidden_companies\");\n\nreq.type(\"json\");\nreq.send({\n  \"company_id\": \"<ADD STRING VALUE>\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"company_id\": @\"<ADD STRING VALUE>\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/hidden_companies\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/hidden_companies\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"company_id\\\":\\\"<ADD STRING VALUE>\\\"}\" in\n\nClient.call ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"PATCH\",\n\"https://www.directfreight.com/api/boards/hidden_companies\");\n$request->content('{\"company_id\":\"<ADD STRING VALUE>\"}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/hidden_companies\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"company_id\\\":\\\"<ADD STRING VALUE>\\\"}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/hidden_companies');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setBody('{\"company_id\":\"<ADD STRING VALUE>\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"company_id\":\"<ADD STRING VALUE>\"}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_companies');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"company_id\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nconn.request(\"PATCH\", \"/api/boards/hidden_companies\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/hidden_companies\"\n\npayload = \"{\\\"company_id\\\":\\\"<ADD STRING VALUE>\\\"}\"\nresponse = requests.request(\"PATCH\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/boards/hidden_companies\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"{\\\"company_id\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"company_id\":\"<ADD STRING VALUE>\"}' |  \\\n  http PATCH https://www.directfreight.com/api/boards/hidden_companies"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\"company_id\": \"<ADD STRING VALUE>\"]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/hidden_companies\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"PATCH\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method PATCH \\\n  --body-data '{\"company_id\":\"<ADD STRING VALUE>\"}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/boards/hidden_companies"
          }
        ]
      },
      "post": {
        "consumes": [],
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mark_hidden_companies"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/object_created"
          }
        },
        "summary": "STAGE=UNK Mark a set of companies as hidden.",
        "tags": [
          "boards"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/hidden_companies\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"company_name\\\":\\\"<ADD STRING VALUE>\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/boards/hidden_companies\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"company_name\\\":\\\"<ADD STRING VALUE>\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request POST \\\n  --url https://www.directfreight.com/api/boards/hidden_companies \\\n  --data '{\"company_name\":\"<ADD STRING VALUE>\"}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_companies\"\n\n\tpayload := strings.NewReader(\"{\\\"company_name\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"company_name\\\":\\\"<ADD STRING VALUE>\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/hidden_companies\")\n  .post(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://www.directfreight.com/api/boards/hidden_companies\")\n  .body(\"{\\\"company_name\\\":\\\"<ADD STRING VALUE>\\\"}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/hidden_companies\",\n  \"method\": \"POST\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"company_name\\\":\\\"<ADD STRING VALUE>\\\"}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"company_name\": \"<ADD STRING VALUE>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://www.directfreight.com/api/boards/hidden_companies\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/hidden_companies\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ company_name: '<ADD STRING VALUE>' }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://www.directfreight.com/api/boards/hidden_companies',\n  body: { company_name: '<ADD STRING VALUE>' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://www.directfreight.com/api/boards/hidden_companies\");\n\nreq.type(\"json\");\nreq.send({\n  \"company_name\": \"<ADD STRING VALUE>\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"company_name\": @\"<ADD STRING VALUE>\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/hidden_companies\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/hidden_companies\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"company_name\\\":\\\"<ADD STRING VALUE>\\\"}\" in\n\nClient.call ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"POST\",\n\"https://www.directfreight.com/api/boards/hidden_companies\");\n$request->content('{\"company_name\":\"<ADD STRING VALUE>\"}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/hidden_companies\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"company_name\\\":\\\"<ADD STRING VALUE>\\\"}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/hidden_companies');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"company_name\":\"<ADD STRING VALUE>\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"company_name\":\"<ADD STRING VALUE>\"}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_companies');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"company_name\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nconn.request(\"POST\", \"/api/boards/hidden_companies\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/hidden_companies\"\n\npayload = \"{\\\"company_name\\\":\\\"<ADD STRING VALUE>\\\"}\"\nresponse = requests.request(\"POST\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/boards/hidden_companies\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"company_name\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"company_name\":\"<ADD STRING VALUE>\"}' |  \\\n  http POST https://www.directfreight.com/api/boards/hidden_companies"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\"company_name\": \"<ADD STRING VALUE>\"]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/hidden_companies\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --body-data '{\"company_name\":\"<ADD STRING VALUE>\"}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/boards/hidden_companies"
          }
        ]
      },
      "x-restlet": {
        "section": "BOARDS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/hidden_companies\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/boards/hidden_companies"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_companies\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/hidden_companies\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/boards/hidden_companies\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/hidden_companies\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/boards/hidden_companies\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/hidden_companies\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/boards/hidden_companies' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/boards/hidden_companies\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/hidden_companies\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/hidden_companies\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/boards/hidden_companies\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/hidden_companies\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/hidden_companies');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_companies');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/boards/hidden_companies\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/hidden_companies\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/boards/hidden_companies\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/boards/hidden_companies"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/hidden_companies\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/boards/hidden_companies"
          }
        ]
      }
    },
    "/boards/hidden_entries": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "The entry that need to be marked as not hidden. ",
            "in": "query",
            "name": "entry_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "STAGE=UNK Mark a set of entries as not hidden.",
        "tags": [
          "boards"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request DELETE \\\n  --url 'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE\")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE\",\n  \"method\": \"DELETE\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'DELETE',\n  url: 'https://www.directfreight.com/api/boards/hidden_entries',\n  qs: { entry_id: 'SOME_STRING_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"DELETE\", \"https://www.directfreight.com/api/boards/hidden_entries\");\n\nreq.query({\n  \"entry_id\": \"SOME_STRING_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE\" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"DELETE\",\n\"'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/hidden_entries');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setQueryData(array(\n  'entry_id' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_entries');\n$request->setRequestMethod('DELETE');\n$request->setQuery(new http\\QueryString(array(\n  'entry_id' => 'SOME_STRING_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"DELETE\", \"/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/hidden_entries\"\n\nquerystring = {\"entry_id\":\"SOME_STRING_VALUE\"}\n\nresponse = requests.request(\"DELETE\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http DELETE 'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"DELETE\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method DELETE \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "A list of id's to check if any should be visually hidden.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "entry_id",
            "required": true,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/get_hidden_entries"
            }
          }
        },
        "summary": "STAGE=UNK Get a list of entries that should be hidden.",
        "tags": [
          "boards"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url 'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/boards/hidden_entries',\n  qs: { entry_id: 'SOME_ARRAY_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/boards/hidden_entries\");\n\nreq.query({\n  \"entry_id\": \"SOME_ARRAY_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/hidden_entries');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'entry_id' => 'SOME_ARRAY_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_entries');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'entry_id' => 'SOME_ARRAY_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/hidden_entries\"\n\nquerystring = {\"entry_id\":\"SOME_ARRAY_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'"
          }
        ]
      },
      "patch": {
        "consumes": [],
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/toggle_hidden_entries"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "STAGE=UNK Toggle one or more entry between hidden and unhidden.",
        "tags": [
          "boards"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PATCH\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/hidden_entries\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"entry_id\\\":[\\\"<ADD STRING VALUE>\\\"]}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/boards/hidden_entries\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddParameter(\"undefined\", \"{\\\"entry_id\\\":[\\\"<ADD STRING VALUE>\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request PATCH \\\n  --url https://www.directfreight.com/api/boards/hidden_entries \\\n  --data '{\"entry_id\":[\"<ADD STRING VALUE>\"]}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_entries\"\n\n\tpayload := strings.NewReader(\"{\\\"entry_id\\\":[\\\"<ADD STRING VALUE>\\\"]}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"entry_id\\\":[\\\"<ADD STRING VALUE>\\\"]}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/hidden_entries\")\n  .patch(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://www.directfreight.com/api/boards/hidden_entries\")\n  .body(\"{\\\"entry_id\\\":[\\\"<ADD STRING VALUE>\\\"]}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/hidden_entries\",\n  \"method\": \"PATCH\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"entry_id\\\":[\\\"<ADD STRING VALUE>\\\"]}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"entry_id\": [\n    \"<ADD STRING VALUE>\"\n  ]\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://www.directfreight.com/api/boards/hidden_entries\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/hidden_entries\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ entry_id: [ '<ADD STRING VALUE>' ] }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'PATCH',\n  url: 'https://www.directfreight.com/api/boards/hidden_entries',\n  body: { entry_id: [ '<ADD STRING VALUE>' ] },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"PATCH\", \"https://www.directfreight.com/api/boards/hidden_entries\");\n\nreq.type(\"json\");\nreq.send({\n  \"entry_id\": [\n    \"<ADD STRING VALUE>\"\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"entry_id\": @[ @\"<ADD STRING VALUE>\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/hidden_entries\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/hidden_entries\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"entry_id\\\":[\\\"<ADD STRING VALUE>\\\"]}\" in\n\nClient.call ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"PATCH\",\n\"https://www.directfreight.com/api/boards/hidden_entries\");\n$request->content('{\"entry_id\":[\"<ADD STRING VALUE>\"]}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/hidden_entries\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"entry_id\\\":[\\\"<ADD STRING VALUE>\\\"]}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/hidden_entries');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setBody('{\"entry_id\":[\"<ADD STRING VALUE>\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"entry_id\":[\"<ADD STRING VALUE>\"]}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_entries');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"entry_id\\\":[\\\"<ADD STRING VALUE>\\\"]}\"\n\nconn.request(\"PATCH\", \"/api/boards/hidden_entries\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/hidden_entries\"\n\npayload = \"{\\\"entry_id\\\":[\\\"<ADD STRING VALUE>\\\"]}\"\nresponse = requests.request(\"PATCH\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/boards/hidden_entries\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"{\\\"entry_id\\\":[\\\"<ADD STRING VALUE>\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"entry_id\":[\"<ADD STRING VALUE>\"]}' |  \\\n  http PATCH https://www.directfreight.com/api/boards/hidden_entries"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\"entry_id\": [\"<ADD STRING VALUE>\"]]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/hidden_entries\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"PATCH\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method PATCH \\\n  --body-data '{\"entry_id\":[\"<ADD STRING VALUE>\"]}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/boards/hidden_entries"
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "The entry that need to be marked as hidden. ",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "entry_id",
            "required": true,
            "type": "array"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/object_created"
          }
        },
        "summary": "STAGE=UNK Mark a set of entries as hidden.",
        "tags": [
          "boards"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request POST \\\n  --url 'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\",\n  \"method\": \"POST\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://www.directfreight.com/api/boards/hidden_entries',\n  qs: { entry_id: 'SOME_ARRAY_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://www.directfreight.com/api/boards/hidden_entries\");\n\nreq.query({\n  \"entry_id\": \"SOME_ARRAY_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\" in\n\nClient.call `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"POST\",\n\"'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/hidden_entries');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setQueryData(array(\n  'entry_id' => 'SOME_ARRAY_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_entries');\n$request->setRequestMethod('POST');\n$request->setQuery(new http\\QueryString(array(\n  'entry_id' => 'SOME_ARRAY_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"POST\", \"/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/hidden_entries\"\n\nquerystring = {\"entry_id\":\"SOME_ARRAY_VALUE\"}\n\nresponse = requests.request(\"POST\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http POST 'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'"
          }
        ]
      },
      "x-restlet": {
        "section": "BOARDS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/hidden_entries\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/boards/hidden_entries"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_entries\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/hidden_entries\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/boards/hidden_entries\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/hidden_entries\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/boards/hidden_entries\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/hidden_entries\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/boards/hidden_entries' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/boards/hidden_entries\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/hidden_entries\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/hidden_entries\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/boards/hidden_entries\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/hidden_entries\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/hidden_entries');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_entries');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/boards/hidden_entries\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/hidden_entries\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/boards/hidden_entries\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/boards/hidden_entries"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/hidden_entries\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/boards/hidden_entries"
          }
        ]
      }
    },
    "/boards/notes": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "The entry to associate the note with. ",
            "in": "query",
            "name": "note_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "STAGE=UNK Delete a note.",
        "tags": [
          "boards"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request DELETE \\\n  --url 'https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE\")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE\",\n  \"method\": \"DELETE\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/notes?note_id=SOME_STRING_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'DELETE',\n  url: 'https://www.directfreight.com/api/boards/notes',\n  qs: { note_id: 'SOME_STRING_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"DELETE\", \"https://www.directfreight.com/api/boards/notes\");\n\nreq.query({\n  \"note_id\": \"SOME_STRING_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE\" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"DELETE\",\n\"'https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/notes');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setQueryData(array(\n  'note_id' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/notes');\n$request->setRequestMethod('DELETE');\n$request->setQuery(new http\\QueryString(array(\n  'note_id' => 'SOME_STRING_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"DELETE\", \"/api/boards/notes?note_id=SOME_STRING_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/notes\"\n\nquerystring = {\"note_id\":\"SOME_STRING_VALUE\"}\n\nresponse = requests.request(\"DELETE\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http DELETE 'https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"DELETE\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method DELETE \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "Optionally just check if certain loads have notes associated with them. ",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "entry_id",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/get_boards_notes_response"
            }
          }
        },
        "summary": "STAGE=UNK Get notes that this user has written.",
        "tags": [
          "boards"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url 'https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/notes?entry_id=SOME_ARRAY_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/boards/notes',\n  qs: { entry_id: 'SOME_ARRAY_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/boards/notes\");\n\nreq.query({\n  \"entry_id\": \"SOME_ARRAY_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"'https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/notes');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'entry_id' => 'SOME_ARRAY_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/notes');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'entry_id' => 'SOME_ARRAY_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/boards/notes?entry_id=SOME_ARRAY_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/notes\"\n\nquerystring = {\"entry_id\":\"SOME_ARRAY_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE'"
          }
        ]
      },
      "patch": {
        "consumes": [],
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/update_notes"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "STAGE=UNK Update a note.",
        "tags": [
          "boards"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PATCH\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/notes\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/boards/notes\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddParameter(\"undefined\", \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request PATCH \\\n  --url https://www.directfreight.com/api/boards/notes \\\n  --data '{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/notes\"\n\n\tpayload := strings.NewReader(\"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/notes\")\n  .patch(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://www.directfreight.com/api/boards/notes\")\n  .body(\"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/notes\",\n  \"method\": \"PATCH\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"body\": \"<ADD STRING VALUE>\",\n  \"title\": \"<ADD STRING VALUE>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://www.directfreight.com/api/boards/notes\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/notes\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ body: '<ADD STRING VALUE>', title: '<ADD STRING VALUE>' }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'PATCH',\n  url: 'https://www.directfreight.com/api/boards/notes',\n  body: { body: '<ADD STRING VALUE>', title: '<ADD STRING VALUE>' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"PATCH\", \"https://www.directfreight.com/api/boards/notes\");\n\nreq.type(\"json\");\nreq.send({\n  \"body\": \"<ADD STRING VALUE>\",\n  \"title\": \"<ADD STRING VALUE>\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"body\": @\"<ADD STRING VALUE>\",\n                              @\"title\": @\"<ADD STRING VALUE>\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/notes\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/notes\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\" in\n\nClient.call ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"PATCH\",\n\"https://www.directfreight.com/api/boards/notes\");\n$request->content('{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/notes\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/notes');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setBody('{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/notes');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nconn.request(\"PATCH\", \"/api/boards/notes\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/notes\"\n\npayload = \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\"\nresponse = requests.request(\"PATCH\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/boards/notes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}' |  \\\n  http PATCH https://www.directfreight.com/api/boards/notes"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"body\": \"<ADD STRING VALUE>\",\n  \"title\": \"<ADD STRING VALUE>\"\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/notes\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"PATCH\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method PATCH \\\n  --body-data '{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/boards/notes"
          }
        ]
      },
      "post": {
        "consumes": [],
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/create_notes"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/object_created"
          }
        },
        "summary": "STAGE=UNK Create a new note.",
        "tags": [
          "boards"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/notes\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"entry_id\\\":0,\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/boards/notes\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"entry_id\\\":0,\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request POST \\\n  --url https://www.directfreight.com/api/boards/notes \\\n  --data '{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/notes\"\n\n\tpayload := strings.NewReader(\"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"entry_id\\\":0,\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"entry_id\\\":0,\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/notes\")\n  .post(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://www.directfreight.com/api/boards/notes\")\n  .body(\"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"entry_id\\\":0,\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/notes\",\n  \"method\": \"POST\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"entry_id\\\":0,\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"body\": \"<ADD STRING VALUE>\",\n  \"entry_id\": 0,\n  \"title\": \"<ADD STRING VALUE>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://www.directfreight.com/api/boards/notes\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/notes\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ body: '<ADD STRING VALUE>',\n  entry_id: 0,\n  title: '<ADD STRING VALUE>' }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://www.directfreight.com/api/boards/notes',\n  body: \n   { body: '<ADD STRING VALUE>',\n     entry_id: 0,\n     title: '<ADD STRING VALUE>' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://www.directfreight.com/api/boards/notes\");\n\nreq.type(\"json\");\nreq.send({\n  \"body\": \"<ADD STRING VALUE>\",\n  \"entry_id\": 0,\n  \"title\": \"<ADD STRING VALUE>\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"body\": @\"<ADD STRING VALUE>\",\n                              @\"entry_id\": @0,\n                              @\"title\": @\"<ADD STRING VALUE>\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/notes\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/notes\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"entry_id\\\":0,\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\" in\n\nClient.call ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"POST\",\n\"https://www.directfreight.com/api/boards/notes\");\n$request->content('{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/notes\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"entry_id\\\":0,\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/notes');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/notes');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"entry_id\\\":0,\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nconn.request(\"POST\", \"/api/boards/notes\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/notes\"\n\npayload = \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"entry_id\\\":0,\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\"\nresponse = requests.request(\"POST\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/boards/notes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"entry_id\\\":0,\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}' |  \\\n  http POST https://www.directfreight.com/api/boards/notes"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"body\": \"<ADD STRING VALUE>\",\n  \"entry_id\": 0,\n  \"title\": \"<ADD STRING VALUE>\"\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/notes\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --body-data '{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/boards/notes"
          }
        ]
      },
      "x-restlet": {
        "section": "BOARDS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/boards/notes\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/boards/notes"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/notes\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/boards/notes\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/boards/notes\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/boards/notes\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/boards/notes\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/boards/notes\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/boards/notes' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/boards/notes\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/boards/notes\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/boards/notes\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/boards/notes\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/boards/notes\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/boards/notes');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/boards/notes');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/boards/notes\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/boards/notes\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/boards/notes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/boards/notes"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/boards/notes\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/boards/notes"
          }
        ]
      }
    },
    "/credit_reports": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "A special id returned with the board entries.",
            "in": "query",
            "name": "credit_report_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Return format. Currently only supports html and json.",
            "in": "query",
            "name": "format",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "STAGE=UNK Request access to a credit report.",
        "tags": [
          "credit_reports"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url 'https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/credit_reports',\n  qs: \n   { credit_report_id: 'SOME_STRING_VALUE',\n     format: 'SOME_STRING_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/credit_reports\");\n\nreq.query({\n  \"credit_report_id\": \"SOME_STRING_VALUE\",\n  \"format\": \"SOME_STRING_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"'https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/credit_reports');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'credit_report_id' => 'SOME_STRING_VALUE',\n  'format' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/credit_reports');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'credit_report_id' => 'SOME_STRING_VALUE',\n  'format' => 'SOME_STRING_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/credit_reports\"\n\nquerystring = {\"credit_report_id\":\"SOME_STRING_VALUE\",\"format\":\"SOME_STRING_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE'"
          }
        ]
      },
      "x-restlet": {
        "section": "CREDIT_REPORTS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/credit_reports\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/credit_reports"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/credit_reports\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/credit_reports\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/credit_reports\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/credit_reports\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/credit_reports\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/credit_reports\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/credit_reports' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/credit_reports\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/credit_reports\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/credit_reports\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/credit_reports\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/credit_reports\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/credit_reports');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/credit_reports');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/credit_reports\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/credit_reports\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/credit_reports\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/credit_reports"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/credit_reports\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/credit_reports"
          }
        ]
      }
    },
    "/end_user_authentication/users": {
      "post": {
        "consumes": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/end-user-token"
            }
          },
          "422": {
            "$ref": "#/responses/error_422"
          }
        },
        "summary": "STAGE=UNK Create a new user.",
        "tags": [
          "end_user_authentications"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/end_user_authentication/users\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/end_user_authentication/users\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request POST \\\n  --url https://www.directfreight.com/api/end_user_authentication/users \\\n  --data '{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentication/users\"\n\n\tpayload := strings.NewReader(\"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/end_user_authentication/users\")\n  .post(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://www.directfreight.com/api/end_user_authentication/users\")\n  .body(\"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/end_user_authentication/users\",\n  \"method\": \"POST\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"email\": \"<ADD STRING VALUE>\",\n  \"password\": \"<ADD STRING VALUE>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://www.directfreight.com/api/end_user_authentication/users\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/end_user_authentication/users\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ email: '<ADD STRING VALUE>', password: '<ADD STRING VALUE>' }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://www.directfreight.com/api/end_user_authentication/users',\n  body: { email: '<ADD STRING VALUE>', password: '<ADD STRING VALUE>' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://www.directfreight.com/api/end_user_authentication/users\");\n\nreq.type(\"json\");\nreq.send({\n  \"email\": \"<ADD STRING VALUE>\",\n  \"password\": \"<ADD STRING VALUE>\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"email\": @\"<ADD STRING VALUE>\",\n                              @\"password\": @\"<ADD STRING VALUE>\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/end_user_authentication/users\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/end_user_authentication/users\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\" in\n\nClient.call ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"POST\",\n\"https://www.directfreight.com/api/end_user_authentication/users\");\n$request->content('{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/end_user_authentication/users\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/end_user_authentication/users');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/end_user_authentication/users');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nconn.request(\"POST\", \"/api/end_user_authentication/users\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/end_user_authentication/users\"\n\npayload = \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\"\nresponse = requests.request(\"POST\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/end_user_authentication/users\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}' |  \\\n  http POST https://www.directfreight.com/api/end_user_authentication/users"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"email\": \"<ADD STRING VALUE>\",\n  \"password\": \"<ADD STRING VALUE>\"\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/end_user_authentication/users\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --body-data '{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/end_user_authentication/users"
          }
        ]
      },
      "x-restlet": {
        "section": "END_USER_AUTHENTICATIONS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/end_user_authentication/users\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/end_user_authentication/users"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentication/users\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/end_user_authentication/users\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/end_user_authentication/users\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/end_user_authentication/users\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/end_user_authentication/users\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/end_user_authentication/users\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/end_user_authentication/users' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/end_user_authentication/users\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/end_user_authentication/users\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/end_user_authentication/users\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/end_user_authentication/users\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/end_user_authentication/users\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/end_user_authentication/users');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/end_user_authentication/users');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/end_user_authentication/users\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/end_user_authentication/users\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/end_user_authentication/users\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/end_user_authentication/users"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/end_user_authentication/users\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/end_user_authentication/users"
          }
        ]
      }
    },
    "/end_user_authentications": {
      "delete": {
        "description": "This logs a user out. the end-user-token will no longer be valid.",
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          }
        ],
        "responses": {
          "204": {
            "description": "Will not return content on a successful logout."
          }
        },
        "summary": "Logs a user out.",
        "tags": [
          "end_user_authentications"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/end_user_authentications\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/end_user_authentications\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request DELETE \\\n  --url https://www.directfreight.com/api/end_user_authentications"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/end_user_authentications\")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://www.directfreight.com/api/end_user_authentications\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/end_user_authentications\",\n  \"method\": \"DELETE\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://www.directfreight.com/api/end_user_authentications\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/end_user_authentications\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'DELETE',\n  url: 'https://www.directfreight.com/api/end_user_authentications' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"DELETE\", \"https://www.directfreight.com/api/end_user_authentications\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/end_user_authentications\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/end_user_authentications\" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"DELETE\",\n\"https://www.directfreight.com/api/end_user_authentications\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/end_user_authentications\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/end_user_authentications');\n$request->setMethod(HTTP_METH_DELETE);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications');\n$request->setRequestMethod('DELETE');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"DELETE\", \"/api/end_user_authentications\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/end_user_authentications\"\n\nresponse = requests.request(\"DELETE\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/end_user_authentications\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http DELETE https://www.directfreight.com/api/end_user_authentications"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/end_user_authentications\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"DELETE\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method DELETE \\\n  --output-document \\\n  - https://www.directfreight.com/api/end_user_authentications"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token-optional"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/json": "{status: \"Subscribed\"}"
            },
            "schema": {
              "properties": {
                "status": {
                  "description": "Will return the logged in user's status. Valid status's are \"Subscribed\", \"Posting\", \"Overdue\", or \"Not Logged In\".",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Get current authentication level for the user.",
        "tags": [
          "end_user_authentications"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/end_user_authentications\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/end_user_authentications\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url https://www.directfreight.com/api/end_user_authentications"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/end_user_authentications\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/end_user_authentications\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/end_user_authentications\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/end_user_authentications\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/end_user_authentications\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/end_user_authentications' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/end_user_authentications\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/end_user_authentications\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/end_user_authentications\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"https://www.directfreight.com/api/end_user_authentications\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/end_user_authentications\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/end_user_authentications');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/end_user_authentications\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/end_user_authentications\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/end_user_authentications\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET https://www.directfreight.com/api/end_user_authentications"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/end_user_authentications\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - https://www.directfreight.com/api/end_user_authentications"
          }
        ]
      },
      "post": {
        "consumes": [],
        "description": "This function sends login credentials, and retrieves a stateless token.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/login_credentials"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/end-user-token"
            }
          },
          "422": {
            "$ref": "#/responses/error_422"
          }
        },
        "summary": "Logs a user in.",
        "tags": [
          "end_user_authentications"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/end_user_authentications\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"login\\\":\\\"<ADD STRING VALUE>\\\",\\\"realm\\\":\\\"username\\\",\\\"secret\\\":\\\"<ADD STRING VALUE>\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/end_user_authentications\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"login\\\":\\\"<ADD STRING VALUE>\\\",\\\"realm\\\":\\\"username\\\",\\\"secret\\\":\\\"<ADD STRING VALUE>\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request POST \\\n  --url https://www.directfreight.com/api/end_user_authentications \\\n  --data '{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications\"\n\n\tpayload := strings.NewReader(\"{\\\"login\\\":\\\"<ADD STRING VALUE>\\\",\\\"realm\\\":\\\"username\\\",\\\"secret\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"login\\\":\\\"<ADD STRING VALUE>\\\",\\\"realm\\\":\\\"username\\\",\\\"secret\\\":\\\"<ADD STRING VALUE>\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/end_user_authentications\")\n  .post(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://www.directfreight.com/api/end_user_authentications\")\n  .body(\"{\\\"login\\\":\\\"<ADD STRING VALUE>\\\",\\\"realm\\\":\\\"username\\\",\\\"secret\\\":\\\"<ADD STRING VALUE>\\\"}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/end_user_authentications\",\n  \"method\": \"POST\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"login\\\":\\\"<ADD STRING VALUE>\\\",\\\"realm\\\":\\\"username\\\",\\\"secret\\\":\\\"<ADD STRING VALUE>\\\"}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"login\": \"<ADD STRING VALUE>\",\n  \"realm\": \"username\",\n  \"secret\": \"<ADD STRING VALUE>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://www.directfreight.com/api/end_user_authentications\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/end_user_authentications\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ login: '<ADD STRING VALUE>',\n  realm: 'username',\n  secret: '<ADD STRING VALUE>' }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://www.directfreight.com/api/end_user_authentications',\n  body: \n   { login: '<ADD STRING VALUE>',\n     realm: 'username',\n     secret: '<ADD STRING VALUE>' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://www.directfreight.com/api/end_user_authentications\");\n\nreq.type(\"json\");\nreq.send({\n  \"login\": \"<ADD STRING VALUE>\",\n  \"realm\": \"username\",\n  \"secret\": \"<ADD STRING VALUE>\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"login\": @\"<ADD STRING VALUE>\",\n                              @\"realm\": @\"username\",\n                              @\"secret\": @\"<ADD STRING VALUE>\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/end_user_authentications\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/end_user_authentications\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"login\\\":\\\"<ADD STRING VALUE>\\\",\\\"realm\\\":\\\"username\\\",\\\"secret\\\":\\\"<ADD STRING VALUE>\\\"}\" in\n\nClient.call ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"POST\",\n\"https://www.directfreight.com/api/end_user_authentications\");\n$request->content('{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/end_user_authentications\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"login\\\":\\\"<ADD STRING VALUE>\\\",\\\"realm\\\":\\\"username\\\",\\\"secret\\\":\\\"<ADD STRING VALUE>\\\"}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/end_user_authentications');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"login\\\":\\\"<ADD STRING VALUE>\\\",\\\"realm\\\":\\\"username\\\",\\\"secret\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nconn.request(\"POST\", \"/api/end_user_authentications\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/end_user_authentications\"\n\npayload = \"{\\\"login\\\":\\\"<ADD STRING VALUE>\\\",\\\"realm\\\":\\\"username\\\",\\\"secret\\\":\\\"<ADD STRING VALUE>\\\"}\"\nresponse = requests.request(\"POST\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/end_user_authentications\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"login\\\":\\\"<ADD STRING VALUE>\\\",\\\"realm\\\":\\\"username\\\",\\\"secret\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}' |  \\\n  http POST https://www.directfreight.com/api/end_user_authentications"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"login\": \"<ADD STRING VALUE>\",\n  \"realm\": \"username\",\n  \"secret\": \"<ADD STRING VALUE>\"\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/end_user_authentications\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --body-data '{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/end_user_authentications"
          }
        ]
      },
      "x-restlet": {
        "section": "END_USER_AUTHENTICATIONS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/end_user_authentications\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/end_user_authentications"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/end_user_authentications\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/end_user_authentications\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/end_user_authentications\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/end_user_authentications\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/end_user_authentications\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/end_user_authentications' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/end_user_authentications\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/end_user_authentications\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/end_user_authentications\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/end_user_authentications\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/end_user_authentications\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/end_user_authentications');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/end_user_authentications\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/end_user_authentications\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/end_user_authentications\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/end_user_authentications"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/end_user_authentications\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/end_user_authentications"
          }
        ]
      }
    },
    "/end_user_authentications/dates": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "application/json": "{\n  \"now\": \"now\"\n}"
            },
            "schema": {
              "properties": {
                "now": {
                  "description": "The current date and time based on our server.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "Gets an authoritative date_time string.",
        "tags": [
          "end_user_authentications"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/end_user_authentications/dates\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/end_user_authentications/dates\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url https://www.directfreight.com/api/end_user_authentications/dates"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications/dates\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/end_user_authentications/dates\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/end_user_authentications/dates\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/end_user_authentications/dates\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/end_user_authentications/dates\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/end_user_authentications/dates\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/end_user_authentications/dates' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/end_user_authentications/dates\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/end_user_authentications/dates\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/end_user_authentications/dates\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"https://www.directfreight.com/api/end_user_authentications/dates\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/end_user_authentications/dates\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/end_user_authentications/dates');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications/dates');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/end_user_authentications/dates\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/end_user_authentications/dates\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/end_user_authentications/dates\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET https://www.directfreight.com/api/end_user_authentications/dates"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/end_user_authentications/dates\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - https://www.directfreight.com/api/end_user_authentications/dates"
          }
        ]
      },
      "x-restlet": {
        "section": "END_USER_AUTHENTICATIONS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/end_user_authentications/dates\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/end_user_authentications/dates"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications/dates\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/end_user_authentications/dates\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/end_user_authentications/dates\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/end_user_authentications/dates\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/end_user_authentications/dates\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/end_user_authentications/dates\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/end_user_authentications/dates' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/end_user_authentications/dates\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/end_user_authentications/dates\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/end_user_authentications/dates\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/end_user_authentications/dates\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/end_user_authentications/dates\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/end_user_authentications/dates');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications/dates');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/end_user_authentications/dates\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/end_user_authentications/dates\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/end_user_authentications/dates\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/end_user_authentications/dates"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/end_user_authentications/dates\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/end_user_authentications/dates"
          }
        ]
      }
    },
    "/end_user_authentications/passwords": {
      "get": {
        "parameters": [
          {
            "description": "The user e-mail to send a password to if valid.",
            "in": "query",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "This will return a success even if the e-mail is not in our records."
          },
          "422": {
            "$ref": "#/responses/error_422"
          }
        },
        "summary": "STAGE=UNK Request a forgotten password.",
        "tags": [
          "end_user_authentications"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url 'https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/end_user_authentications/passwords?email=SOME_STRING_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/end_user_authentications/passwords',\n  qs: { email: 'SOME_STRING_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/end_user_authentications/passwords\");\n\nreq.query({\n  \"email\": \"SOME_STRING_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"'https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/end_user_authentications/passwords');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'email' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications/passwords');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'email' => 'SOME_STRING_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/end_user_authentications/passwords?email=SOME_STRING_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/end_user_authentications/passwords\"\n\nquerystring = {\"email\":\"SOME_STRING_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE'"
          }
        ]
      },
      "patch": {
        "consumes": [],
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "new_password": {
                  "description": "The user's new password.",
                  "type": "string"
                },
                "old_password": {
                  "description": "Thee user's old password.",
                  "type": "string"
                }
              },
              "required": [
                "new_password",
                "old_password"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "A successful operation."
          },
          "422": {
            "$ref": "#/responses/error_422"
          }
        },
        "summary": "STAGE=UNK Update a users password.",
        "tags": [
          "end_user_authentications"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PATCH\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/end_user_authentications/passwords\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"new_password\\\":\\\"<ADD STRING VALUE>\\\",\\\"old_password\\\":\\\"<ADD STRING VALUE>\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/end_user_authentications/passwords\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddParameter(\"undefined\", \"{\\\"new_password\\\":\\\"<ADD STRING VALUE>\\\",\\\"old_password\\\":\\\"<ADD STRING VALUE>\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request PATCH \\\n  --url https://www.directfreight.com/api/end_user_authentications/passwords \\\n  --data '{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications/passwords\"\n\n\tpayload := strings.NewReader(\"{\\\"new_password\\\":\\\"<ADD STRING VALUE>\\\",\\\"old_password\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"new_password\\\":\\\"<ADD STRING VALUE>\\\",\\\"old_password\\\":\\\"<ADD STRING VALUE>\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/end_user_authentications/passwords\")\n  .patch(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://www.directfreight.com/api/end_user_authentications/passwords\")\n  .body(\"{\\\"new_password\\\":\\\"<ADD STRING VALUE>\\\",\\\"old_password\\\":\\\"<ADD STRING VALUE>\\\"}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/end_user_authentications/passwords\",\n  \"method\": \"PATCH\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"new_password\\\":\\\"<ADD STRING VALUE>\\\",\\\"old_password\\\":\\\"<ADD STRING VALUE>\\\"}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"new_password\": \"<ADD STRING VALUE>\",\n  \"old_password\": \"<ADD STRING VALUE>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://www.directfreight.com/api/end_user_authentications/passwords\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/end_user_authentications/passwords\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ new_password: '<ADD STRING VALUE>',\n  old_password: '<ADD STRING VALUE>' }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'PATCH',\n  url: 'https://www.directfreight.com/api/end_user_authentications/passwords',\n  body: \n   { new_password: '<ADD STRING VALUE>',\n     old_password: '<ADD STRING VALUE>' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"PATCH\", \"https://www.directfreight.com/api/end_user_authentications/passwords\");\n\nreq.type(\"json\");\nreq.send({\n  \"new_password\": \"<ADD STRING VALUE>\",\n  \"old_password\": \"<ADD STRING VALUE>\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"new_password\": @\"<ADD STRING VALUE>\",\n                              @\"old_password\": @\"<ADD STRING VALUE>\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/end_user_authentications/passwords\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/end_user_authentications/passwords\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"new_password\\\":\\\"<ADD STRING VALUE>\\\",\\\"old_password\\\":\\\"<ADD STRING VALUE>\\\"}\" in\n\nClient.call ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"PATCH\",\n\"https://www.directfreight.com/api/end_user_authentications/passwords\");\n$request->content('{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/end_user_authentications/passwords\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"new_password\\\":\\\"<ADD STRING VALUE>\\\",\\\"old_password\\\":\\\"<ADD STRING VALUE>\\\"}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/end_user_authentications/passwords');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setBody('{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications/passwords');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"new_password\\\":\\\"<ADD STRING VALUE>\\\",\\\"old_password\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nconn.request(\"PATCH\", \"/api/end_user_authentications/passwords\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/end_user_authentications/passwords\"\n\npayload = \"{\\\"new_password\\\":\\\"<ADD STRING VALUE>\\\",\\\"old_password\\\":\\\"<ADD STRING VALUE>\\\"}\"\nresponse = requests.request(\"PATCH\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/end_user_authentications/passwords\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"{\\\"new_password\\\":\\\"<ADD STRING VALUE>\\\",\\\"old_password\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}' |  \\\n  http PATCH https://www.directfreight.com/api/end_user_authentications/passwords"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"new_password\": \"<ADD STRING VALUE>\",\n  \"old_password\": \"<ADD STRING VALUE>\"\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/end_user_authentications/passwords\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"PATCH\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method PATCH \\\n  --body-data '{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/end_user_authentications/passwords"
          }
        ]
      },
      "x-restlet": {
        "section": "END_USER_AUTHENTICATIONS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/end_user_authentications/passwords\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/end_user_authentications/passwords"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications/passwords\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/end_user_authentications/passwords\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/end_user_authentications/passwords\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/end_user_authentications/passwords\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/end_user_authentications/passwords\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/end_user_authentications/passwords\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/end_user_authentications/passwords' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/end_user_authentications/passwords\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/end_user_authentications/passwords\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/end_user_authentications/passwords\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/end_user_authentications/passwords\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/end_user_authentications/passwords\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/end_user_authentications/passwords');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications/passwords');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/end_user_authentications/passwords\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/end_user_authentications/passwords\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/end_user_authentications/passwords\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/end_user_authentications/passwords"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/end_user_authentications/passwords\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/end_user_authentications/passwords"
          }
        ]
      }
    },
    "/location/distance": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "origin_city",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "origin_state",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "destination_city",
            "required": true,
            "type": "array"
          },
          {
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "destination_state",
            "required": true,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/get_location_distance_response"
            }
          }
        },
        "summary": "STAGE=UNK Get the distance between 2 locations. This is used to calculate dead head miles.",
        "tags": [
          "locations"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url 'https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/location/distance',\n  qs: \n   { origin_city: 'SOME_STRING_VALUE',\n     origin_state: 'SOME_STRING_VALUE',\n     destination_city: 'SOME_ARRAY_VALUE',\n     destination_state: 'SOME_ARRAY_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/location/distance\");\n\nreq.query({\n  \"origin_city\": \"SOME_STRING_VALUE\",\n  \"origin_state\": \"SOME_STRING_VALUE\",\n  \"destination_city\": \"SOME_ARRAY_VALUE\",\n  \"destination_state\": \"SOME_ARRAY_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"'https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/location/distance');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'origin_city' => 'SOME_STRING_VALUE',\n  'origin_state' => 'SOME_STRING_VALUE',\n  'destination_city' => 'SOME_ARRAY_VALUE',\n  'destination_state' => 'SOME_ARRAY_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/location/distance');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'origin_city' => 'SOME_STRING_VALUE',\n  'origin_state' => 'SOME_STRING_VALUE',\n  'destination_city' => 'SOME_ARRAY_VALUE',\n  'destination_state' => 'SOME_ARRAY_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/location/distance\"\n\nquerystring = {\"origin_city\":\"SOME_STRING_VALUE\",\"origin_state\":\"SOME_STRING_VALUE\",\"destination_city\":\"SOME_ARRAY_VALUE\",\"destination_state\":\"SOME_ARRAY_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE'"
          }
        ]
      },
      "x-restlet": {
        "section": "LOCATIONS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/location/distance\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/location/distance"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/location/distance\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/location/distance\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/location/distance\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/location/distance\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/location/distance\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/location/distance\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/location/distance' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/location/distance\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/location/distance\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/location/distance\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/location/distance\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/location/distance\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/location/distance');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/location/distance');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/location/distance\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/location/distance\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/location/distance\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/location/distance"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/location/distance\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/location/distance"
          }
        ]
      }
    },
    "/locations/closest_city": {
      "get": {
        "parameters": [
          {
            "format": "float",
            "in": "query",
            "name": "latitude",
            "required": true,
            "type": "number"
          },
          {
            "format": "float",
            "in": "query",
            "name": "longitude",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/get_closest_city_response"
            }
          }
        },
        "summary": "STAGE=UNK Will return the closest city to a lat/lon point.",
        "tags": [
          "locations"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url 'https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/locations/closest_city',\n  qs: \n   { latitude: 'SOME_NUMBER_VALUE',\n     longitude: 'SOME_NUMBER_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/locations/closest_city\");\n\nreq.query({\n  \"latitude\": \"SOME_NUMBER_VALUE\",\n  \"longitude\": \"SOME_NUMBER_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"'https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/locations/closest_city');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'latitude' => 'SOME_NUMBER_VALUE',\n  'longitude' => 'SOME_NUMBER_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/locations/closest_city');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'latitude' => 'SOME_NUMBER_VALUE',\n  'longitude' => 'SOME_NUMBER_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/locations/closest_city\"\n\nquerystring = {\"latitude\":\"SOME_NUMBER_VALUE\",\"longitude\":\"SOME_NUMBER_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE'"
          }
        ]
      },
      "x-restlet": {
        "section": "LOCATIONS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/locations/closest_city\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/locations/closest_city"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/locations/closest_city\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/locations/closest_city\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/locations/closest_city\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/locations/closest_city\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/locations/closest_city\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/locations/closest_city\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/locations/closest_city' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/locations/closest_city\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/locations/closest_city\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/locations/closest_city\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/locations/closest_city\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/locations/closest_city\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/locations/closest_city');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/locations/closest_city');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/locations/closest_city\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/locations/closest_city\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/locations/closest_city\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/locations/closest_city"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/locations/closest_city\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/locations/closest_city"
          }
        ]
      }
    },
    "/locations/partial_match": {
      "get": {
        "parameters": [
          {
            "description": "City/State term to search for.   It matches city name and state name and state abbreviation.  So for instance \"MI\" would return Michigan, Missouri, and Miami, FL",
            "in": "query",
            "name": "term",
            "required": true,
            "type": "string"
          },
          {
            "description": "\"state\", and \"city\" will return only the respective information for that search type. Misspelling or blank will default to both.",
            "enum": [
              "city",
              "state",
              "both"
            ],
            "in": "query",
            "name": "search_type",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "A string of a partial city or state name, and returns a list of possible matches.",
        "tags": [
          "locations"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url 'https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/locations/partial_match',\n  qs: { term: 'SOME_STRING_VALUE', search_type: 'SOME_STRING_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/locations/partial_match\");\n\nreq.query({\n  \"term\": \"SOME_STRING_VALUE\",\n  \"search_type\": \"SOME_STRING_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"'https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/locations/partial_match');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'term' => 'SOME_STRING_VALUE',\n  'search_type' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/locations/partial_match');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'term' => 'SOME_STRING_VALUE',\n  'search_type' => 'SOME_STRING_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/locations/partial_match\"\n\nquerystring = {\"term\":\"SOME_STRING_VALUE\",\"search_type\":\"SOME_STRING_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE'"
          }
        ]
      },
      "x-restlet": {
        "section": "LOCATIONS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/locations/partial_match\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/locations/partial_match"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/locations/partial_match\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/locations/partial_match\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/locations/partial_match\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/locations/partial_match\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/locations/partial_match\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/locations/partial_match\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/locations/partial_match' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/locations/partial_match\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/locations/partial_match\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/locations/partial_match\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/locations/partial_match\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/locations/partial_match\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/locations/partial_match');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/locations/partial_match');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/locations/partial_match\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/locations/partial_match\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/locations/partial_match\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/locations/partial_match"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/locations/partial_match\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/locations/partial_match"
          }
        ]
      }
    },
    "/postings/{posting_type}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "You must specify which entry to remove.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "posting_id",
            "required": true,
            "type": "array"
          }
        ],
        "responses": {
          "204": {
            "description": "success operation"
          }
        },
        "summary": "Remove one or more postings.",
        "tags": [
          "postings"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request DELETE \\\n  --url 'https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\",\n  \"method\": \"DELETE\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'DELETE',\n  url: 'https://www.directfreight.com/api/postings/%7Bposting_type%7D',\n  qs: { posting_id: 'SOME_ARRAY_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"DELETE\", \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\n\nreq.query({\n  \"posting_id\": \"SOME_ARRAY_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"DELETE\",\n\"'https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setQueryData(array(\n  'posting_id' => 'SOME_ARRAY_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');\n$request->setRequestMethod('DELETE');\n$request->setQuery(new http\\QueryString(array(\n  'posting_id' => 'SOME_ARRAY_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"DELETE\", \"/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\"\n\nquerystring = {\"posting_id\":\"SOME_ARRAY_VALUE\"}\n\nresponse = requests.request(\"DELETE\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http DELETE 'https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"DELETE\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method DELETE \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "To just return information about some postings.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "posting_id",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/posting_post_response"
            }
          }
        },
        "summary": "Get posts by this user.",
        "tags": [
          "postings"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url 'https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/postings/%7Bposting_type%7D',\n  qs: { posting_id: 'SOME_ARRAY_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\n\nreq.query({\n  \"posting_id\": \"SOME_ARRAY_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"'https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'posting_id' => 'SOME_ARRAY_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'posting_id' => 'SOME_ARRAY_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\"\n\nquerystring = {\"posting_id\":\"SOME_ARRAY_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/posting_type"
        }
      ],
      "patch": {
        "consumes": [],
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postings_patch_request"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "STAGE=UNK Update an posting.",
        "tags": [
          "postings"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PATCH\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"posting_id\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddParameter(\"undefined\", \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"posting_id\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request PATCH \\\n  --url https://www.directfreight.com/api/postings/%7Bposting_type%7D \\\n  --data '{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"posting_id\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"posting_id\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\")\n  .patch(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\")\n  .body(\"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"posting_id\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\",\n  \"method\": \"PATCH\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"posting_id\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"comment\": \"<ADD STRING VALUE>\",\n  \"custom_id\": 0,\n  \"destination_city\": \"<ADD STRING VALUE>\",\n  \"destination_state\": [\n    \"<ADD STRING VALUE>\"\n  ],\n  \"full_load\": false,\n  \"height\": 0,\n  \"length\": 0,\n  \"origin_city\": \"<ADD STRING VALUE>\",\n  \"origin_state\": \"<ADD STRING VALUE>\",\n  \"other_trailer_types\": \"<ADD STRING VALUE>\",\n  \"pay_rate\": 0,\n  \"posting_id\": 0,\n  \"receive_date\": \"<ADD STRING VALUE>\",\n  \"ship_date\": \"<ADD STRING VALUE>\",\n  \"trailer_type\": [\n    \"V\"\n  ],\n  \"weight\": 0,\n  \"width\": 0\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/postings/%7Bposting_type%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ comment: '<ADD STRING VALUE>',\n  custom_id: 0,\n  destination_city: '<ADD STRING VALUE>',\n  destination_state: [ '<ADD STRING VALUE>' ],\n  full_load: false,\n  height: 0,\n  length: 0,\n  origin_city: '<ADD STRING VALUE>',\n  origin_state: '<ADD STRING VALUE>',\n  other_trailer_types: '<ADD STRING VALUE>',\n  pay_rate: 0,\n  posting_id: 0,\n  receive_date: '<ADD STRING VALUE>',\n  ship_date: '<ADD STRING VALUE>',\n  trailer_type: [ 'V' ],\n  weight: 0,\n  width: 0 }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'PATCH',\n  url: 'https://www.directfreight.com/api/postings/%7Bposting_type%7D',\n  body: \n   { comment: '<ADD STRING VALUE>',\n     custom_id: 0,\n     destination_city: '<ADD STRING VALUE>',\n     destination_state: [ '<ADD STRING VALUE>' ],\n     full_load: false,\n     height: 0,\n     length: 0,\n     origin_city: '<ADD STRING VALUE>',\n     origin_state: '<ADD STRING VALUE>',\n     other_trailer_types: '<ADD STRING VALUE>',\n     pay_rate: 0,\n     posting_id: 0,\n     receive_date: '<ADD STRING VALUE>',\n     ship_date: '<ADD STRING VALUE>',\n     trailer_type: [ 'V' ],\n     weight: 0,\n     width: 0 },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"PATCH\", \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\n\nreq.type(\"json\");\nreq.send({\n  \"comment\": \"<ADD STRING VALUE>\",\n  \"custom_id\": 0,\n  \"destination_city\": \"<ADD STRING VALUE>\",\n  \"destination_state\": [\n    \"<ADD STRING VALUE>\"\n  ],\n  \"full_load\": false,\n  \"height\": 0,\n  \"length\": 0,\n  \"origin_city\": \"<ADD STRING VALUE>\",\n  \"origin_state\": \"<ADD STRING VALUE>\",\n  \"other_trailer_types\": \"<ADD STRING VALUE>\",\n  \"pay_rate\": 0,\n  \"posting_id\": 0,\n  \"receive_date\": \"<ADD STRING VALUE>\",\n  \"ship_date\": \"<ADD STRING VALUE>\",\n  \"trailer_type\": [\n    \"V\"\n  ],\n  \"weight\": 0,\n  \"width\": 0\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"comment\": @\"<ADD STRING VALUE>\",\n                              @\"custom_id\": @0,\n                              @\"destination_city\": @\"<ADD STRING VALUE>\",\n                              @\"destination_state\": @[ @\"<ADD STRING VALUE>\" ],\n                              @\"full_load\": @NO,\n                              @\"height\": @0,\n                              @\"length\": @0,\n                              @\"origin_city\": @\"<ADD STRING VALUE>\",\n                              @\"origin_state\": @\"<ADD STRING VALUE>\",\n                              @\"other_trailer_types\": @\"<ADD STRING VALUE>\",\n                              @\"pay_rate\": @0,\n                              @\"posting_id\": @0,\n                              @\"receive_date\": @\"<ADD STRING VALUE>\",\n                              @\"ship_date\": @\"<ADD STRING VALUE>\",\n                              @\"trailer_type\": @[ @\"V\" ],\n                              @\"weight\": @0,\n                              @\"width\": @0 };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"posting_id\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\" in\n\nClient.call ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"PATCH\",\n\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\n$request->content('{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"posting_id\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setBody('{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"posting_id\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\"\n\nconn.request(\"PATCH\", \"/api/postings/%7Bposting_type%7D\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\"\n\npayload = \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"posting_id\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\"\nresponse = requests.request(\"PATCH\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"posting_id\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}' |  \\\n  http PATCH https://www.directfreight.com/api/postings/%7Bposting_type%7D"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"comment\": \"<ADD STRING VALUE>\",\n  \"custom_id\": 0,\n  \"destination_city\": \"<ADD STRING VALUE>\",\n  \"destination_state\": [\"<ADD STRING VALUE>\"],\n  \"full_load\": false,\n  \"height\": 0,\n  \"length\": 0,\n  \"origin_city\": \"<ADD STRING VALUE>\",\n  \"origin_state\": \"<ADD STRING VALUE>\",\n  \"other_trailer_types\": \"<ADD STRING VALUE>\",\n  \"pay_rate\": 0,\n  \"posting_id\": 0,\n  \"receive_date\": \"<ADD STRING VALUE>\",\n  \"ship_date\": \"<ADD STRING VALUE>\",\n  \"trailer_type\": [\"V\"],\n  \"weight\": 0,\n  \"width\": 0\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"PATCH\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method PATCH \\\n  --body-data '{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/postings/%7Bposting_type%7D"
          }
        ]
      },
      "post": {
        "consumes": [],
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postings_post_request"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/object_created"
          }
        },
        "summary": "Create a posting",
        "tags": [
          "postings"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request POST \\\n  --url https://www.directfreight.com/api/postings/%7Bposting_type%7D \\\n  --data '{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\")\n  .post(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\")\n  .body(\"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\",\n  \"method\": \"POST\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"comment\": \"<ADD STRING VALUE>\",\n  \"custom_id\": 0,\n  \"destination_city\": \"<ADD STRING VALUE>\",\n  \"destination_state\": [\n    \"<ADD STRING VALUE>\"\n  ],\n  \"full_load\": false,\n  \"height\": 0,\n  \"length\": 0,\n  \"origin_city\": \"<ADD STRING VALUE>\",\n  \"origin_state\": \"<ADD STRING VALUE>\",\n  \"other_trailer_types\": \"<ADD STRING VALUE>\",\n  \"pay_rate\": 0,\n  \"receive_date\": \"<ADD STRING VALUE>\",\n  \"ship_date\": \"<ADD STRING VALUE>\",\n  \"trailer_type\": [\n    \"V\"\n  ],\n  \"weight\": 0,\n  \"width\": 0\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/postings/%7Bposting_type%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ comment: '<ADD STRING VALUE>',\n  custom_id: 0,\n  destination_city: '<ADD STRING VALUE>',\n  destination_state: [ '<ADD STRING VALUE>' ],\n  full_load: false,\n  height: 0,\n  length: 0,\n  origin_city: '<ADD STRING VALUE>',\n  origin_state: '<ADD STRING VALUE>',\n  other_trailer_types: '<ADD STRING VALUE>',\n  pay_rate: 0,\n  receive_date: '<ADD STRING VALUE>',\n  ship_date: '<ADD STRING VALUE>',\n  trailer_type: [ 'V' ],\n  weight: 0,\n  width: 0 }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://www.directfreight.com/api/postings/%7Bposting_type%7D',\n  body: \n   { comment: '<ADD STRING VALUE>',\n     custom_id: 0,\n     destination_city: '<ADD STRING VALUE>',\n     destination_state: [ '<ADD STRING VALUE>' ],\n     full_load: false,\n     height: 0,\n     length: 0,\n     origin_city: '<ADD STRING VALUE>',\n     origin_state: '<ADD STRING VALUE>',\n     other_trailer_types: '<ADD STRING VALUE>',\n     pay_rate: 0,\n     receive_date: '<ADD STRING VALUE>',\n     ship_date: '<ADD STRING VALUE>',\n     trailer_type: [ 'V' ],\n     weight: 0,\n     width: 0 },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\n\nreq.type(\"json\");\nreq.send({\n  \"comment\": \"<ADD STRING VALUE>\",\n  \"custom_id\": 0,\n  \"destination_city\": \"<ADD STRING VALUE>\",\n  \"destination_state\": [\n    \"<ADD STRING VALUE>\"\n  ],\n  \"full_load\": false,\n  \"height\": 0,\n  \"length\": 0,\n  \"origin_city\": \"<ADD STRING VALUE>\",\n  \"origin_state\": \"<ADD STRING VALUE>\",\n  \"other_trailer_types\": \"<ADD STRING VALUE>\",\n  \"pay_rate\": 0,\n  \"receive_date\": \"<ADD STRING VALUE>\",\n  \"ship_date\": \"<ADD STRING VALUE>\",\n  \"trailer_type\": [\n    \"V\"\n  ],\n  \"weight\": 0,\n  \"width\": 0\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"comment\": @\"<ADD STRING VALUE>\",\n                              @\"custom_id\": @0,\n                              @\"destination_city\": @\"<ADD STRING VALUE>\",\n                              @\"destination_state\": @[ @\"<ADD STRING VALUE>\" ],\n                              @\"full_load\": @NO,\n                              @\"height\": @0,\n                              @\"length\": @0,\n                              @\"origin_city\": @\"<ADD STRING VALUE>\",\n                              @\"origin_state\": @\"<ADD STRING VALUE>\",\n                              @\"other_trailer_types\": @\"<ADD STRING VALUE>\",\n                              @\"pay_rate\": @0,\n                              @\"receive_date\": @\"<ADD STRING VALUE>\",\n                              @\"ship_date\": @\"<ADD STRING VALUE>\",\n                              @\"trailer_type\": @[ @\"V\" ],\n                              @\"weight\": @0,\n                              @\"width\": @0 };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\" in\n\nClient.call ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"POST\",\n\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\n$request->content('{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\"\n\nconn.request(\"POST\", \"/api/postings/%7Bposting_type%7D\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\"\n\npayload = \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\"\nresponse = requests.request(\"POST\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}' |  \\\n  http POST https://www.directfreight.com/api/postings/%7Bposting_type%7D"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"comment\": \"<ADD STRING VALUE>\",\n  \"custom_id\": 0,\n  \"destination_city\": \"<ADD STRING VALUE>\",\n  \"destination_state\": [\"<ADD STRING VALUE>\"],\n  \"full_load\": false,\n  \"height\": 0,\n  \"length\": 0,\n  \"origin_city\": \"<ADD STRING VALUE>\",\n  \"origin_state\": \"<ADD STRING VALUE>\",\n  \"other_trailer_types\": \"<ADD STRING VALUE>\",\n  \"pay_rate\": 0,\n  \"receive_date\": \"<ADD STRING VALUE>\",\n  \"ship_date\": \"<ADD STRING VALUE>\",\n  \"trailer_type\": [\"V\"],\n  \"weight\": 0,\n  \"width\": 0\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --body-data '{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/postings/%7Bposting_type%7D"
          }
        ]
      },
      "x-restlet": {
        "section": "POSTINGS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/postings/%7Bposting_type%7D"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/postings/%7Bposting_type%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/postings/%7Bposting_type%7D' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/postings/%7Bposting_type%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/postings/%7Bposting_type%7D"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/postings/%7Bposting_type%7D"
          }
        ]
      }
    },
    "/postings/{posting_type}/{action}": {
      "parameters": [
        {
          "$ref": "#/parameters/posting_type"
        },
        {
          "description": "Specified in the url. Valid types are \"copy\", and \"move\"",
          "in": "path",
          "name": "action",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "consumes": [],
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/post_posting_type_action_body"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/object_created"
          }
        },
        "summary": "STAGE=UNK Copy or Move an posting.",
        "tags": [
          "postings"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"source_id\\\":{},\\\"source_posting\\\":\\\"<ADD STRING VALUE>\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"source_id\\\":{},\\\"source_posting\\\":\\\"<ADD STRING VALUE>\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request POST \\\n  --url https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D \\\n  --data '{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"source_id\\\":{},\\\"source_posting\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"source_id\\\":{},\\\"source_posting\\\":\\\"<ADD STRING VALUE>\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\")\n  .post(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\")\n  .body(\"{\\\"source_id\\\":{},\\\"source_posting\\\":\\\"<ADD STRING VALUE>\\\"}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\",\n  \"method\": \"POST\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"source_id\\\":{},\\\"source_posting\\\":\\\"<ADD STRING VALUE>\\\"}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"source_id\": {},\n  \"source_posting\": \"<ADD STRING VALUE>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/postings/%7Bposting_type%7D/%7Baction%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ source_id: {}, source_posting: '<ADD STRING VALUE>' }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D',\n  body: { source_id: {}, source_posting: '<ADD STRING VALUE>' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\");\n\nreq.type(\"json\");\nreq.send({\n  \"source_id\": {},\n  \"source_posting\": \"<ADD STRING VALUE>\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"source_id\": @{  },\n                              @\"source_posting\": @\"<ADD STRING VALUE>\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"source_id\\\":{},\\\"source_posting\\\":\\\"<ADD STRING VALUE>\\\"}\" in\n\nClient.call ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"POST\",\n\"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\");\n$request->content('{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"source_id\\\":{},\\\"source_posting\\\":\\\"<ADD STRING VALUE>\\\"}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"source_id\\\":{},\\\"source_posting\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nconn.request(\"POST\", \"/api/postings/%7Bposting_type%7D/%7Baction%7D\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\"\n\npayload = \"{\\\"source_id\\\":{},\\\"source_posting\\\":\\\"<ADD STRING VALUE>\\\"}\"\nresponse = requests.request(\"POST\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"source_id\\\":{},\\\"source_posting\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}' |  \\\n  http POST https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"source_id\": [],\n  \"source_posting\": \"<ADD STRING VALUE>\"\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --body-data '{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D"
          }
        ]
      },
      "x-restlet": {
        "section": "POSTINGS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/postings/%7Bposting_type%7D/%7Baction%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/postings/%7Bposting_type%7D/%7Baction%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D"
          }
        ]
      }
    },
    "/postings/custom_categories/{category_type}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "To just delete information about some postings.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "category_id",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "204": {
            "description": "200 OK"
          }
        },
        "summary": "STAGE=UNK Delete some or all custom columns, or custom_column data.",
        "tags": [
          "postings"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request DELETE \\\n  --url 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\",\n  \"method\": \"DELETE\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'DELETE',\n  url: 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D',\n  qs: { category_id: 'SOME_ARRAY_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"DELETE\", \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\n\nreq.query({\n  \"category_id\": \"SOME_ARRAY_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"DELETE\",\n\"'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setQueryData(array(\n  'category_id' => 'SOME_ARRAY_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');\n$request->setRequestMethod('DELETE');\n$request->setQuery(new http\\QueryString(array(\n  'category_id' => 'SOME_ARRAY_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"DELETE\", \"/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\"\n\nquerystring = {\"category_id\":\"SOME_ARRAY_VALUE\"}\n\nresponse = requests.request(\"DELETE\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http DELETE 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"DELETE\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method DELETE \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "description": "To just return information about some postings.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "category_id",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/get_custom_categories_response"
            }
          }
        },
        "summary": "STAGE=UNK Get a list of custom columns, or custom_column data.",
        "tags": [
          "postings"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D',\n  qs: { category_id: 'SOME_ARRAY_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\n\nreq.query({\n  \"category_id\": \"SOME_ARRAY_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'category_id' => 'SOME_ARRAY_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'category_id' => 'SOME_ARRAY_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\"\n\nquerystring = {\"category_id\":\"SOME_ARRAY_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'"
          }
        ]
      },
      "parameters": [
        {
          "description": "Valid types are \"names\", and \"data\".",
          "in": "path",
          "name": "category_type",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "STAGE=UNK Update a category name, or value.",
        "tags": [
          "postings"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PATCH\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\nvar request = new RestRequest(Method.PATCH);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request PATCH \\\n  --url https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\"\n\n\treq, _ := http.NewRequest(\"PATCH\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\")\n  .patch(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\",\n  \"method\": \"PATCH\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/postings/custom_categories/%7Bcategory_type%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'PATCH',\n  url: 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"PATCH\", \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\" in\n\nClient.call `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"PATCH\",\n\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');\n$request->setRequestMethod('PATCH');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"PATCH\", \"/api/postings/custom_categories/%7Bcategory_type%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\"\n\nresponse = requests.request(\"PATCH\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http PATCH https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"PATCH\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method PATCH \\\n  --output-document \\\n  - https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/object_created"
          }
        },
        "summary": "STAGE=UNK Create new category names, or add new data.",
        "tags": [
          "postings"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request POST \\\n  --url https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\",\n  \"method\": \"POST\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/postings/custom_categories/%7Bcategory_type%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\" in\n\nClient.call `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"POST\",\n\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');\n$request->setMethod(HTTP_METH_POST);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');\n$request->setRequestMethod('POST');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"POST\", \"/api/postings/custom_categories/%7Bcategory_type%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\"\n\nresponse = requests.request(\"POST\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http POST https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --output-document \\\n  - https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"
          }
        ]
      },
      "x-restlet": {
        "section": "POSTINGS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/postings/custom_categories/%7Bcategory_type%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/postings/custom_categories/%7Bcategory_type%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"
          }
        ]
      }
    },
    "/postings/multiple/{posting_type}": {
      "parameters": [
        {
          "$ref": "#/parameters/posting_type"
        }
      ],
      "post": {
        "consumes": [],
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/create_multiple_postings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/post_posting_multiple_response"
            }
          }
        },
        "summary": "STAGE=UNK Create, multiple entries at once. This is a convenience method.",
        "tags": [
          "postings"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"contact_fax\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_phone\\\":\\\"<ADD STRING VALUE>\\\",\\\"delete_current_before_posting\\\":false,\\\"list\\\":[\\\"<ADD STRING VALUE>\\\"]}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"contact_fax\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_phone\\\":\\\"<ADD STRING VALUE>\\\",\\\"delete_current_before_posting\\\":false,\\\"list\\\":[\\\"<ADD STRING VALUE>\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request POST \\\n  --url https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D \\\n  --data '{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"contact_fax\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_phone\\\":\\\"<ADD STRING VALUE>\\\",\\\"delete_current_before_posting\\\":false,\\\"list\\\":[\\\"<ADD STRING VALUE>\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"contact_fax\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_phone\\\":\\\"<ADD STRING VALUE>\\\",\\\"delete_current_before_posting\\\":false,\\\"list\\\":[\\\"<ADD STRING VALUE>\\\"]}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\")\n  .post(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\")\n  .body(\"{\\\"contact_fax\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_phone\\\":\\\"<ADD STRING VALUE>\\\",\\\"delete_current_before_posting\\\":false,\\\"list\\\":[\\\"<ADD STRING VALUE>\\\"]}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\",\n  \"method\": \"POST\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"contact_fax\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_phone\\\":\\\"<ADD STRING VALUE>\\\",\\\"delete_current_before_posting\\\":false,\\\"list\\\":[\\\"<ADD STRING VALUE>\\\"]}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"contact_fax\": \"<ADD STRING VALUE>\",\n  \"contact_name\": \"<ADD STRING VALUE>\",\n  \"contact_phone\": \"<ADD STRING VALUE>\",\n  \"delete_current_before_posting\": false,\n  \"list\": [\n    \"<ADD STRING VALUE>\"\n  ]\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/postings/multiple/%7Bposting_type%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ contact_fax: '<ADD STRING VALUE>',\n  contact_name: '<ADD STRING VALUE>',\n  contact_phone: '<ADD STRING VALUE>',\n  delete_current_before_posting: false,\n  list: [ '<ADD STRING VALUE>' ] }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D',\n  body: \n   { contact_fax: '<ADD STRING VALUE>',\n     contact_name: '<ADD STRING VALUE>',\n     contact_phone: '<ADD STRING VALUE>',\n     delete_current_before_posting: false,\n     list: [ '<ADD STRING VALUE>' ] },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\");\n\nreq.type(\"json\");\nreq.send({\n  \"contact_fax\": \"<ADD STRING VALUE>\",\n  \"contact_name\": \"<ADD STRING VALUE>\",\n  \"contact_phone\": \"<ADD STRING VALUE>\",\n  \"delete_current_before_posting\": false,\n  \"list\": [\n    \"<ADD STRING VALUE>\"\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"contact_fax\": @\"<ADD STRING VALUE>\",\n                              @\"contact_name\": @\"<ADD STRING VALUE>\",\n                              @\"contact_phone\": @\"<ADD STRING VALUE>\",\n                              @\"delete_current_before_posting\": @NO,\n                              @\"list\": @[ @\"<ADD STRING VALUE>\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"contact_fax\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_phone\\\":\\\"<ADD STRING VALUE>\\\",\\\"delete_current_before_posting\\\":false,\\\"list\\\":[\\\"<ADD STRING VALUE>\\\"]}\" in\n\nClient.call ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"POST\",\n\"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\");\n$request->content('{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"contact_fax\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_phone\\\":\\\"<ADD STRING VALUE>\\\",\\\"delete_current_before_posting\\\":false,\\\"list\\\":[\\\"<ADD STRING VALUE>\\\"]}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"contact_fax\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_phone\\\":\\\"<ADD STRING VALUE>\\\",\\\"delete_current_before_posting\\\":false,\\\"list\\\":[\\\"<ADD STRING VALUE>\\\"]}\"\n\nconn.request(\"POST\", \"/api/postings/multiple/%7Bposting_type%7D\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\"\n\npayload = \"{\\\"contact_fax\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_phone\\\":\\\"<ADD STRING VALUE>\\\",\\\"delete_current_before_posting\\\":false,\\\"list\\\":[\\\"<ADD STRING VALUE>\\\"]}\"\nresponse = requests.request(\"POST\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"contact_fax\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_phone\\\":\\\"<ADD STRING VALUE>\\\",\\\"delete_current_before_posting\\\":false,\\\"list\\\":[\\\"<ADD STRING VALUE>\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}' |  \\\n  http POST https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"contact_fax\": \"<ADD STRING VALUE>\",\n  \"contact_name\": \"<ADD STRING VALUE>\",\n  \"contact_phone\": \"<ADD STRING VALUE>\",\n  \"delete_current_before_posting\": false,\n  \"list\": [\"<ADD STRING VALUE>\"]\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --body-data '{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D"
          }
        ]
      },
      "x-restlet": {
        "section": "POSTINGS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/postings/multiple/%7Bposting_type%7D\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/postings/multiple/%7Bposting_type%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D"
          }
        ]
      }
    },
    "/profiles": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "query",
            "items": {
              "type": "integer"
            },
            "name": "posting_id",
            "required": false,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/profile_model"
            }
          }
        },
        "summary": "STAGE=UNK Request the logged in user's profile.",
        "tags": [
          "profiles"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url 'https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles?posting_id=SOME_ARRAY_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/profiles',\n  qs: { posting_id: 'SOME_ARRAY_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/profiles\");\n\nreq.query({\n  \"posting_id\": \"SOME_ARRAY_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"'https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'posting_id' => 'SOME_ARRAY_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'posting_id' => 'SOME_ARRAY_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/profiles?posting_id=SOME_ARRAY_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles\"\n\nquerystring = {\"posting_id\":\"SOME_ARRAY_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE'"
          }
        ]
      },
      "patch": {
        "consumes": [],
        "description": "Please send in at least one field to be updated.",
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patch_profile"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "STAGE=UNK Update profile information.",
        "tags": [
          "profiles"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PATCH\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/profiles\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddParameter(\"undefined\", \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request PATCH \\\n  --url https://www.directfreight.com/api/profiles \\\n  --data '{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles\"\n\n\tpayload := strings.NewReader(\"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles\")\n  .patch(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://www.directfreight.com/api/profiles\")\n  .body(\"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles\",\n  \"method\": \"PATCH\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"address\": \"<ADD STRING VALUE>\",\n  \"city\": \"<ADD STRING VALUE>\",\n  \"company\": \"<ADD STRING VALUE>\",\n  \"contact_extension\": \"<ADD STRING VALUE>\",\n  \"contact_name\": \"<ADD STRING VALUE>\",\n  \"contact_number\": \"<ADD STRING VALUE>\",\n  \"dot_number\": \"<ADD STRING VALUE>\",\n  \"fax_number\": \"<ADD STRING VALUE>\",\n  \"mc_number\": \"<ADD STRING VALUE>\",\n  \"mobile_carrier\": 0,\n  \"mobile_number\": \"<ADD STRING VALUE>\",\n  \"state\": \"<ADD STRING VALUE>\",\n  \"web_page\": \"<ADD STRING VALUE>\",\n  \"zip\": \"<ADD STRING VALUE>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://www.directfreight.com/api/profiles\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ address: '<ADD STRING VALUE>',\n  city: '<ADD STRING VALUE>',\n  company: '<ADD STRING VALUE>',\n  contact_extension: '<ADD STRING VALUE>',\n  contact_name: '<ADD STRING VALUE>',\n  contact_number: '<ADD STRING VALUE>',\n  dot_number: '<ADD STRING VALUE>',\n  fax_number: '<ADD STRING VALUE>',\n  mc_number: '<ADD STRING VALUE>',\n  mobile_carrier: 0,\n  mobile_number: '<ADD STRING VALUE>',\n  state: '<ADD STRING VALUE>',\n  web_page: '<ADD STRING VALUE>',\n  zip: '<ADD STRING VALUE>' }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'PATCH',\n  url: 'https://www.directfreight.com/api/profiles',\n  body: \n   { address: '<ADD STRING VALUE>',\n     city: '<ADD STRING VALUE>',\n     company: '<ADD STRING VALUE>',\n     contact_extension: '<ADD STRING VALUE>',\n     contact_name: '<ADD STRING VALUE>',\n     contact_number: '<ADD STRING VALUE>',\n     dot_number: '<ADD STRING VALUE>',\n     fax_number: '<ADD STRING VALUE>',\n     mc_number: '<ADD STRING VALUE>',\n     mobile_carrier: 0,\n     mobile_number: '<ADD STRING VALUE>',\n     state: '<ADD STRING VALUE>',\n     web_page: '<ADD STRING VALUE>',\n     zip: '<ADD STRING VALUE>' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"PATCH\", \"https://www.directfreight.com/api/profiles\");\n\nreq.type(\"json\");\nreq.send({\n  \"address\": \"<ADD STRING VALUE>\",\n  \"city\": \"<ADD STRING VALUE>\",\n  \"company\": \"<ADD STRING VALUE>\",\n  \"contact_extension\": \"<ADD STRING VALUE>\",\n  \"contact_name\": \"<ADD STRING VALUE>\",\n  \"contact_number\": \"<ADD STRING VALUE>\",\n  \"dot_number\": \"<ADD STRING VALUE>\",\n  \"fax_number\": \"<ADD STRING VALUE>\",\n  \"mc_number\": \"<ADD STRING VALUE>\",\n  \"mobile_carrier\": 0,\n  \"mobile_number\": \"<ADD STRING VALUE>\",\n  \"state\": \"<ADD STRING VALUE>\",\n  \"web_page\": \"<ADD STRING VALUE>\",\n  \"zip\": \"<ADD STRING VALUE>\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"address\": @\"<ADD STRING VALUE>\",\n                              @\"city\": @\"<ADD STRING VALUE>\",\n                              @\"company\": @\"<ADD STRING VALUE>\",\n                              @\"contact_extension\": @\"<ADD STRING VALUE>\",\n                              @\"contact_name\": @\"<ADD STRING VALUE>\",\n                              @\"contact_number\": @\"<ADD STRING VALUE>\",\n                              @\"dot_number\": @\"<ADD STRING VALUE>\",\n                              @\"fax_number\": @\"<ADD STRING VALUE>\",\n                              @\"mc_number\": @\"<ADD STRING VALUE>\",\n                              @\"mobile_carrier\": @0,\n                              @\"mobile_number\": @\"<ADD STRING VALUE>\",\n                              @\"state\": @\"<ADD STRING VALUE>\",\n                              @\"web_page\": @\"<ADD STRING VALUE>\",\n                              @\"zip\": @\"<ADD STRING VALUE>\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\" in\n\nClient.call ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"PATCH\",\n\"https://www.directfreight.com/api/profiles\");\n$request->content('{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setBody('{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nconn.request(\"PATCH\", \"/api/profiles\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles\"\n\npayload = \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\"\nresponse = requests.request(\"PATCH\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/profiles\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}' |  \\\n  http PATCH https://www.directfreight.com/api/profiles"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"address\": \"<ADD STRING VALUE>\",\n  \"city\": \"<ADD STRING VALUE>\",\n  \"company\": \"<ADD STRING VALUE>\",\n  \"contact_extension\": \"<ADD STRING VALUE>\",\n  \"contact_name\": \"<ADD STRING VALUE>\",\n  \"contact_number\": \"<ADD STRING VALUE>\",\n  \"dot_number\": \"<ADD STRING VALUE>\",\n  \"fax_number\": \"<ADD STRING VALUE>\",\n  \"mc_number\": \"<ADD STRING VALUE>\",\n  \"mobile_carrier\": 0,\n  \"mobile_number\": \"<ADD STRING VALUE>\",\n  \"state\": \"<ADD STRING VALUE>\",\n  \"web_page\": \"<ADD STRING VALUE>\",\n  \"zip\": \"<ADD STRING VALUE>\"\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"PATCH\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method PATCH \\\n  --body-data '{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/profiles"
          }
        ]
      },
      "post": {
        "consumes": [],
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/profile_request"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Object created check the headers for a reference URL.",
            "headers": {
              "Location": {
                "description": "This will have a fully qualified API url you can call to get details of yoru load.",
                "type": "string",
                "x-example": "https://directfreight.com/api/postings/loads/?posting_id=1764957218"
              }
            },
            "schema": {
              "properties": {
                "posting_id": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          }
        },
        "summary": "STAGE=UNK Create a new profile.",
        "tags": [
          "profiles"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/profiles\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request POST \\\n  --url https://www.directfreight.com/api/profiles \\\n  --data '{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles\"\n\n\tpayload := strings.NewReader(\"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles\")\n  .post(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://www.directfreight.com/api/profiles\")\n  .body(\"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles\",\n  \"method\": \"POST\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"address\": \"<ADD STRING VALUE>\",\n  \"city\": \"<ADD STRING VALUE>\",\n  \"company\": \"<ADD STRING VALUE>\",\n  \"contact_extension\": \"<ADD STRING VALUE>\",\n  \"contact_name\": \"<ADD STRING VALUE>\",\n  \"contact_number\": \"<ADD STRING VALUE>\",\n  \"dot_number\": \"<ADD STRING VALUE>\",\n  \"fax_number\": \"<ADD STRING VALUE>\",\n  \"mc_number\": \"<ADD STRING VALUE>\",\n  \"mobile_carrier\": 0,\n  \"mobile_number\": \"<ADD STRING VALUE>\",\n  \"password\": \"<ADD STRING VALUE>\",\n  \"state\": \"<ADD STRING VALUE>\",\n  \"web_page\": \"<ADD STRING VALUE>\",\n  \"zip\": \"<ADD STRING VALUE>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://www.directfreight.com/api/profiles\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ address: '<ADD STRING VALUE>',\n  city: '<ADD STRING VALUE>',\n  company: '<ADD STRING VALUE>',\n  contact_extension: '<ADD STRING VALUE>',\n  contact_name: '<ADD STRING VALUE>',\n  contact_number: '<ADD STRING VALUE>',\n  dot_number: '<ADD STRING VALUE>',\n  fax_number: '<ADD STRING VALUE>',\n  mc_number: '<ADD STRING VALUE>',\n  mobile_carrier: 0,\n  mobile_number: '<ADD STRING VALUE>',\n  password: '<ADD STRING VALUE>',\n  state: '<ADD STRING VALUE>',\n  web_page: '<ADD STRING VALUE>',\n  zip: '<ADD STRING VALUE>' }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://www.directfreight.com/api/profiles',\n  body: \n   { address: '<ADD STRING VALUE>',\n     city: '<ADD STRING VALUE>',\n     company: '<ADD STRING VALUE>',\n     contact_extension: '<ADD STRING VALUE>',\n     contact_name: '<ADD STRING VALUE>',\n     contact_number: '<ADD STRING VALUE>',\n     dot_number: '<ADD STRING VALUE>',\n     fax_number: '<ADD STRING VALUE>',\n     mc_number: '<ADD STRING VALUE>',\n     mobile_carrier: 0,\n     mobile_number: '<ADD STRING VALUE>',\n     password: '<ADD STRING VALUE>',\n     state: '<ADD STRING VALUE>',\n     web_page: '<ADD STRING VALUE>',\n     zip: '<ADD STRING VALUE>' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://www.directfreight.com/api/profiles\");\n\nreq.type(\"json\");\nreq.send({\n  \"address\": \"<ADD STRING VALUE>\",\n  \"city\": \"<ADD STRING VALUE>\",\n  \"company\": \"<ADD STRING VALUE>\",\n  \"contact_extension\": \"<ADD STRING VALUE>\",\n  \"contact_name\": \"<ADD STRING VALUE>\",\n  \"contact_number\": \"<ADD STRING VALUE>\",\n  \"dot_number\": \"<ADD STRING VALUE>\",\n  \"fax_number\": \"<ADD STRING VALUE>\",\n  \"mc_number\": \"<ADD STRING VALUE>\",\n  \"mobile_carrier\": 0,\n  \"mobile_number\": \"<ADD STRING VALUE>\",\n  \"password\": \"<ADD STRING VALUE>\",\n  \"state\": \"<ADD STRING VALUE>\",\n  \"web_page\": \"<ADD STRING VALUE>\",\n  \"zip\": \"<ADD STRING VALUE>\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"address\": @\"<ADD STRING VALUE>\",\n                              @\"city\": @\"<ADD STRING VALUE>\",\n                              @\"company\": @\"<ADD STRING VALUE>\",\n                              @\"contact_extension\": @\"<ADD STRING VALUE>\",\n                              @\"contact_name\": @\"<ADD STRING VALUE>\",\n                              @\"contact_number\": @\"<ADD STRING VALUE>\",\n                              @\"dot_number\": @\"<ADD STRING VALUE>\",\n                              @\"fax_number\": @\"<ADD STRING VALUE>\",\n                              @\"mc_number\": @\"<ADD STRING VALUE>\",\n                              @\"mobile_carrier\": @0,\n                              @\"mobile_number\": @\"<ADD STRING VALUE>\",\n                              @\"password\": @\"<ADD STRING VALUE>\",\n                              @\"state\": @\"<ADD STRING VALUE>\",\n                              @\"web_page\": @\"<ADD STRING VALUE>\",\n                              @\"zip\": @\"<ADD STRING VALUE>\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\" in\n\nClient.call ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"POST\",\n\"https://www.directfreight.com/api/profiles\");\n$request->content('{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nconn.request(\"POST\", \"/api/profiles\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles\"\n\npayload = \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\"\nresponse = requests.request(\"POST\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/profiles\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}' |  \\\n  http POST https://www.directfreight.com/api/profiles"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"address\": \"<ADD STRING VALUE>\",\n  \"city\": \"<ADD STRING VALUE>\",\n  \"company\": \"<ADD STRING VALUE>\",\n  \"contact_extension\": \"<ADD STRING VALUE>\",\n  \"contact_name\": \"<ADD STRING VALUE>\",\n  \"contact_number\": \"<ADD STRING VALUE>\",\n  \"dot_number\": \"<ADD STRING VALUE>\",\n  \"fax_number\": \"<ADD STRING VALUE>\",\n  \"mc_number\": \"<ADD STRING VALUE>\",\n  \"mobile_carrier\": 0,\n  \"mobile_number\": \"<ADD STRING VALUE>\",\n  \"password\": \"<ADD STRING VALUE>\",\n  \"state\": \"<ADD STRING VALUE>\",\n  \"web_page\": \"<ADD STRING VALUE>\",\n  \"zip\": \"<ADD STRING VALUE>\"\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --body-data '{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/profiles"
          }
        ]
      },
      "x-restlet": {
        "section": "PROFILES",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/profiles"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/profiles\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/profiles\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/profiles' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/profiles\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/profiles\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/profiles\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/profiles\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/profiles"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/profiles"
          }
        ]
      }
    },
    "/profiles/documents": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          }
        ],
        "responses": {
          "204": {
            "description": "success operation"
          }
        },
        "summary": "STAGE=UNK Delete the document.",
        "tags": [
          "profiles"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles/documents\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/profiles/documents\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request DELETE \\\n  --url https://www.directfreight.com/api/profiles/documents"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/documents\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles/documents\")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://www.directfreight.com/api/profiles/documents\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles/documents\",\n  \"method\": \"DELETE\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://www.directfreight.com/api/profiles/documents\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles/documents\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'DELETE',\n  url: 'https://www.directfreight.com/api/profiles/documents' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"DELETE\", \"https://www.directfreight.com/api/profiles/documents\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles/documents\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles/documents\" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"DELETE\",\n\"https://www.directfreight.com/api/profiles/documents\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles/documents\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles/documents');\n$request->setMethod(HTTP_METH_DELETE);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles/documents');\n$request->setRequestMethod('DELETE');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"DELETE\", \"/api/profiles/documents\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles/documents\"\n\nresponse = requests.request(\"DELETE\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/profiles/documents\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http DELETE https://www.directfreight.com/api/profiles/documents"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles/documents\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"DELETE\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method DELETE \\\n  --output-document \\\n  - https://www.directfreight.com/api/profiles/documents"
          }
        ]
      },
      "get": {
        "description": "Retrieve documents",
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        },
        "summary": "STAGE=UNK Retrieve documents",
        "tags": [
          "profiles"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles/documents\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/profiles/documents\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url https://www.directfreight.com/api/profiles/documents"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/documents\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles/documents\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/profiles/documents\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles/documents\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/profiles/documents\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles/documents\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/profiles/documents' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/profiles/documents\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles/documents\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles/documents\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"https://www.directfreight.com/api/profiles/documents\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles/documents\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles/documents');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles/documents');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/profiles/documents\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles/documents\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/profiles/documents\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET https://www.directfreight.com/api/profiles/documents"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles/documents\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - https://www.directfreight.com/api/profiles/documents"
          }
        ]
      },
      "patch": {
        "consumes": [],
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rename_document"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "success"
          }
        },
        "summary": "STAGE=UNK Rename a document.",
        "tags": [
          "profiles"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PATCH\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles/documents\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"current_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"new_name\\\":\\\"<ADD STRING VALUE>\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/profiles/documents\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddParameter(\"undefined\", \"{\\\"current_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"new_name\\\":\\\"<ADD STRING VALUE>\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request PATCH \\\n  --url https://www.directfreight.com/api/profiles/documents \\\n  --data '{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/documents\"\n\n\tpayload := strings.NewReader(\"{\\\"current_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"new_name\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"current_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"new_name\\\":\\\"<ADD STRING VALUE>\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles/documents\")\n  .patch(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://www.directfreight.com/api/profiles/documents\")\n  .body(\"{\\\"current_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"new_name\\\":\\\"<ADD STRING VALUE>\\\"}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles/documents\",\n  \"method\": \"PATCH\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"current_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"new_name\\\":\\\"<ADD STRING VALUE>\\\"}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"current_name\": \"<ADD STRING VALUE>\",\n  \"new_name\": \"<ADD STRING VALUE>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://www.directfreight.com/api/profiles/documents\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles/documents\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ current_name: '<ADD STRING VALUE>',\n  new_name: '<ADD STRING VALUE>' }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'PATCH',\n  url: 'https://www.directfreight.com/api/profiles/documents',\n  body: \n   { current_name: '<ADD STRING VALUE>',\n     new_name: '<ADD STRING VALUE>' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"PATCH\", \"https://www.directfreight.com/api/profiles/documents\");\n\nreq.type(\"json\");\nreq.send({\n  \"current_name\": \"<ADD STRING VALUE>\",\n  \"new_name\": \"<ADD STRING VALUE>\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"current_name\": @\"<ADD STRING VALUE>\",\n                              @\"new_name\": @\"<ADD STRING VALUE>\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles/documents\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles/documents\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"current_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"new_name\\\":\\\"<ADD STRING VALUE>\\\"}\" in\n\nClient.call ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"PATCH\",\n\"https://www.directfreight.com/api/profiles/documents\");\n$request->content('{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles/documents\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"current_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"new_name\\\":\\\"<ADD STRING VALUE>\\\"}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles/documents');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setBody('{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles/documents');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"current_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"new_name\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nconn.request(\"PATCH\", \"/api/profiles/documents\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles/documents\"\n\npayload = \"{\\\"current_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"new_name\\\":\\\"<ADD STRING VALUE>\\\"}\"\nresponse = requests.request(\"PATCH\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/profiles/documents\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"{\\\"current_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"new_name\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}' |  \\\n  http PATCH https://www.directfreight.com/api/profiles/documents"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\n  \"current_name\": \"<ADD STRING VALUE>\",\n  \"new_name\": \"<ADD STRING VALUE>\"\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles/documents\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"PATCH\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method PATCH \\\n  --body-data '{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/profiles/documents"
          }
        ]
      },
      "post": {
        "consumes": [],
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/upload_document"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/object_created"
          }
        },
        "summary": "STAGE=UNK Upload a new document.",
        "tags": [
          "profiles"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles/documents\");\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"The\\\":{}}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/profiles/documents\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"The\\\":{}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request POST \\\n  --url https://www.directfreight.com/api/profiles/documents \\\n  --data '{\"The\":{}}'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/documents\"\n\n\tpayload := strings.NewReader(\"{\\\"The\\\":{}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"The\\\":{}}\");\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles/documents\")\n  .post(body)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://www.directfreight.com/api/profiles/documents\")\n  .body(\"{\\\"The\\\":{}}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles/documents\",\n  \"method\": \"POST\",\n  \"headers\": {},\n  \"processData\": false,\n  \"data\": \"{\\\"The\\\":{}}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"The\": {}\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://www.directfreight.com/api/profiles/documents\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles/documents\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ The: {} }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://www.directfreight.com/api/profiles/documents',\n  body: { The: {} },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://www.directfreight.com/api/profiles/documents\");\n\nreq.type(\"json\");\nreq.send({\n  \"The\": {}\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\nNSDictionary *parameters = @{ @\"The\": @{  } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles/documents\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles/documents\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"The\\\":{}}\" in\n\nClient.call ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"POST\",\n\"https://www.directfreight.com/api/profiles/documents\");\n$request->content('{\"The\":{}}');\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles/documents\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"The\\\":{}}\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles/documents');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"The\":{}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"The\":{}}');\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles/documents');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\npayload = \"{\\\"The\\\":{}}\"\n\nconn.request(\"POST\", \"/api/profiles/documents\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles/documents\"\n\npayload = \"{\\\"The\\\":{}}\"\nresponse = requests.request(\"POST\", url, data=payload)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/profiles/documents\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"The\\\":{}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"The\":{}}' |  \\\n  http POST https://www.directfreight.com/api/profiles/documents"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\nlet parameters = [\"The\": []]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles/documents\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --body-data '{\"The\":{}}' \\\n  --output-document \\\n  - https://www.directfreight.com/api/profiles/documents"
          }
        ]
      },
      "x-restlet": {
        "section": "PROFILES",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles/documents\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/profiles/documents"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/documents\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles/documents\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/profiles/documents\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles/documents\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/profiles/documents\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles/documents\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/profiles/documents' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/profiles/documents\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles/documents\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles/documents\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/profiles/documents\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles/documents\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles/documents');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles/documents');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/profiles/documents\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles/documents\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/profiles/documents\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/profiles/documents"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles/documents\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/profiles/documents"
          }
        ]
      }
    },
    "/profiles/mobile_carriers": {
      "get": {
        "description": "Retrieve a list of supported carriers.",
        "parameters": [
          {
            "description": "A way to just get back the info for just one carrier.",
            "format": "int32",
            "in": "query",
            "name": "carrier_id",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/mobile_carrier_response"
            }
          }
        },
        "summary": "STAGE=UNK Retrieve one or more mobile carriers. ",
        "tags": [
          "profiles"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url 'https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/profiles/mobile_carriers',\n  qs: { carrier_id: 'SOME_INTEGER_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/profiles/mobile_carriers\");\n\nreq.query({\n  \"carrier_id\": \"SOME_INTEGER_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"'https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles/mobile_carriers');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'carrier_id' => 'SOME_INTEGER_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles/mobile_carriers');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'carrier_id' => 'SOME_INTEGER_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles/mobile_carriers\"\n\nquerystring = {\"carrier_id\":\"SOME_INTEGER_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE'"
          }
        ]
      },
      "x-restlet": {
        "section": "PROFILES",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles/mobile_carriers\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/profiles/mobile_carriers"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/mobile_carriers\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles/mobile_carriers\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/profiles/mobile_carriers\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles/mobile_carriers\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/profiles/mobile_carriers\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles/mobile_carriers\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/profiles/mobile_carriers' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/profiles/mobile_carriers\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles/mobile_carriers\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles/mobile_carriers\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/profiles/mobile_carriers\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles/mobile_carriers\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles/mobile_carriers');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles/mobile_carriers');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/profiles/mobile_carriers\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles/mobile_carriers\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/profiles/mobile_carriers\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/profiles/mobile_carriers"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles/mobile_carriers\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/profiles/mobile_carriers"
          }
        ]
      }
    },
    "/profiles/optins": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "STAGE=UNK Marks the profile as opted out.",
        "tags": [
          "profiles"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles/optins\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/profiles/optins\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request DELETE \\\n  --url https://www.directfreight.com/api/profiles/optins"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/optins\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles/optins\")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://www.directfreight.com/api/profiles/optins\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles/optins\",\n  \"method\": \"DELETE\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://www.directfreight.com/api/profiles/optins\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles/optins\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'DELETE',\n  url: 'https://www.directfreight.com/api/profiles/optins' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"DELETE\", \"https://www.directfreight.com/api/profiles/optins\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles/optins\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles/optins\" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"DELETE\",\n\"https://www.directfreight.com/api/profiles/optins\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles/optins\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles/optins');\n$request->setMethod(HTTP_METH_DELETE);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles/optins');\n$request->setRequestMethod('DELETE');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"DELETE\", \"/api/profiles/optins\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles/optins\"\n\nresponse = requests.request(\"DELETE\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/profiles/optins\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http DELETE https://www.directfreight.com/api/profiles/optins"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles/optins\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"DELETE\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method DELETE \\\n  --output-document \\\n  - https://www.directfreight.com/api/profiles/optins"
          }
        ]
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/success_status_response"
            }
          }
        },
        "summary": "STAGE=UNK Check if the profile has opted to being contacted by text.",
        "tags": [
          "profiles"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles/optins\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/profiles/optins\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url https://www.directfreight.com/api/profiles/optins"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/optins\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles/optins\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/profiles/optins\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles/optins\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/profiles/optins\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles/optins\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/profiles/optins' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/profiles/optins\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles/optins\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles/optins\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"https://www.directfreight.com/api/profiles/optins\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles/optins\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles/optins');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles/optins');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/profiles/optins\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles/optins\"\n\nresponse = requests.request(\"GET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/profiles/optins\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET https://www.directfreight.com/api/profiles/optins"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles/optins\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - https://www.directfreight.com/api/profiles/optins"
          }
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "STAGE=UNK Marks the profile as opted in.",
        "tags": [
          "profiles"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"PATCH\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles/optins\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/profiles/optins\");\nvar request = new RestRequest(Method.PATCH);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request PATCH \\\n  --url https://www.directfreight.com/api/profiles/optins"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/optins\"\n\n\treq, _ := http.NewRequest(\"PATCH\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles/optins\")\n  .patch(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.patch(\"https://www.directfreight.com/api/profiles/optins\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles/optins\",\n  \"method\": \"PATCH\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PATCH\", \"https://www.directfreight.com/api/profiles/optins\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles/optins\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'PATCH',\n  url: 'https://www.directfreight.com/api/profiles/optins' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"PATCH\", \"https://www.directfreight.com/api/profiles/optins\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles/optins\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles/optins\" in\n\nClient.call `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"PATCH\",\n\"https://www.directfreight.com/api/profiles/optins\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles/optins\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles/optins');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles/optins');\n$request->setRequestMethod('PATCH');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"PATCH\", \"/api/profiles/optins\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles/optins\"\n\nresponse = requests.request(\"PATCH\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/profiles/optins\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http PATCH https://www.directfreight.com/api/profiles/optins"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles/optins\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"PATCH\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method PATCH \\\n  --output-document \\\n  - https://www.directfreight.com/api/profiles/optins"
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/post_optin_code_response"
            }
          }
        },
        "summary": "STAGE=UNK Create, and send an Optin Code.",
        "tags": [
          "profiles"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles/optins\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/profiles/optins\");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request POST \\\n  --url https://www.directfreight.com/api/profiles/optins"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/optins\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles/optins\")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://www.directfreight.com/api/profiles/optins\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles/optins\",\n  \"method\": \"POST\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://www.directfreight.com/api/profiles/optins\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles/optins\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://www.directfreight.com/api/profiles/optins' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://www.directfreight.com/api/profiles/optins\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles/optins\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles/optins\" in\n\nClient.call `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"POST\",\n\"https://www.directfreight.com/api/profiles/optins\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles/optins\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles/optins');\n$request->setMethod(HTTP_METH_POST);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles/optins');\n$request->setRequestMethod('POST');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"POST\", \"/api/profiles/optins\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles/optins\"\n\nresponse = requests.request(\"POST\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/profiles/optins\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http POST https://www.directfreight.com/api/profiles/optins"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles/optins\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --output-document \\\n  - https://www.directfreight.com/api/profiles/optins"
          }
        ]
      },
      "x-restlet": {
        "section": "PROFILES",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/profiles/optins\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/profiles/optins"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/optins\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/profiles/optins\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/profiles/optins\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/profiles/optins\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/profiles/optins\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/profiles/optins\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/profiles/optins' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/profiles/optins\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/profiles/optins\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/profiles/optins\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/profiles/optins\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/profiles/optins\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/profiles/optins');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/profiles/optins');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/profiles/optins\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/profiles/optins\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/profiles/optins\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/profiles/optins"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/profiles/optins\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/profiles/optins"
          }
        ]
      }
    },
    "/validations/email_exists": {
      "get": {
        "description": "Enter an e-mail to see if it is available. Can be used as ?email=xxx or as a JSON request.",
        "parameters": [
          {
            "$ref": "#/parameters/end-user-token"
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/get_email_exists_response"
            }
          }
        },
        "summary": "STAGE=UNK Check if an e-mail exists.",
        "tags": [
          "validations"
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "curl",
            "source": "curl --request GET \\\n  --url 'https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE'"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE\")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/validations/email_exists?email=SOME_STRING_VALUE\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://www.directfreight.com/api/validations/email_exists',\n  qs: { email: 'SOME_STRING_VALUE' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://www.directfreight.com/api/validations/email_exists\");\n\nreq.query({\n  \"email\": \"SOME_STRING_VALUE\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE\" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"GET\",\n\"'https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE'\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/validations/email_exists');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'email' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/validations/email_exists');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'email' => 'SOME_STRING_VALUE'\n)));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"GET\", \"/api/validations/email_exists?email=SOME_STRING_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/validations/email_exists\"\n\nquerystring = {\"email\":\"SOME_STRING_VALUE\"}\n\nresponse = requests.request(\"GET\", url, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --output-document \\\n  - 'https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE'"
          }
        ]
      },
      "x-restlet": {
        "section": "VALIDATIONS",
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"X-RESTLET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://www.directfreight.com/api/validations/email_exists\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "Method not supported"
          },
          {
            "lang": "curl",
            "source": "curl --request X-RESTLET \\\n  --url https://www.directfreight.com/api/validations/email_exists"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/validations/email_exists\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://www.directfreight.com/api/validations/email_exists\")\n  .method(\"X-RESTLET\", null)\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.customMethod(\"X-RESTLET\",\"https://www.directfreight.com/api/validations/email_exists\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://www.directfreight.com/api/validations/email_exists\",\n  \"method\": \"X-RESTLET\",\n  \"headers\": {}\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"X-RESTLET\", \"https://www.directfreight.com/api/validations/email_exists\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"X-RESTLET\",\n  \"hostname\": \"www.directfreight.com\",\n  \"port\": null,\n  \"path\": \"/api/validations/email_exists\",\n  \"headers\": {}\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'X-RESTLET',\n  url: 'https://www.directfreight.com/api/validations/email_exists' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"X-RESTLET\", \"https://www.directfreight.com/api/validations/email_exists\");\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://www.directfreight.com/api/validations/email_exists\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"X-RESTLET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://www.directfreight.com/api/validations/email_exists\" in\n\nClient.call (Code.method_of_string \"X-RESTLET\") uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Perl_perl5",
            "source": "#!/usr/bin/perl\nuse Modern::Perl;\nuse Data::Dumper;\nuse HTTP::Request::JSON;\nuse LWP::UserAgent::JSON;\nmy $request = HTTP::Request::JSON->new(\"X-RESTLET\",\n\"https://www.directfreight.com/api/validations/email_exists\");\nmy $browser = LWP::UserAgent::JSON->new();\nmy $response = $browser->request($request);\nprint Dumper($response->json_content);"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://www.directfreight.com/api/validations/email_exists\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"X-RESTLET\",\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\nHttpRequest::methodRegister('X-RESTLET');\n$request = new HttpRequest();\n$request->setUrl('https://www.directfreight.com/api/validations/email_exists');\n$request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://www.directfreight.com/api/validations/email_exists');\n$request->setRequestMethod('X-RESTLET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"www.directfreight.com\")\n\nconn.request(\"X-RESTLET\", \"/api/validations/email_exists\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://www.directfreight.com/api/validations/email_exists\"\n\nresponse = requests.request(\"X-RESTLET\", url)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nclass Net::HTTP::X-restlet < Net::HTTPRequest\n  METHOD = 'X-RESTLET'\n  REQUEST_HAS_BODY = 'false'\n  RESPONSE_HAS_BODY = true\nend\n\nurl = URI(\"https://www.directfreight.com/api/validations/email_exists\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::X-restlet.new(url)\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_httpie",
            "source": "http X-RESTLET https://www.directfreight.com/api/validations/email_exists"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://www.directfreight.com/api/validations/email_exists\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"X-RESTLET\"\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          },
          {
            "lang": "wget",
            "source": "wget --quiet \\\n  --method X-RESTLET \\\n  --output-document \\\n  - https://www.directfreight.com/api/validations/email_exists"
          }
        ]
      }
    }
  },
  "definitions": {
    "alert_list": {
      "description": "A hash containing a list of objects. Each entry should have 1 alert object, and 1 search object, and 2 integer counts. One for the number of new loads, and one for the number of total loads that match the search critera.",
      "example": "{\n  \"data\": [\n    \"{}\",\n    \"{}\"\n  ]\n}",
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/alert"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "ALERTS"
      }
    },
    "alert": {
      "type": "object",
      "required": [
        "days_of_week",
        "email_address",
        "end_hour",
        "expires_after",
        "list_order",
        "list_type",
        "minute_frequency",
        "search",
        "send_type",
        "start_hour",
        "time_zone"
      ],
      "properties": {
        "days_of_week": {
          "type": "object",
          "description": "Limit the days that alerts are sent to the days listed. Send an array of strings. Valid strings are 'Sun','Mon','Tue','Wed','Thu','Fri',and 'Sat'."
        },
        "email_address": {
          "type": "string",
          "description": "The address for the alert."
        },
        "end_hour": {
          "type": "object",
          "description": "Has the same values as start_hour"
        },
        "expires_after": {
          "type": "object",
          "description": "The last day the alert will be valid. Valid time frames are from today until one year into the future."
        },
        "list_order": {
          "type": "object",
          "description": "Any value that is valid in the boards sort_order is also valid here."
        },
        "list_type": {
          "type": "object",
          "description": "This specify the type of list that is returned, including disabling the list from being sent at all. Valid values are 'complete-list','only-new', and 'not-active'."
        },
        "minute_frequency": {
          "type": "object",
          "description": "How many minutes to wait before sending another alert. Valid values are '15','30','60','120','240','480', and '1440'."
        },
        "send_type": {
          "type": "object",
          "description": "What method to send the alert list. Valid types are 'email',or 'text'."
        },
        "start_hour": {
          "type": "object",
          "description": "A value between 3-21 corresponding to the hour of the day."
        },
        "time_zone": {
          "type": "object",
          "description": "A number between -1 and 2. -1 = EST, 0 = CST, 1 = MST, 2 = PST"
        },
        "search": {
          "type": "object",
          "properties": {
            "search_id": {
              "type": "integer"
            },
            "search_type": {
              "type": "string"
            },
            "date_received": {
              "type": "string",
              "format": "date"
            },
            "trailers": {
              "type": "string"
            },
            "date_available": {
              "type": "string",
              "format": "date"
            },
            "origin_state": {
              "type": "string"
            },
            "origin_city": {
              "type": "string"
            },
            "origin_radius": {
              "type": "integer"
            },
            "destination_state": {
              "type": "string"
            },
            "destination_city": {
              "type": "string"
            },
            "destination_radius": {
              "type": "integer"
            },
            "load_size": {
              "type": "string"
            }
          }
        }
      },
      "x-restlet": {
        "section": "ALERTS"
      }
    },
    "bill_user": {
      "type": "object",
      "required": [
        "billing_address"
      ],
      "properties": {
        "billing_address": {
          "type": "object",
          "description": "first_name, last_name, address, city, state, and phone all needed. "
        },
        "cc_data": {
          "type": "object",
          "description": "This is optional if a check number is provided. "
        },
        "check_data": {
          "type": "object",
          "description": "This is optional if a credit number is provided. "
        },
        "promo_code": {
          "type": "string",
          "description": "Optional Promo Code for a discount. "
        }
      },
      "x-restlet": {
        "section": "BILLINGS"
      }
    },
    "board_request": {
      "properties": {
        "alert_id": {
          "description": "By specifying an alert_id we will record the loads seen by this user, and associate it with their alert. ",
          "example": 5555,
          "type": "integer"
        },
        "destination_city": {
          "example": "chicago",
          "minLength": 2,
          "type": "string"
        },
        "destination_radius": {
          "default": 30,
          "description": "If both city and state are specified, it will search for all entries within # Miles of the city. ",
          "maximum": 300,
          "minimum": 1,
          "type": "integer"
        },
        "destination_state": {
          "description": "If the city field is filled out, the first state in the array list will be used with it.",
          "example": "[\"CA\", \"OR\", \"WA\"]",
          "items": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          },
          "type": "array"
        },
        "full_load": {
          "description": "This is only valid on load boards. Add it to limit results to just full or partial loads.",
          "type": "boolean"
        },
        "item_count": {
          "default": 50,
          "description": "This argument adjusts how many items per page will be returned.",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "origin_city": {
          "example": "chillicothe",
          "minLength": 2,
          "type": "string"
        },
        "origin_radius": {
          "default": 30,
          "description": "If both city and state, boards will return all entries within # miles of the city.",
          "maximum": 300,
          "minimum": 1,
          "type": "integer"
        },
        "origin_state": {
          "description": "If the city field is filled out, the first state in the array list will be used with it.",
          "example": "[\"MO\", \"IL\"]",
          "items": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          },
          "type": "array"
        },
        "page_number": {
          "description": "The page you want to return. Will return an empty board on an invalid page.",
          "minimum": 1,
          "type": "integer"
        },
        "return_count": {
          "description": "If included this will return a total count instead of a list. ",
          "type": "boolean"
        },
        "return_only_new": {
          "description": "This will only return unseen results. This requires an alert_id to be specified. ",
          "type": "boolean"
        },
        "ship_date": {
          "description": "Limit the board to only show loads with X ship date. ",
          "example": "[\"2019-12-20\", \"2018-01-09\", \"2017-08-15\"]",
          "items": {
            "description": "Please use the YYYY-MM-DD format.",
            "format": "date",
            "type": "string"
          },
          "type": "array"
        },
        "sort_parameter": {
          "default": "age",
          "description": "The system automatically chooses the most common order based on the parameter chosen. Because of this there is no reverse order option.",
          "enum": [
            "origin_city",
            "origin_state",
            "origin_radius",
            "destination_city",
            "destination_state",
            "destination_radius",
            "trailer_type",
            "load_size",
            "pay_rate",
            "credit_score",
            "age",
            "load_points",
            "trip_miles",
            "dead_head",
            "length",
            "weight",
            "company_name",
            "ship_date",
            "receive_date"
          ],
          "type": "string"
        },
        "trailer_type": {
          "description": "A string array of valid trailer types to limit the search. ",
          "example": "[\"F\", \"F+T\", \"F+S\"]",
          "items": {
            "enum": [
              "V",
              "VINT",
              "SD",
              "MX",
              "HS",
              "AC",
              "LB",
              "F+T",
              "F",
              "FINT",
              "DD",
              "V+V",
              "V+A",
              "CRG",
              "HB",
              "LA",
              "PO",
              "R",
              "RINT",
              "RGN",
              "CV",
              "DT",
              "TNK",
              "F+S",
              "PNEU",
              "CONT",
              "OTHER"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "BOARDS"
      }
    },
    "board_response_item": {
      "properties": {
        "age": {
          "description": "how long since we received this information.",
          "type": "integer"
        },
        "alert_id": {
          "description": "By specifying an alert_id we will record the loads seen by this user, and associate it with their alert. ",
          "example": 5555,
          "type": "integer"
        },
        "comment": {
          "type": "string"
        },
        "company_name": {
          "description": "To see this you must also send an end_user_token that has the subscribed access level.",
          "type": "string"
        },
        "contact_info": {
          "description": "To see this you must also send an end_user_token that has the subscribed access level.",
          "type": "string"
        },
        "credit_score": {
          "type": "integer"
        },
        "dead_head": {
          "description": "Distance between origin_city, and searched city. Will be null if doing a state search.",
          "type": "integer"
        },
        "destination_city": {
          "example": "chicago",
          "minLength": 2,
          "type": "string"
        },
        "destination_state": {
          "example": "\"OR\"",
          "type": "string"
        },
        "full_load": {
          "description": "Will always return false for trucks.",
          "type": "boolean"
        },
        "green_light": {
          "type": "boolean"
        },
        "md5sum": {
          "description": "unique identifier for this item.",
          "type": "string"
        },
        "origin_city": {
          "example": "chillicothe",
          "minLength": 2,
          "type": "string"
        },
        "origin_state": {
          "example": "\"MO\"",
          "type": "string"
        },
        "receive_date": {
          "format": "date",
          "type": "string"
        },
        "ship_date": {
          "description": "Limit the board to only show loads with X ship date. ",
          "example": "\"2017-08-15\"",
          "format": "date",
          "type": "string"
        },
        "trailer_type": {
          "description": "A string array of valid trailer types.",
          "example": "[\"F\", \"F+T\", \"F+S\"]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "trip_miles": {
          "description": "Distance between origin and destination.",
          "type": "integer"
        },
        "user_hid": {
          "description": "This field is only returned for logged in searches. The value when true represents that the user wishes the entry hidden. Look at the boards/hidden_entries/ documentation for more information on how to set and update this value.",
          "type": "boolean"
        }
      },
      "required": [
        "age",
        "credit_score",
        "destination_city",
        "destination_state",
        "full_load",
        "green_light",
        "md5sum",
        "origin_city",
        "origin_state",
        "ship_date",
        "trailer_type"
      ],
      "type": "object",
      "x-restlet": {
        "section": "BOARDS"
      }
    },
    "board_response": {
      "example": "{\n  \"list\": \"{}\",\n  \"page_number\": \"{}\",\n  \"total_items\": \"{}\",\n  \"total_pages\": 0\n}",
      "properties": {
        "list": {
          "description": "A list of entries for this board.",
          "items": {
            "$ref": "#/definitions/board_response_item"
          },
          "type": "array"
        },
        "page_number": {
          "description": "The page you are on.",
          "type": "object"
        },
        "total_items": {
          "description": "A count of all the entry objects for the specified search.",
          "type": "object"
        },
        "total_pages": {
          "description": "A count of the # of pages based on the search parameters.",
          "type": "integer"
        }
      },
      "required": [
        "list"
      ],
      "type": "object",
      "x-restlet": {
        "section": "BOARDS"
      }
    },
    "create_multiple_postings": {
      "type": "object",
      "required": [
        "list"
      ],
      "properties": {
        "contact_fax": {
          "type": "string",
          "description": "By default we use the number listed in their profile. "
        },
        "contact_name": {
          "type": "string",
          "description": "The dispatchers name. By default we use the profile information. "
        },
        "contact_phone": {
          "type": "string",
          "description": "By default we use the number listed in their profile. "
        },
        "delete_current_before_posting": {
          "type": "boolean",
          "description": "An optional argument that will first delete all of the users loads before entering the fresh list. Caution, this will still delete everything even if some of the entries fail to be created. "
        },
        "list": {
          "type": "array",
          "description": "Valid types are &quot;loads&quot;, &quot;trucks&quot;, &quot;private_loads&quot;, &quot;private_trucks&quot;, &quot;test_loads&quot;, and &quot;test_trucks&quot; ",
          "items": {
            "type": "string"
          }
        }
      },
      "x-restlet": {
        "section": "POSTINGS"
      }
    },
    "create_notes": {
      "type": "object",
      "required": [
        "body",
        "entry_id",
        "title"
      ],
      "properties": {
        "body": {
          "type": "string"
        },
        "entry_id": {
          "type": "integer",
          "description": "The entry to associate the note with. "
        },
        "title": {
          "type": "string",
          "description": "Subject of the note. "
        }
      },
      "x-restlet": {
        "section": "BOARDS"
      }
    },
    "create_status": {
      "properties": {
        "success": {
          "type": "integer"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "common_definitions"
      }
    },
    "end-user-token": {
      "properties": {
        "end-user-token": {
          "description": "On success and end-user-token is returned.",
          "example": "XX423ASOEUHT4AESUTH",
          "type": "string"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "END_USER_AUTHENTICATIONS"
      }
    },
    "error_object": {
      "example": "{\n  \"code\": 1,\n  \"error\": \"Generic Validation\",\n  \"description\": \"The e-mail address must be valid.\"\n}",
      "properties": {
        "code": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      },
      "required": [
        "code",
        "description",
        "error"
      ],
      "type": "object",
      "x-restlet": {
        "section": "common_definitions"
      }
    },
    "get_billing_response": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int32",
          "description": "Amount How much the user will be charged. This may be 0."
        },
        "promo_conditions": {
          "type": "object",
          "description": "Any extra text relating to the promo code. For example \"15 Day Free. 34.95 charged after that.\""
        }
      },
      "example": "{\n  \"amount\": 0,\n  \"promo_conditions\": \"{}\"\n}",
      "x-restlet": {
        "section": "BILLINGS"
      }
    },
    "get_boards_notes_response": {
      "type": "object",
      "properties": {
        "entry_id": {
          "type": "array",
          "description": "A hash with each entry id as the name, and a note_object as the value.",
          "items": {
            "type": "string"
          }
        }
      },
      "example": "{\n  \"entry_id\": [\n    \"entry_id\",\n    \"entry_id\"\n  ]\n}",
      "x-restlet": {
        "section": "BOARDS"
      }
    },
    "get_closest_city_response": {
      "example": "{\n  \"city\": \"city\",\n  \"state_abbreviation\": \"{}\",\n  \"state_name\": \"{}\"\n}",
      "properties": {
        "city": {
          "type": "string"
        },
        "state_abbreviation": {
          "type": "object"
        },
        "state_name": {
          "type": "object"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "LOCATIONS"
      }
    },
    "get_custom_categories_response": {
      "example": "{\n  \"categories\": [\n    \"categories\",\n    \"categories\"\n  ]\n}",
      "properties": {
        "categories": {
          "description": "A list of each category, type and it's corresponding position.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "not categorized yet"
      }
    },
    "get_email_exists_response": {
      "example": "{\n  \"exists\": true\n}",
      "properties": {
        "exists": {
          "description": "Returns a true value if it is associated with an account.",
          "type": "boolean"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "not categorized yet"
      }
    },
    "get_hidden_companies_response": {
      "example": "{\n  \"company_name\": [\n    \"company_name\",\n    \"company_name\"\n  ]\n}",
      "properties": {
        "company_name": {
          "description": "A subset of companies that need to be marked as hidden.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "not categorized yet"
      }
    },
    "get_hidden_entries": {
      "example": {
        "entry_id": [
          "entry_id",
          "entry_id"
        ]
      },
      "properties": {
        "entry_id": {
          "description": "A subset of entries that need to be marked as hidden.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "not categorized yet"
      }
    },
    "get_location_distance_response": {
      "example": "{\n  \"distance\": 0\n}",
      "properties": {
        "distance": {
          "description": "A number representing the miles between the two locations.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "LOCATIONS"
      }
    },
    "get_state_list_response": {
      "example": {
        "state_totals": "{     \"MS\": 1449,     \"NS\": 24,     \"VT\": 145,     \"MD\": 520,     \"ID\": 2091,     \"SK\": 126,     \"WA\": 2207,     \"SC\": 1619,     \"VA\": 1781,     \"PQ\": 10,     \"ON\": 270,     \"KS\": 969,     \"NE\": 1386,     \"OR\": 2984,     \"WI\": 2714,     \"GA\": 3184,     \"IN\": 3363,     \"KY\": 1731,     \"NV\": 534,     \"NC\": 1824,     \"BC\": 124,     \"DC\": 7,     .... }"
      },
      "properties": {
        "state_totals": {
          "description": "A hash of state totals.",
          "example": "{     \"MS\": 1449,     \"NS\": 24,     \"VT\": 145,     \"MD\": 520,     \"ID\": 2091,     \"SK\": 126,     \"WA\": 2207,     \"SC\": 1619,     \"VA\": 1781,     \"PQ\": 10,     \"ON\": 270,     \"KS\": 969,     \"NE\": 1386,     \"OR\": 2984,     \"WI\": 2714,     \"GA\": 3184,     \"IN\": 3363,     \"KY\": 1731,     \"NV\": 534,     \"NC\": 1824,     \"BC\": 124,     \"DC\": 7,     .... }",
          "type": "object"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "BOARDS"
      }
    },
    "login_credentials": {
      "properties": {
        "login": {
          "description": "The e-mail, or username information needed to log in. ",
          "type": "string"
        },
        "realm": {
          "description": "This specifies who to log in with. If left blank we will assume email/password. Valid realms are username, email, facebook(not implemneted), google(not implemented), and linkedin(not implemented). ",
          "enum": [
            "username",
            "email"
          ],
          "type": "string"
        },
        "secret": {
          "description": "The password, or token required for this login. ",
          "type": "string"
        }
      },
      "required": [
        "login",
        "realm",
        "secret"
      ],
      "type": "object",
      "x-restlet": {
        "section": "END_USER_AUTHENTICATIONS"
      }
    },
    "mark_hidden_companies": {
      "properties": {
        "company_name": {
          "description": "The comapny that need to be marked as hidden. ",
          "type": "string"
        }
      },
      "required": [
        "company_name"
      ],
      "type": "object",
      "x-restlet": {
        "section": "not categorized yet"
      }
    },
    "mobile_carrier_response": {
      "example": {
        "carrier_id": 0,
        "carrier_name": "{}"
      },
      "properties": {
        "carrier_id": {
          "description": "The carrier ID.",
          "format": "int32",
          "type": "integer"
        },
        "carrier_name": {
          "description": "Their mobile carrier.",
          "type": "object"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "not categorized yet"
      }
    },
    "patch_alert_properties": {
      "properties": {
        "days_of_week": {
          "description": "Limit the days that alerts are sent to the days listed. Send an array of strings. Valid strings are 'Sun','Mon','Tue','Wed','Thu','Fri',and 'Sat'.",
          "type": "object"
        },
        "end_hour": {
          "description": "Has the same values as start_hour",
          "type": "object"
        },
        "expires_after": {
          "description": "The last day the alert will be valid. Valid time frames are from today until one year into the future.",
          "type": "object"
        },
        "list_order": {
          "description": "Any value that is valid in the boards sort_order is also valid here.",
          "type": "object"
        },
        "list_type": {
          "description": "This specify the type of list that is returned, including disabling the list from being sent at all. Valid values are 'complete-list','only-new', and 'not-active'.",
          "type": "object"
        },
        "minute_frequency": {
          "description": "How many minutes to wait before sending another alert. Valid values are '15','30','60','120','240','480', and '1440'.",
          "type": "object"
        },
        "send_type": {
          "description": "What method to send the alert list. Valid types are 'email',or 'text'.",
          "type": "object"
        },
        "start_hour": {
          "description": "A value between 3-21 corresponding to the hour of the day.",
          "type": "object"
        },
        "time_zone": {
          "description": "A number between -1 and 2. -1 = EST, 0 = CST, 1 = MST, 2 = PST",
          "type": "object"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "ALERTS"
      }
    },
    "patch_profile": {
      "properties": {
        "address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "company": {
          "description": "Company name. ",
          "type": "string"
        },
        "contact_extension": {
          "type": "string"
        },
        "contact_name": {
          "description": "Contact name. ",
          "type": "string"
        },
        "contact_number": {
          "type": "string"
        },
        "dot_number": {
          "type": "string"
        },
        "fax_number": {
          "type": "string"
        },
        "mc_number": {
          "type": "string"
        },
        "mobile_carrier": {
          "type": "integer"
        },
        "mobile_number": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "web_page": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        }
      },
      "required": [
        "address",
        "city",
        "company",
        "contact_extension",
        "contact_name",
        "contact_number",
        "dot_number",
        "fax_number",
        "mc_number",
        "mobile_carrier",
        "mobile_number",
        "state",
        "web_page",
        "zip"
      ],
      "type": "object",
      "x-restlet": {
        "section": "PROFILES"
      }
    },
    "post_optin_code_response": {
      "example": {
        "optin_code": "optin_code"
      },
      "properties": {
        "optin_code": {
          "description": "A text string with the code sent.",
          "type": "string"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "not categorized yet"
      }
    },
    "post_posting_multiple_response": {
      "example": "{\n  \"success\": true\n}",
      "properties": {
        "success": {
          "description": "This will return true, and have a unique location in the location header.",
          "type": "boolean"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "POSTINGS"
      }
    },
    "post_posting_type_action_body": {
      "properties": {
        "source_id": {
          "description": "The posting id of the posting you are moving or copying. Optional for create.",
          "type": "object"
        },
        "source_posting": {
          "description": "The posting_type where you are moving or copying the posting from. Optional for create. Items can only be moved to like types. loads -> private_private loads.",
          "type": "string"
        }
      },
      "required": [
        "source_id",
        "source_posting"
      ],
      "type": "object",
      "x-restlet": {
        "section": "not categorized yet"
      }
    },
    "posting_post_response": {
      "example": "{\n  \"list\": [\n    .....\n  ]\n}",
      "properties": {
        "list": {
          "description": "A list of posting objects you can iterate over.",
          "items": {
            "$ref": "#/definitions/postings_post_response_item"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "POSTINGS"
      }
    },
    "postings_patch_request": {
      "properties": {
        "comment": {
          "type": "string"
        },
        "custom_id": {
          "description": "A unique identifier a user can provide for their own records.",
          "type": "integer"
        },
        "destination_city": {
          "description": "For truck type entries this is optional.",
          "type": "string"
        },
        "destination_state": {
          "description": "For truck type entries this is optional.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "full_load": {
          "type": "boolean"
        },
        "height": {
          "description": "This number represents inches.",
          "type": "integer"
        },
        "length": {
          "description": "This number represents inches.",
          "type": "integer"
        },
        "origin_city": {
          "description": "Required for all entry types.",
          "type": "string"
        },
        "origin_state": {
          "description": "Required, 2 character limit.",
          "type": "string"
        },
        "other_trailer_types": {
          "description": "This may be empty.",
          "type": "string"
        },
        "pay_rate": {
          "type": "integer"
        },
        "posting_id": {
          "description": "A unique id in our system for the user's entry.",
          "format": "int32",
          "type": "integer"
        },
        "receive_date": {
          "format": "date",
          "type": "string"
        },
        "ship_date": {
          "format": "date",
          "type": "string"
        },
        "trailer_type": {
          "description": "This can have 1 or more standard trailer types.",
          "items": {
            "enum": [
              "V",
              "VINT",
              "SD",
              "MX",
              "HS",
              "AC",
              "LB",
              "F+T",
              "F",
              "FINT",
              "DD",
              "V+V",
              "V+A",
              "CRG",
              "HB",
              "LA",
              "PO",
              "R",
              "RINT",
              "RGN",
              "CV",
              "DT",
              "TNK",
              "F+S",
              "PNEU",
              "CONT",
              "OTHER"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "weight": {
          "description": "This number represents pounds.",
          "type": "integer"
        },
        "width": {
          "description": "This number represents inches.",
          "type": "integer"
        }
      },
      "required": [
        "posting_id"
      ],
      "type": "object",
      "x-restlet": {
        "section": "POSTINGS"
      }
    },
    "postings_post_request": {
      "properties": {
        "comment": {
          "type": "string"
        },
        "custom_id": {
          "description": "A unique identifier a user can provide for their own records.",
          "type": "integer"
        },
        "destination_city": {
          "description": "For truck type entries this is optional.",
          "type": "string"
        },
        "destination_state": {
          "description": "For truck type entries this is optional.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "full_load": {
          "description": "The load will be defaulted to full if this argument isn't included and marked to false.",
          "type": "boolean"
        },
        "height": {
          "description": "This number represents inches.",
          "type": "integer"
        },
        "length": {
          "description": "This number represents inches.",
          "type": "integer"
        },
        "origin_city": {
          "description": "Required for all entry types.",
          "type": "string"
        },
        "origin_state": {
          "description": "Use the 2 digit state abbreviation.",
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "other_trailer_types": {
          "description": "To include custom trailer types.",
          "type": "string"
        },
        "pay_rate": {
          "description": "We expect one of 2 formats. either the per mile, or total sum.",
          "type": "integer"
        },
        "receive_date": {
          "format": "date",
          "type": "string"
        },
        "ship_date": {
          "description": "The date you wish the load to be shipped.",
          "format": "date",
          "type": "string"
        },
        "trailer_type": {
          "description": "This can have 1 or more standard trailer types.",
          "items": {
            "enum": [
              "V",
              "VINT",
              "SD",
              "MX",
              "HS",
              "AC",
              "LB",
              "F+T",
              "F",
              "FINT",
              "DD",
              "V+V",
              "V+A",
              "CRG",
              "HB",
              "LA",
              "PO",
              "R",
              "RINT",
              "RGN",
              "CV",
              "DT",
              "TNK",
              "F+S",
              "PNEU",
              "CONT",
              "OTHER"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "weight": {
          "description": "This number represents pounds.",
          "type": "integer"
        },
        "width": {
          "description": "This number represents inches.",
          "type": "integer"
        }
      },
      "required": [
        "origin_city",
        "origin_state",
        "ship_date",
        "trailer_type"
      ],
      "type": "object",
      "x-restlet": {
        "section": "POSTINGS"
      }
    },
    "postings_post_response_item": {
      "properties": {
        "comment": {
          "type": "string"
        },
        "contact_info": {
          "description": "This is generated from the logged in users profile information.",
          "type": "string"
        },
        "contact_name": {
          "description": "This is generated from the logged in users profile information.",
          "type": "string"
        },
        "custom_id": {
          "description": "A unique identifier a user can provide for their own records.",
          "type": "integer"
        },
        "destination_city": {
          "description": "For truck type entries this is optional.",
          "type": "string"
        },
        "destination_state": {
          "description": "For truck type entries this is optional.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "full_load": {
          "description": "For trucks this will always be false.",
          "type": "boolean"
        },
        "height": {
          "description": "This number represents inches.",
          "type": "integer"
        },
        "length": {
          "description": "This number represents inches.",
          "type": "integer"
        },
        "origin_city": {
          "description": "Required for all entry types.",
          "type": "string"
        },
        "origin_state": {
          "description": "Use the 2 digit state abbreviation.",
          "maxLength": 2,
          "minLength": 2,
          "type": "string"
        },
        "other_trailer_types": {
          "description": "To include custom trailer types.",
          "type": "string"
        },
        "pay_rate": {
          "description": "We expect one of 2 formats. either the per mile, or total sum.",
          "type": "integer"
        },
        "posting_id": {
          "description": "This is the unique ID of this post.",
          "type": "integer"
        },
        "receive_date": {
          "format": "date",
          "type": "string"
        },
        "ship_date": {
          "description": "The date you wish the load to be shipped.",
          "format": "date",
          "type": "string"
        },
        "trailer_type": {
          "description": "This can have 1 or more standard trailer types.",
          "items": {
            "enum": [
              "V",
              "VINT",
              "SD",
              "MX",
              "HS",
              "AC",
              "LB",
              "F+T",
              "F",
              "FINT",
              "DD",
              "V+V",
              "V+A",
              "CRG",
              "HB",
              "LA",
              "PO",
              "R",
              "RINT",
              "RGN",
              "CV",
              "DT",
              "TNK",
              "F+S",
              "PNEU",
              "CONT",
              "OTHER"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "weight": {
          "description": "This number represents pounds.",
          "type": "integer"
        },
        "width": {
          "description": "This number represents inches.",
          "type": "integer"
        }
      },
      "required": [
        "contact_info",
        "full_load",
        "origin_city",
        "origin_state",
        "posting_id",
        "ship_date",
        "trailer_type"
      ],
      "type": "object",
      "x-restlet": {
        "section": "POSTINGS"
      }
    },
    "profile_model": {
      "example": {
        "address": "P.O. Box 131",
        "city": "Chillicothe",
        "company": "Direct Freight",
        "contact_extension": "x333",
        "contact_name": "Joe Doe",
        "contact_number": "555-555-5555",
        "dot_number": 123456,
        "fax_number": "555-555-5555",
        "mc_number": 123456,
        "mobile_carrier": "Company_X",
        "mobile_number": "555-555-1234",
        "state": "MO",
        "web_page": "http://www.directfreight.com",
        "zip": 55555
      },
      "properties": {
        "address": {
          "description": "The address associated with their entries.",
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "contact_extension": {
          "type": "string"
        },
        "contact_name": {
          "description": "Contact name.",
          "type": "string"
        },
        "contact_number": {
          "type": "string"
        },
        "dot_number": {
          "type": "string"
        },
        "fax_number": {
          "type": "string"
        },
        "mc_number": {
          "type": "string"
        },
        "mobile_carrier": {
          "type": "string"
        },
        "mobile_number": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "web_page": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "PROFILES"
      }
    },
    "profile_request": {
      "properties": {
        "address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "company": {
          "description": "Company name. ",
          "type": "string"
        },
        "contact_extension": {
          "type": "string"
        },
        "contact_name": {
          "description": "Contact name. ",
          "type": "string"
        },
        "contact_number": {
          "type": "string"
        },
        "dot_number": {
          "type": "string"
        },
        "fax_number": {
          "type": "string"
        },
        "mc_number": {
          "type": "string"
        },
        "mobile_carrier": {
          "type": "integer"
        },
        "mobile_number": {
          "type": "string"
        },
        "password": {
          "description": "Needed to set up the user/pass for authentication. ",
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "web_page": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        }
      },
      "required": [
        "address",
        "city",
        "company",
        "contact_extension",
        "contact_name",
        "contact_number",
        "dot_number",
        "fax_number",
        "mc_number",
        "mobile_carrier",
        "mobile_number",
        "password",
        "state",
        "web_page",
        "zip"
      ],
      "type": "object",
      "x-restlet": {
        "section": "PROFILES"
      }
    },
    "rename_document": {
      "properties": {
        "current_name": {
          "description": "The document to be renamed. ",
          "type": "string"
        },
        "new_name": {
          "description": "Replacement name. ",
          "type": "string"
        }
      },
      "required": [
        "current_name",
        "new_name"
      ],
      "type": "object",
      "x-restlet": {
        "section": "PROFILES"
      }
    },
    "success_status_response": {
      "example": {
        "status": "status"
      },
      "properties": {
        "status": {
          "description": "A text status like OPTIN, NORESPONSE, OPTOUT.",
          "type": "string"
        }
      },
      "type": "object",
      "x-restlet": {
        "section": "not categorized yet"
      }
    },
    "toggle_hidden_companies": {
      "properties": {
        "company_id": {
          "description": "The company name that need to be toggled. ",
          "type": "string"
        }
      },
      "required": [
        "company_id"
      ],
      "type": "object",
      "x-restlet": {
        "section": "not categorized yet"
      }
    },
    "toggle_hidden_entries": {
      "properties": {
        "entry_id": {
          "description": "The entry that need to be toggled. ",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "entry_id"
      ],
      "type": "object",
      "x-restlet": {
        "section": "BOARDS"
      }
    },
    "update_notes": {
      "type": "object",
      "required": [
        "body",
        "title"
      ],
      "properties": {
        "body": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Subject of the note. "
        }
      },
      "x-restlet": {
        "section": "BOARDS"
      }
    },
    "upload_document": {
      "properties": {
        "The": {
          "description": "file to be uploaded. ",
          "type": "object"
        }
      },
      "required": [
        "The"
      ],
      "type": "object",
      "x-restlet": {
        "section": "PROFILES"
      }
    },
    "user": {
      "properties": {
        "email": {
          "description": "This must be a valid e-mail. ",
          "type": "string"
        },
        "password": {
          "description": "Currently this is a 6-10 digit alphanumeric password. ",
          "type": "string"
        }
      },
      "required": [
        "email",
        "password"
      ],
      "type": "object",
      "x-restlet": {
        "section": "END_USER_AUTHENTICATIONS"
      }
    }
  }
}

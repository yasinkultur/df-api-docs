basePath: /api
consumes:
  - application/json
host: www.directfreight.com
info:
  description: |-
    In order to use the Direct Freight API please first contact us to get an API Token. This token needs to be sent as a HTTP header argument in every request to our API.

    api-token="SECRET KEY"

    Please keep your api-token a secret. If the token is compromised please contact us to get a new one.

    This api token authenticates your application and gives it access to the API.

    The API token should not be confused with the end-user-token. That token is given to you via the end_user_authentications endpoint when the user logs in. This token is needed in order to use certain features, and get certain sensitive information.

    Both Tokens are stateless, and delivered via the HTTP headers.
  title: Direct Freight API
  version: 2.0.0
  x-logo:
    url: 'https://www.directfreight.com/home/images/logo-direct-freight.png'
produces:
  - application/json
schemes:
  - https
security:
  - api_key: []
securityDefinitions:
  api_key:
    description: This token needs to be sent as a HTTP header argument in every request to our API.
    in: header
    name: api-token
    type: apiKey
swagger: '2.0'
x-restlet:
  sections:
    ALERTS: {}
    BILLINGS: {}
    BOARDS: {}
    CREDIT_REPORTS: {}
    END_USER_AUTHENTICATIONS: {}
    LOCATIONS: {}
    POSTINGS: {}
    PROFILES: {}
    VALIDATIONS: {}
    common_definitions: {}
    not categorized yet: {}
parameters:
  end-user-token:
    in: header
    name: end-user-token
    required: true
    type: string
  end-user-token-optional:
    in: header
    name: end-user-token
    required: false
    type: string
  board_type:
    description: 'Valid types are "loads", and "trucks".'
    enum:
      - loads
      - trucks
    in: path
    name: board_type
    required: true
    type: string
  posting_type:
    description: 'Valid types are "loads", "trucks", "private_loads", "private_trucks", "test_loads", and "test_trucks"'
    enum:
      - loads
      - trucks
      - private_loads
      - private_trucks
      - test_loads
      - test_trucks
    in: path
    name: posting_type
    required: true
    type: string
responses:
  error_422:
    description: Unprocessable Entity. More information provided in the return object.
    schema:
      $ref: '#/definitions/error_object'
  object_created:
    description: Object created check the headers for a reference URL.
    schema:
      $ref: '#/definitions/create_status'
paths:
  '/alerts/{board_type}':
    delete:
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: Specify to just delete some alerts.
          in: query
          items:
            type: string
          name: alert_id
          required: true
          type: array
      responses:
        '204':
          description: successful operation
      summary: STAGE=UNK Delete an alert.
      tags:
        - alerts
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE");
            var request = new RestRequest(Method.DELETE);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request DELETE \
              --url 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE")
              .delete(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.delete("https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE",
              "method": "DELETE",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("DELETE", "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "DELETE",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'DELETE',
              url: 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D',
              qs: { alert_id: 'SOME_ARRAY_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("DELETE", "https://www.directfreight.com/api/alerts/%7Bboard_type%7D");

            req.query({
              "alert_id": "SOME_ARRAY_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"DELETE"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE" in

            Client.call `DELETE uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("DELETE",
            "'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');
            $request->setMethod(HTTP_METH_DELETE);

            $request->setQueryData(array(
              'alert_id' => 'SOME_ARRAY_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');
            $request->setRequestMethod('DELETE');
            $request->setQuery(new http\QueryString(array(
              'alert_id' => 'SOME_ARRAY_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("DELETE", "/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/alerts/%7Bboard_type%7D"

            querystring = {"alert_id":"SOME_ARRAY_VALUE"}

            response = requests.request("DELETE", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Delete.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http DELETE ''https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "DELETE"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method DELETE \
              --output-document \
              - 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'
    get:
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: only get a subset of alerts. As this is a get request this is specified as a query string parameter.
          in: query
          items:
            type: integer
          name: alert_id
          required: false
          type: array
      responses:
        '200':
          description: On success will return a list of alerts.
          schema:
            $ref: '#/definitions/alert_list'
      summary: STAGE=UNK Get a list of alerts. You can optionally limit the list by specifcying alerts by their alert_id.
      tags:
        - alerts
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D',
              qs: { alert_id: 'SOME_ARRAY_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/alerts/%7Bboard_type%7D");

            req.query({
              "alert_id": "SOME_ARRAY_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData(array(
              'alert_id' => 'SOME_ARRAY_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString(array(
              'alert_id' => 'SOME_ARRAY_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/alerts/%7Bboard_type%7D"

            querystring = {"alert_id":"SOME_ARRAY_VALUE"}

            response = requests.request("GET", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET ''https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_ARRAY_VALUE'
    parameters:
      - $ref: '#/parameters/board_type'
    patch:
      consumes: []
      description: Search objects are set at creation. You cannot modify them after the alert has been created.
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: Specify which alert you are updating.
          in: query
          name: alert_id
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/patch_alert_properties'
      responses:
        '204':
          description: Returned on response.
      summary: STAGE=UNK Update an alert.
      tags:
        - alerts
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE");
            var request = new RestRequest(Method.PATCH);
            request.AddParameter("undefined", "{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request PATCH \
              --url 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE' \
              --data '{"days_of_week":{},"end_hour":{},"expires_after":{},"list_order":{},"list_type":{},"minute_frequency":{},"send_type":{},"start_hour":{},"time_zone":{}}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"{\\\"days_of_week\\\":{},\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE")
              .patch(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.patch("https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE")
              .body("{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE",
              "method": "PATCH",
              "headers": {},
              "processData": false,
              "data": "{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "days_of_week": {},
              "end_hour": {},
              "expires_after": {},
              "list_order": {},
              "list_type": {},
              "minute_frequency": {},
              "send_type": {},
              "start_hour": {},
              "time_zone": {}
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("PATCH", "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "PATCH",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ days_of_week: {},
              end_hour: {},
              expires_after: {},
              list_order: {},
              list_type: {},
              minute_frequency: {},
              send_type: {},
              start_hour: {},
              time_zone: {} }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'PATCH',
              url: 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D',
              qs: { alert_id: 'SOME_STRING_VALUE' },
              body: 
               { days_of_week: {},
                 end_hour: {},
                 expires_after: {},
                 list_order: {},
                 list_type: {},
                 minute_frequency: {},
                 send_type: {},
                 start_hour: {},
                 time_zone: {} },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("PATCH", "https://www.directfreight.com/api/alerts/%7Bboard_type%7D");

            req.query({
              "alert_id": "SOME_STRING_VALUE"
            });

            req.type("json");
            req.send({
              "days_of_week": {},
              "end_hour": {},
              "expires_after": {},
              "list_order": {},
              "list_type": {},
              "minute_frequency": {},
              "send_type": {},
              "start_hour": {},
              "time_zone": {}
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"days_of_week": @{  },
                                          @"end_hour": @{  },
                                          @"expires_after": @{  },
                                          @"list_order": @{  },
                                          @"list_type": @{  },
                                          @"minute_frequency": @{  },
                                          @"send_type": @{  },
                                          @"start_hour": @{  },
                                          @"time_zone": @{  } };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"PATCH"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE" in
            let body = Cohttp_lwt_body.of_string "{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}" in

            Client.call ~body `PATCH uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("PATCH",
            "'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE'");
            $request->content('{"days_of_week":{},"end_hour":{},"expires_after":{},"list_order":{},"list_type":{},"minute_frequency":{},"send_type":{},"start_hour":{},"time_zone":{}}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS => "{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('PATCH');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');
            $request->setMethod(HttpRequest::HTTP_METH_PATCH);

            $request->setQueryData(array(
              'alert_id' => 'SOME_STRING_VALUE'
            ));

            $request->setBody('{"days_of_week":{},"end_hour":{},"expires_after":{},"list_order":{},"list_type":{},"minute_frequency":{},"send_type":{},"start_hour":{},"time_zone":{}}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"days_of_week":{},"end_hour":{},"expires_after":{},"list_order":{},"list_type":{},"minute_frequency":{},"send_type":{},"start_hour":{},"time_zone":{}}');

            $request->setRequestUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');
            $request->setRequestMethod('PATCH');
            $request->setBody($body);

            $request->setQuery(new http\QueryString(array(
              'alert_id' => 'SOME_STRING_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}"

            conn.request("PATCH", "/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/alerts/%7Bboard_type%7D"

            querystring = {"alert_id":"SOME_STRING_VALUE"}

            payload = "{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}"
            response = requests.request("PATCH", url, data=payload, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Patch.new(url)
            request.body = "{\"days_of_week\":{},\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{}}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"days_of_week":{},"end_hour":{},"expires_after":{},"list_order":{},"list_type":{},"minute_frequency":{},"send_type":{},"start_hour":{},"time_zone":{}}' |  \
              http PATCH 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "days_of_week": [],
              "end_hour": [],
              "expires_after": [],
              "list_order": [],
              "list_type": [],
              "minute_frequency": [],
              "send_type": [],
              "start_hour": [],
              "time_zone": []
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "PATCH"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method PATCH \
              --body-data '{"days_of_week":{},"end_hour":{},"expires_after":{},"list_order":{},"list_type":{},"minute_frequency":{},"send_type":{},"start_hour":{},"time_zone":{}}' \
              --output-document \
              - 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D?alert_id=SOME_STRING_VALUE'
    post:
      consumes: []
      description: 'Any parameter that is defined here and is also defined on the boards GET, follows the same rules.'
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/alert'
      responses:
        '201':
          $ref: '#/responses/object_created'
      summary: STAGE=UNK Create an alert.
      tags:
        - alerts
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/alerts/%7Bboard_type%7D");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/alerts/%7Bboard_type%7D");
            var request = new RestRequest(Method.POST);
            request.AddParameter("undefined", "{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request POST \
              --url https://www.directfreight.com/api/alerts/%7Bboard_type%7D \
              --data '{"days_of_week":{},"email_address":"<ADD STRING VALUE>","end_hour":{},"expires_after":{},"list_order":{},"list_type":{},"minute_frequency":{},"send_type":{},"start_hour":{},"time_zone":{},"search":{"search_id":0,"search_type":"<ADD STRING VALUE>","date_received":"<ADD STRING VALUE>","trailers":"<ADD STRING VALUE>","date_available":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","origin_city":"<ADD STRING VALUE>","origin_radius":0,"destination_state":"<ADD STRING VALUE>","destination_city":"<ADD STRING VALUE>","destination_radius":0,"load_size":"<ADD STRING VALUE>"}}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"days_of_week\\\":{},\\\"email_address\\\":\\\"<ADD STRING VALUE>\\\",\\\"end_hour\\\":{},\\\"expires_after\\\":{},\\\"list_order\\\":{},\\\"list_type\\\":{},\\\"minute_frequency\\\":{},\\\"send_type\\\":{},\\\"start_hour\\\":{},\\\"time_zone\\\":{},\\\"search\\\":{\\\"search_id\\\":0,\\\"search_type\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_received\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailers\\\":\\\"<ADD STRING VALUE>\\\",\\\"date_available\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":0,\\\"destination_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":0,\\\"load_size\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/alerts/%7Bboard_type%7D")
              .post(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://www.directfreight.com/api/alerts/%7Bboard_type%7D")
              .body("{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/alerts/%7Bboard_type%7D",
              "method": "POST",
              "headers": {},
              "processData": false,
              "data": "{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "days_of_week": {},
              "email_address": "<ADD STRING VALUE>",
              "end_hour": {},
              "expires_after": {},
              "list_order": {},
              "list_type": {},
              "minute_frequency": {},
              "send_type": {},
              "start_hour": {},
              "time_zone": {},
              "search": {
                "search_id": 0,
                "search_type": "<ADD STRING VALUE>",
                "date_received": "<ADD STRING VALUE>",
                "trailers": "<ADD STRING VALUE>",
                "date_available": "<ADD STRING VALUE>",
                "origin_state": "<ADD STRING VALUE>",
                "origin_city": "<ADD STRING VALUE>",
                "origin_radius": 0,
                "destination_state": "<ADD STRING VALUE>",
                "destination_city": "<ADD STRING VALUE>",
                "destination_radius": 0,
                "load_size": "<ADD STRING VALUE>"
              }
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://www.directfreight.com/api/alerts/%7Bboard_type%7D");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/alerts/%7Bboard_type%7D",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ days_of_week: {},
              email_address: '<ADD STRING VALUE>',
              end_hour: {},
              expires_after: {},
              list_order: {},
              list_type: {},
              minute_frequency: {},
              send_type: {},
              start_hour: {},
              time_zone: {},
              search: 
               { search_id: 0,
                 search_type: '<ADD STRING VALUE>',
                 date_received: '<ADD STRING VALUE>',
                 trailers: '<ADD STRING VALUE>',
                 date_available: '<ADD STRING VALUE>',
                 origin_state: '<ADD STRING VALUE>',
                 origin_city: '<ADD STRING VALUE>',
                 origin_radius: 0,
                 destination_state: '<ADD STRING VALUE>',
                 destination_city: '<ADD STRING VALUE>',
                 destination_radius: 0,
                 load_size: '<ADD STRING VALUE>' } }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D',
              body: 
               { days_of_week: {},
                 email_address: '<ADD STRING VALUE>',
                 end_hour: {},
                 expires_after: {},
                 list_order: {},
                 list_type: {},
                 minute_frequency: {},
                 send_type: {},
                 start_hour: {},
                 time_zone: {},
                 search: 
                  { search_id: 0,
                    search_type: '<ADD STRING VALUE>',
                    date_received: '<ADD STRING VALUE>',
                    trailers: '<ADD STRING VALUE>',
                    date_available: '<ADD STRING VALUE>',
                    origin_state: '<ADD STRING VALUE>',
                    origin_city: '<ADD STRING VALUE>',
                    origin_radius: 0,
                    destination_state: '<ADD STRING VALUE>',
                    destination_city: '<ADD STRING VALUE>',
                    destination_radius: 0,
                    load_size: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("POST", "https://www.directfreight.com/api/alerts/%7Bboard_type%7D");

            req.type("json");
            req.send({
              "days_of_week": {},
              "email_address": "<ADD STRING VALUE>",
              "end_hour": {},
              "expires_after": {},
              "list_order": {},
              "list_type": {},
              "minute_frequency": {},
              "send_type": {},
              "start_hour": {},
              "time_zone": {},
              "search": {
                "search_id": 0,
                "search_type": "<ADD STRING VALUE>",
                "date_received": "<ADD STRING VALUE>",
                "trailers": "<ADD STRING VALUE>",
                "date_available": "<ADD STRING VALUE>",
                "origin_state": "<ADD STRING VALUE>",
                "origin_city": "<ADD STRING VALUE>",
                "origin_radius": 0,
                "destination_state": "<ADD STRING VALUE>",
                "destination_city": "<ADD STRING VALUE>",
                "destination_radius": 0,
                "load_size": "<ADD STRING VALUE>"
              }
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"days_of_week": @{  },
                                          @"email_address": @"<ADD STRING VALUE>",
                                          @"end_hour": @{  },
                                          @"expires_after": @{  },
                                          @"list_order": @{  },
                                          @"list_type": @{  },
                                          @"minute_frequency": @{  },
                                          @"send_type": @{  },
                                          @"start_hour": @{  },
                                          @"time_zone": @{  },
                                          @"search": @{ @"search_id": @0, @"search_type": @"<ADD STRING VALUE>", @"date_received": @"<ADD STRING VALUE>", @"trailers": @"<ADD STRING VALUE>", @"date_available": @"<ADD STRING VALUE>", @"origin_state": @"<ADD STRING VALUE>", @"origin_city": @"<ADD STRING VALUE>", @"origin_radius": @0, @"destination_state": @"<ADD STRING VALUE>", @"destination_city": @"<ADD STRING VALUE>", @"destination_radius": @0, @"load_size": @"<ADD STRING VALUE>" } };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/alerts/%7Bboard_type%7D"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"POST"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/alerts/%7Bboard_type%7D" in
            let body = Cohttp_lwt_body.of_string "{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}" in

            Client.call ~body `POST uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("POST",
            "https://www.directfreight.com/api/alerts/%7Bboard_type%7D");
            $request->content('{"days_of_week":{},"email_address":"<ADD STRING VALUE>","end_hour":{},"expires_after":{},"list_order":{},"list_type":{},"minute_frequency":{},"send_type":{},"start_hour":{},"time_zone":{},"search":{"search_id":0,"search_type":"<ADD STRING VALUE>","date_received":"<ADD STRING VALUE>","trailers":"<ADD STRING VALUE>","date_available":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","origin_city":"<ADD STRING VALUE>","origin_radius":0,"destination_state":"<ADD STRING VALUE>","destination_city":"<ADD STRING VALUE>","destination_radius":0,"load_size":"<ADD STRING VALUE>"}}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/alerts/%7Bboard_type%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');
            $request->setMethod(HTTP_METH_POST);

            $request->setBody('{"days_of_week":{},"email_address":"<ADD STRING VALUE>","end_hour":{},"expires_after":{},"list_order":{},"list_type":{},"minute_frequency":{},"send_type":{},"start_hour":{},"time_zone":{},"search":{"search_id":0,"search_type":"<ADD STRING VALUE>","date_received":"<ADD STRING VALUE>","trailers":"<ADD STRING VALUE>","date_available":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","origin_city":"<ADD STRING VALUE>","origin_radius":0,"destination_state":"<ADD STRING VALUE>","destination_city":"<ADD STRING VALUE>","destination_radius":0,"load_size":"<ADD STRING VALUE>"}}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"days_of_week":{},"email_address":"<ADD STRING VALUE>","end_hour":{},"expires_after":{},"list_order":{},"list_type":{},"minute_frequency":{},"send_type":{},"start_hour":{},"time_zone":{},"search":{"search_id":0,"search_type":"<ADD STRING VALUE>","date_received":"<ADD STRING VALUE>","trailers":"<ADD STRING VALUE>","date_available":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","origin_city":"<ADD STRING VALUE>","origin_radius":0,"destination_state":"<ADD STRING VALUE>","destination_city":"<ADD STRING VALUE>","destination_radius":0,"load_size":"<ADD STRING VALUE>"}}');

            $request->setRequestUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}"

            conn.request("POST", "/api/alerts/%7Bboard_type%7D", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/alerts/%7Bboard_type%7D"

            payload = "{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}"
            response = requests.request("POST", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/alerts/%7Bboard_type%7D")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)
            request.body = "{\"days_of_week\":{},\"email_address\":\"<ADD STRING VALUE>\",\"end_hour\":{},\"expires_after\":{},\"list_order\":{},\"list_type\":{},\"minute_frequency\":{},\"send_type\":{},\"start_hour\":{},\"time_zone\":{},\"search\":{\"search_id\":0,\"search_type\":\"<ADD STRING VALUE>\",\"date_received\":\"<ADD STRING VALUE>\",\"trailers\":\"<ADD STRING VALUE>\",\"date_available\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":0,\"destination_state\":\"<ADD STRING VALUE>\",\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":0,\"load_size\":\"<ADD STRING VALUE>\"}}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"days_of_week":{},"email_address":"<ADD STRING VALUE>","end_hour":{},"expires_after":{},"list_order":{},"list_type":{},"minute_frequency":{},"send_type":{},"start_hour":{},"time_zone":{},"search":{"search_id":0,"search_type":"<ADD STRING VALUE>","date_received":"<ADD STRING VALUE>","trailers":"<ADD STRING VALUE>","date_available":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","origin_city":"<ADD STRING VALUE>","origin_radius":0,"destination_state":"<ADD STRING VALUE>","destination_city":"<ADD STRING VALUE>","destination_radius":0,"load_size":"<ADD STRING VALUE>"}}' |  \
              http POST https://www.directfreight.com/api/alerts/%7Bboard_type%7D
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "days_of_week": [],
              "email_address": "<ADD STRING VALUE>",
              "end_hour": [],
              "expires_after": [],
              "list_order": [],
              "list_type": [],
              "minute_frequency": [],
              "send_type": [],
              "start_hour": [],
              "time_zone": [],
              "search": [
                "search_id": 0,
                "search_type": "<ADD STRING VALUE>",
                "date_received": "<ADD STRING VALUE>",
                "trailers": "<ADD STRING VALUE>",
                "date_available": "<ADD STRING VALUE>",
                "origin_state": "<ADD STRING VALUE>",
                "origin_city": "<ADD STRING VALUE>",
                "origin_radius": 0,
                "destination_state": "<ADD STRING VALUE>",
                "destination_city": "<ADD STRING VALUE>",
                "destination_radius": 0,
                "load_size": "<ADD STRING VALUE>"
              ]
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/alerts/%7Bboard_type%7D")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "POST"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method POST \
              --body-data '{"days_of_week":{},"email_address":"<ADD STRING VALUE>","end_hour":{},"expires_after":{},"list_order":{},"list_type":{},"minute_frequency":{},"send_type":{},"start_hour":{},"time_zone":{},"search":{"search_id":0,"search_type":"<ADD STRING VALUE>","date_received":"<ADD STRING VALUE>","trailers":"<ADD STRING VALUE>","date_available":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","origin_city":"<ADD STRING VALUE>","origin_radius":0,"destination_state":"<ADD STRING VALUE>","destination_city":"<ADD STRING VALUE>","destination_radius":0,"load_size":"<ADD STRING VALUE>"}}' \
              --output-document \
              - https://www.directfreight.com/api/alerts/%7Bboard_type%7D
    x-restlet:
      section: ALERTS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/alerts/%7Bboard_type%7D");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/alerts/%7Bboard_type%7D
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/alerts/%7Bboard_type%7D\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/alerts/%7Bboard_type%7D")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/alerts/%7Bboard_type%7D")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/alerts/%7Bboard_type%7D",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/alerts/%7Bboard_type%7D");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/alerts/%7Bboard_type%7D",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/alerts/%7Bboard_type%7D' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/alerts/%7Bboard_type%7D");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/alerts/%7Bboard_type%7D"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/alerts/%7Bboard_type%7D" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/alerts/%7Bboard_type%7D");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/alerts/%7Bboard_type%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/alerts/%7Bboard_type%7D');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/alerts/%7Bboard_type%7D")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/alerts/%7Bboard_type%7D"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/alerts/%7Bboard_type%7D")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/alerts/%7Bboard_type%7D'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/alerts/%7Bboard_type%7D")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/alerts/%7Bboard_type%7D
  /billings:
    get:
      description: 'Will return how much the end user will be charged to upgrade. It will not charge the user, or consume the promo code.'
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: 'The promo code. '
          in: query
          name: promo_code
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/get_billing_response'
      summary: STAGE=UNK Returns the amount the end user will be charged. If a promo code is present return adjusted amount. If there are special conditions a string with the promo code benefits will also be returned.
      tags:
        - billings
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url 'https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/billings?promo_code=SOME_STRING_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/billings',
              qs: { promo_code: 'SOME_STRING_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/billings");

            req.query({
              "promo_code": "SOME_STRING_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "'https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/billings');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData(array(
              'promo_code' => 'SOME_STRING_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/billings');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString(array(
              'promo_code' => 'SOME_STRING_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/billings?promo_code=SOME_STRING_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/billings"

            querystring = {"promo_code":"SOME_STRING_VALUE"}

            response = requests.request("GET", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET ''https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - 'https://www.directfreight.com/api/billings?promo_code=SOME_STRING_VALUE'
    post:
      consumes: []
      description: 'This function will attempt to process a payment, and upgrade a non subscibed user. '
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/bill_user'
      responses:
        '201':
          $ref: '#/responses/object_created'
      summary: 'STAGE=UNK This function will attempt to process a payment, and upgrade a non subscibed user. '
      tags:
        - billings
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/billings");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/billings");
            var request = new RestRequest(Method.POST);
            request.AddParameter("undefined", "{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request POST \
              --url https://www.directfreight.com/api/billings \
              --data '{"billing_address":{},"cc_data":{},"check_data":{},"promo_code":"<ADD STRING VALUE>"}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/billings\"\n\n\tpayload := strings.NewReader(\"{\\\"billing_address\\\":{},\\\"cc_data\\\":{},\\\"check_data\\\":{},\\\"promo_code\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/billings")
              .post(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://www.directfreight.com/api/billings")
              .body("{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/billings",
              "method": "POST",
              "headers": {},
              "processData": false,
              "data": "{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "billing_address": {},
              "cc_data": {},
              "check_data": {},
              "promo_code": "<ADD STRING VALUE>"
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://www.directfreight.com/api/billings");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/billings",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ billing_address: {},
              cc_data: {},
              check_data: {},
              promo_code: '<ADD STRING VALUE>' }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://www.directfreight.com/api/billings',
              body: 
               { billing_address: {},
                 cc_data: {},
                 check_data: {},
                 promo_code: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("POST", "https://www.directfreight.com/api/billings");

            req.type("json");
            req.send({
              "billing_address": {},
              "cc_data": {},
              "check_data": {},
              "promo_code": "<ADD STRING VALUE>"
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"billing_address": @{  },
                                          @"cc_data": @{  },
                                          @"check_data": @{  },
                                          @"promo_code": @"<ADD STRING VALUE>" };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/billings"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"POST"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/billings" in
            let body = Cohttp_lwt_body.of_string "{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}" in

            Client.call ~body `POST uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("POST",
            "https://www.directfreight.com/api/billings");
            $request->content('{"billing_address":{},"cc_data":{},"check_data":{},"promo_code":"<ADD STRING VALUE>"}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/billings",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/billings');
            $request->setMethod(HTTP_METH_POST);

            $request->setBody('{"billing_address":{},"cc_data":{},"check_data":{},"promo_code":"<ADD STRING VALUE>"}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"billing_address":{},"cc_data":{},"check_data":{},"promo_code":"<ADD STRING VALUE>"}');

            $request->setRequestUrl('https://www.directfreight.com/api/billings');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}"

            conn.request("POST", "/api/billings", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/billings"

            payload = "{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}"
            response = requests.request("POST", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/billings")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)
            request.body = "{\"billing_address\":{},\"cc_data\":{},\"check_data\":{},\"promo_code\":\"<ADD STRING VALUE>\"}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"billing_address":{},"cc_data":{},"check_data":{},"promo_code":"<ADD STRING VALUE>"}' |  \
              http POST https://www.directfreight.com/api/billings
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "billing_address": [],
              "cc_data": [],
              "check_data": [],
              "promo_code": "<ADD STRING VALUE>"
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/billings")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "POST"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method POST \
              --body-data '{"billing_address":{},"cc_data":{},"check_data":{},"promo_code":"<ADD STRING VALUE>"}' \
              --output-document \
              - https://www.directfreight.com/api/billings
    x-restlet:
      section: BILLINGS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/billings");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/billings
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/billings\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/billings")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/billings")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/billings",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/billings");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/billings",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/billings' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/billings");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/billings"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/billings" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/billings");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/billings",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/billings');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/billings');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/billings")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/billings"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/billings")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/billings'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/billings")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/billings
  '/boards/{board_type}':
    parameters:
      - $ref: '#/parameters/board_type'
    post:
      consumes: []
      description: This is the primary search method. Please specifify at least a partial origin or destination.
      parameters:
        - $ref: '#/parameters/end-user-token-optional'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/board_request'
      responses:
        '200':
          description: Returns a list matching your search.
          schema:
            $ref: '#/definitions/board_response'
        '422':
          $ref: '#/responses/error_422'
      summary: Get a board
      tags:
        - boards
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/%7Bboard_type%7D");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/boards/%7Bboard_type%7D");
            var request = new RestRequest(Method.POST);
            request.AddParameter("undefined", "{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request POST \
              --url https://www.directfreight.com/api/boards/%7Bboard_type%7D \
              --data '{"alert_id":0,"destination_city":"<ADD STRING VALUE>","destination_radius":30,"destination_state":["<ADD STRING VALUE>"],"full_load":false,"item_count":50,"origin_city":"<ADD STRING VALUE>","origin_radius":30,"origin_state":["<ADD STRING VALUE>"],"page_number":0,"return_count":false,"return_only_new":false,"ship_date":["<ADD STRING VALUE>"],"sort_parameter":"age","trailer_type":["V"]}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"alert_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_radius\\\":30,\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"item_count\\\":50,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_radius\\\":30,\\\"origin_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"page_number\\\":0,\\\"return_count\\\":false,\\\"return_only_new\\\":false,\\\"ship_date\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"sort_parameter\\\":\\\"age\\\",\\\"trailer_type\\\":[\\\"V\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/%7Bboard_type%7D")
              .post(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://www.directfreight.com/api/boards/%7Bboard_type%7D")
              .body("{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/%7Bboard_type%7D",
              "method": "POST",
              "headers": {},
              "processData": false,
              "data": "{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "alert_id": 0,
              "destination_city": "<ADD STRING VALUE>",
              "destination_radius": 30,
              "destination_state": [
                "<ADD STRING VALUE>"
              ],
              "full_load": false,
              "item_count": 50,
              "origin_city": "<ADD STRING VALUE>",
              "origin_radius": 30,
              "origin_state": [
                "<ADD STRING VALUE>"
              ],
              "page_number": 0,
              "return_count": false,
              "return_only_new": false,
              "ship_date": [
                "<ADD STRING VALUE>"
              ],
              "sort_parameter": "age",
              "trailer_type": [
                "V"
              ]
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://www.directfreight.com/api/boards/%7Bboard_type%7D");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/%7Bboard_type%7D",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ alert_id: 0,
              destination_city: '<ADD STRING VALUE>',
              destination_radius: 30,
              destination_state: [ '<ADD STRING VALUE>' ],
              full_load: false,
              item_count: 50,
              origin_city: '<ADD STRING VALUE>',
              origin_radius: 30,
              origin_state: [ '<ADD STRING VALUE>' ],
              page_number: 0,
              return_count: false,
              return_only_new: false,
              ship_date: [ '<ADD STRING VALUE>' ],
              sort_parameter: 'age',
              trailer_type: [ 'V' ] }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://www.directfreight.com/api/boards/%7Bboard_type%7D',
              body: 
               { alert_id: 0,
                 destination_city: '<ADD STRING VALUE>',
                 destination_radius: 30,
                 destination_state: [ '<ADD STRING VALUE>' ],
                 full_load: false,
                 item_count: 50,
                 origin_city: '<ADD STRING VALUE>',
                 origin_radius: 30,
                 origin_state: [ '<ADD STRING VALUE>' ],
                 page_number: 0,
                 return_count: false,
                 return_only_new: false,
                 ship_date: [ '<ADD STRING VALUE>' ],
                 sort_parameter: 'age',
                 trailer_type: [ 'V' ] },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("POST", "https://www.directfreight.com/api/boards/%7Bboard_type%7D");

            req.type("json");
            req.send({
              "alert_id": 0,
              "destination_city": "<ADD STRING VALUE>",
              "destination_radius": 30,
              "destination_state": [
                "<ADD STRING VALUE>"
              ],
              "full_load": false,
              "item_count": 50,
              "origin_city": "<ADD STRING VALUE>",
              "origin_radius": 30,
              "origin_state": [
                "<ADD STRING VALUE>"
              ],
              "page_number": 0,
              "return_count": false,
              "return_only_new": false,
              "ship_date": [
                "<ADD STRING VALUE>"
              ],
              "sort_parameter": "age",
              "trailer_type": [
                "V"
              ]
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"alert_id": @0,
                                          @"destination_city": @"<ADD STRING VALUE>",
                                          @"destination_radius": @30,
                                          @"destination_state": @[ @"<ADD STRING VALUE>" ],
                                          @"full_load": @NO,
                                          @"item_count": @50,
                                          @"origin_city": @"<ADD STRING VALUE>",
                                          @"origin_radius": @30,
                                          @"origin_state": @[ @"<ADD STRING VALUE>" ],
                                          @"page_number": @0,
                                          @"return_count": @NO,
                                          @"return_only_new": @NO,
                                          @"ship_date": @[ @"<ADD STRING VALUE>" ],
                                          @"sort_parameter": @"age",
                                          @"trailer_type": @[ @"V" ] };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/%7Bboard_type%7D"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"POST"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/%7Bboard_type%7D" in
            let body = Cohttp_lwt_body.of_string "{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}" in

            Client.call ~body `POST uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("POST",
            "https://www.directfreight.com/api/boards/%7Bboard_type%7D");
            $request->content('{"alert_id":0,"destination_city":"<ADD STRING VALUE>","destination_radius":30,"destination_state":["<ADD STRING VALUE>"],"full_load":false,"item_count":50,"origin_city":"<ADD STRING VALUE>","origin_radius":30,"origin_state":["<ADD STRING VALUE>"],"page_number":0,"return_count":false,"return_only_new":false,"ship_date":["<ADD STRING VALUE>"],"sort_parameter":"age","trailer_type":["V"]}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/%7Bboard_type%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D');
            $request->setMethod(HTTP_METH_POST);

            $request->setBody('{"alert_id":0,"destination_city":"<ADD STRING VALUE>","destination_radius":30,"destination_state":["<ADD STRING VALUE>"],"full_load":false,"item_count":50,"origin_city":"<ADD STRING VALUE>","origin_radius":30,"origin_state":["<ADD STRING VALUE>"],"page_number":0,"return_count":false,"return_only_new":false,"ship_date":["<ADD STRING VALUE>"],"sort_parameter":"age","trailer_type":["V"]}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"alert_id":0,"destination_city":"<ADD STRING VALUE>","destination_radius":30,"destination_state":["<ADD STRING VALUE>"],"full_load":false,"item_count":50,"origin_city":"<ADD STRING VALUE>","origin_radius":30,"origin_state":["<ADD STRING VALUE>"],"page_number":0,"return_count":false,"return_only_new":false,"ship_date":["<ADD STRING VALUE>"],"sort_parameter":"age","trailer_type":["V"]}');

            $request->setRequestUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}"

            conn.request("POST", "/api/boards/%7Bboard_type%7D", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/%7Bboard_type%7D"

            payload = "{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}"
            response = requests.request("POST", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/boards/%7Bboard_type%7D")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)
            request.body = "{\"alert_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_radius\":30,\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"item_count\":50,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_radius\":30,\"origin_state\":[\"<ADD STRING VALUE>\"],\"page_number\":0,\"return_count\":false,\"return_only_new\":false,\"ship_date\":[\"<ADD STRING VALUE>\"],\"sort_parameter\":\"age\",\"trailer_type\":[\"V\"]}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"alert_id":0,"destination_city":"<ADD STRING VALUE>","destination_radius":30,"destination_state":["<ADD STRING VALUE>"],"full_load":false,"item_count":50,"origin_city":"<ADD STRING VALUE>","origin_radius":30,"origin_state":["<ADD STRING VALUE>"],"page_number":0,"return_count":false,"return_only_new":false,"ship_date":["<ADD STRING VALUE>"],"sort_parameter":"age","trailer_type":["V"]}' |  \
              http POST https://www.directfreight.com/api/boards/%7Bboard_type%7D
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "alert_id": 0,
              "destination_city": "<ADD STRING VALUE>",
              "destination_radius": 30,
              "destination_state": ["<ADD STRING VALUE>"],
              "full_load": false,
              "item_count": 50,
              "origin_city": "<ADD STRING VALUE>",
              "origin_radius": 30,
              "origin_state": ["<ADD STRING VALUE>"],
              "page_number": 0,
              "return_count": false,
              "return_only_new": false,
              "ship_date": ["<ADD STRING VALUE>"],
              "sort_parameter": "age",
              "trailer_type": ["V"]
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/%7Bboard_type%7D")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "POST"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method POST \
              --body-data '{"alert_id":0,"destination_city":"<ADD STRING VALUE>","destination_radius":30,"destination_state":["<ADD STRING VALUE>"],"full_load":false,"item_count":50,"origin_city":"<ADD STRING VALUE>","origin_radius":30,"origin_state":["<ADD STRING VALUE>"],"page_number":0,"return_count":false,"return_only_new":false,"ship_date":["<ADD STRING VALUE>"],"sort_parameter":"age","trailer_type":["V"]}' \
              --output-document \
              - https://www.directfreight.com/api/boards/%7Bboard_type%7D
    x-restlet:
      section: BOARDS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/%7Bboard_type%7D");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/boards/%7Bboard_type%7D
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/%7Bboard_type%7D\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/%7Bboard_type%7D")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/boards/%7Bboard_type%7D")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/%7Bboard_type%7D",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/boards/%7Bboard_type%7D");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/%7Bboard_type%7D",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/boards/%7Bboard_type%7D' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/boards/%7Bboard_type%7D");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/%7Bboard_type%7D"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/%7Bboard_type%7D" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/boards/%7Bboard_type%7D");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/%7Bboard_type%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/boards/%7Bboard_type%7D")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/%7Bboard_type%7D"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/boards/%7Bboard_type%7D")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/boards/%7Bboard_type%7D'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/%7Bboard_type%7D")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/boards/%7Bboard_type%7D
  '/boards/{board_type}/state_list':
    get:
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/get_state_list_response'
      summary: A convenience method to get totals by state.
      tags:
        - boards
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/%7Bboard_type%7D/state_list",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list');
            $request->setMethod(HTTP_METH_GET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list');
            $request->setRequestMethod('GET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/boards/%7Bboard_type%7D/state_list")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list"

            response = requests.request("GET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list
    parameters:
      - $ref: '#/parameters/board_type'
    x-restlet:
      section: BOARDS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/%7Bboard_type%7D/state_list",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/boards/%7Bboard_type%7D/state_list")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/boards/%7Bboard_type%7D/state_list
  /boards/hidden_companies:
    delete:
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: The company that need to be marked as not hidden.
          in: query
          name: company_id
          required: true
          type: string
      responses:
        '204':
          description: successful operation
      summary: STAGE=UNK Mark a company as not hidden.
      tags:
        - boards
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE");
            var request = new RestRequest(Method.DELETE);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request DELETE \
              --url 'https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE")
              .delete(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.delete("https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE",
              "method": "DELETE",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("DELETE", "https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "DELETE",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/hidden_companies?company_id=SOME_STRING_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'DELETE',
              url: 'https://www.directfreight.com/api/boards/hidden_companies',
              qs: { company_id: 'SOME_STRING_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("DELETE", "https://www.directfreight.com/api/boards/hidden_companies");

            req.query({
              "company_id": "SOME_STRING_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"DELETE"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE" in

            Client.call `DELETE uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("DELETE",
            "'https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/hidden_companies');
            $request->setMethod(HTTP_METH_DELETE);

            $request->setQueryData(array(
              'company_id' => 'SOME_STRING_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_companies');
            $request->setRequestMethod('DELETE');
            $request->setQuery(new http\QueryString(array(
              'company_id' => 'SOME_STRING_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("DELETE", "/api/boards/hidden_companies?company_id=SOME_STRING_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/hidden_companies"

            querystring = {"company_id":"SOME_STRING_VALUE"}

            response = requests.request("DELETE", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Delete.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http DELETE ''https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "DELETE"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method DELETE \
              --output-document \
              - 'https://www.directfreight.com/api/boards/hidden_companies?company_id=SOME_STRING_VALUE'
    get:
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: A list of id's to check if any should be visually hidden.
          in: query
          items:
            type: string
          name: company_name
          required: true
          type: array
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/get_hidden_companies_response'
      summary: STAGE=UNK Get a list of companies that should be hidden.
      tags:
        - boards
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url 'https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/boards/hidden_companies',
              qs: { company_name: 'SOME_ARRAY_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/boards/hidden_companies");

            req.query({
              "company_name": "SOME_ARRAY_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "'https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/hidden_companies');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData(array(
              'company_name' => 'SOME_ARRAY_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_companies');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString(array(
              'company_name' => 'SOME_ARRAY_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/hidden_companies"

            querystring = {"company_name":"SOME_ARRAY_VALUE"}

            response = requests.request("GET", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET ''https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - 'https://www.directfreight.com/api/boards/hidden_companies?company_name=SOME_ARRAY_VALUE'
    patch:
      consumes: []
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/toggle_hidden_companies'
      responses:
        '204':
          description: successful operation
      summary: STAGE=UNK Toggle one or more company between hidden and unhidden.
      tags:
        - boards
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/hidden_companies");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"company_id\":\"<ADD STRING VALUE>\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/boards/hidden_companies");
            var request = new RestRequest(Method.PATCH);
            request.AddParameter("undefined", "{\"company_id\":\"<ADD STRING VALUE>\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request PATCH \
              --url https://www.directfreight.com/api/boards/hidden_companies \
              --data '{"company_id":"<ADD STRING VALUE>"}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_companies\"\n\n\tpayload := strings.NewReader(\"{\\\"company_id\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"company_id\":\"<ADD STRING VALUE>\"}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/hidden_companies")
              .patch(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.patch("https://www.directfreight.com/api/boards/hidden_companies")
              .body("{\"company_id\":\"<ADD STRING VALUE>\"}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/hidden_companies",
              "method": "PATCH",
              "headers": {},
              "processData": false,
              "data": "{\"company_id\":\"<ADD STRING VALUE>\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "company_id": "<ADD STRING VALUE>"
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("PATCH", "https://www.directfreight.com/api/boards/hidden_companies");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "PATCH",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/hidden_companies",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ company_id: '<ADD STRING VALUE>' }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'PATCH',
              url: 'https://www.directfreight.com/api/boards/hidden_companies',
              body: { company_id: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("PATCH", "https://www.directfreight.com/api/boards/hidden_companies");

            req.type("json");
            req.send({
              "company_id": "<ADD STRING VALUE>"
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"company_id": @"<ADD STRING VALUE>" };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/hidden_companies"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"PATCH"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/hidden_companies" in
            let body = Cohttp_lwt_body.of_string "{\"company_id\":\"<ADD STRING VALUE>\"}" in

            Client.call ~body `PATCH uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("PATCH",
            "https://www.directfreight.com/api/boards/hidden_companies");
            $request->content('{"company_id":"<ADD STRING VALUE>"}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/hidden_companies",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS => "{\"company_id\":\"<ADD STRING VALUE>\"}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('PATCH');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/hidden_companies');
            $request->setMethod(HttpRequest::HTTP_METH_PATCH);

            $request->setBody('{"company_id":"<ADD STRING VALUE>"}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"company_id":"<ADD STRING VALUE>"}');

            $request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_companies');
            $request->setRequestMethod('PATCH');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"company_id\":\"<ADD STRING VALUE>\"}"

            conn.request("PATCH", "/api/boards/hidden_companies", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/hidden_companies"

            payload = "{\"company_id\":\"<ADD STRING VALUE>\"}"
            response = requests.request("PATCH", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/boards/hidden_companies")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Patch.new(url)
            request.body = "{\"company_id\":\"<ADD STRING VALUE>\"}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"company_id":"<ADD STRING VALUE>"}' |  \
              http PATCH https://www.directfreight.com/api/boards/hidden_companies
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = ["company_id": "<ADD STRING VALUE>"]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/hidden_companies")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "PATCH"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method PATCH \
              --body-data '{"company_id":"<ADD STRING VALUE>"}' \
              --output-document \
              - https://www.directfreight.com/api/boards/hidden_companies
    post:
      consumes: []
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/mark_hidden_companies'
      responses:
        '201':
          $ref: '#/responses/object_created'
      summary: STAGE=UNK Mark a set of companies as hidden.
      tags:
        - boards
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/hidden_companies");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"company_name\":\"<ADD STRING VALUE>\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/boards/hidden_companies");
            var request = new RestRequest(Method.POST);
            request.AddParameter("undefined", "{\"company_name\":\"<ADD STRING VALUE>\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request POST \
              --url https://www.directfreight.com/api/boards/hidden_companies \
              --data '{"company_name":"<ADD STRING VALUE>"}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_companies\"\n\n\tpayload := strings.NewReader(\"{\\\"company_name\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"company_name\":\"<ADD STRING VALUE>\"}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/hidden_companies")
              .post(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://www.directfreight.com/api/boards/hidden_companies")
              .body("{\"company_name\":\"<ADD STRING VALUE>\"}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/hidden_companies",
              "method": "POST",
              "headers": {},
              "processData": false,
              "data": "{\"company_name\":\"<ADD STRING VALUE>\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "company_name": "<ADD STRING VALUE>"
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://www.directfreight.com/api/boards/hidden_companies");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/hidden_companies",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ company_name: '<ADD STRING VALUE>' }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://www.directfreight.com/api/boards/hidden_companies',
              body: { company_name: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("POST", "https://www.directfreight.com/api/boards/hidden_companies");

            req.type("json");
            req.send({
              "company_name": "<ADD STRING VALUE>"
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"company_name": @"<ADD STRING VALUE>" };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/hidden_companies"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"POST"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/hidden_companies" in
            let body = Cohttp_lwt_body.of_string "{\"company_name\":\"<ADD STRING VALUE>\"}" in

            Client.call ~body `POST uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("POST",
            "https://www.directfreight.com/api/boards/hidden_companies");
            $request->content('{"company_name":"<ADD STRING VALUE>"}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/hidden_companies",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"company_name\":\"<ADD STRING VALUE>\"}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/hidden_companies');
            $request->setMethod(HTTP_METH_POST);

            $request->setBody('{"company_name":"<ADD STRING VALUE>"}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"company_name":"<ADD STRING VALUE>"}');

            $request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_companies');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"company_name\":\"<ADD STRING VALUE>\"}"

            conn.request("POST", "/api/boards/hidden_companies", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/hidden_companies"

            payload = "{\"company_name\":\"<ADD STRING VALUE>\"}"
            response = requests.request("POST", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/boards/hidden_companies")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)
            request.body = "{\"company_name\":\"<ADD STRING VALUE>\"}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"company_name":"<ADD STRING VALUE>"}' |  \
              http POST https://www.directfreight.com/api/boards/hidden_companies
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = ["company_name": "<ADD STRING VALUE>"]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/hidden_companies")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "POST"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method POST \
              --body-data '{"company_name":"<ADD STRING VALUE>"}' \
              --output-document \
              - https://www.directfreight.com/api/boards/hidden_companies
    x-restlet:
      section: BOARDS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/hidden_companies");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/boards/hidden_companies
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_companies\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/hidden_companies")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/boards/hidden_companies")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/hidden_companies",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/boards/hidden_companies");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/hidden_companies",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/boards/hidden_companies' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/boards/hidden_companies");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/hidden_companies"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/hidden_companies" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/boards/hidden_companies");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/hidden_companies",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/hidden_companies');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_companies');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/boards/hidden_companies")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/hidden_companies"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/boards/hidden_companies")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/boards/hidden_companies'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/hidden_companies")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/boards/hidden_companies
  /boards/hidden_entries:
    delete:
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: 'The entry that need to be marked as not hidden. '
          in: query
          name: entry_id
          required: true
          type: string
      responses:
        '204':
          description: successful operation
      summary: STAGE=UNK Mark a set of entries as not hidden.
      tags:
        - boards
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE");
            var request = new RestRequest(Method.DELETE);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request DELETE \
              --url 'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE")
              .delete(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.delete("https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE",
              "method": "DELETE",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("DELETE", "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "DELETE",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'DELETE',
              url: 'https://www.directfreight.com/api/boards/hidden_entries',
              qs: { entry_id: 'SOME_STRING_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("DELETE", "https://www.directfreight.com/api/boards/hidden_entries");

            req.query({
              "entry_id": "SOME_STRING_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"DELETE"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE" in

            Client.call `DELETE uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("DELETE",
            "'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/hidden_entries');
            $request->setMethod(HTTP_METH_DELETE);

            $request->setQueryData(array(
              'entry_id' => 'SOME_STRING_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_entries');
            $request->setRequestMethod('DELETE');
            $request->setQuery(new http\QueryString(array(
              'entry_id' => 'SOME_STRING_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("DELETE", "/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/hidden_entries"

            querystring = {"entry_id":"SOME_STRING_VALUE"}

            response = requests.request("DELETE", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Delete.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http DELETE ''https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "DELETE"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method DELETE \
              --output-document \
              - 'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_STRING_VALUE'
    get:
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: A list of id's to check if any should be visually hidden.
          in: query
          items:
            type: string
          name: entry_id
          required: true
          type: array
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/get_hidden_entries'
      summary: STAGE=UNK Get a list of entries that should be hidden.
      tags:
        - boards
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url 'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/boards/hidden_entries',
              qs: { entry_id: 'SOME_ARRAY_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/boards/hidden_entries");

            req.query({
              "entry_id": "SOME_ARRAY_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/hidden_entries');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData(array(
              'entry_id' => 'SOME_ARRAY_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_entries');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString(array(
              'entry_id' => 'SOME_ARRAY_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/hidden_entries"

            querystring = {"entry_id":"SOME_ARRAY_VALUE"}

            response = requests.request("GET", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET ''https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - 'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'
    patch:
      consumes: []
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/toggle_hidden_entries'
      responses:
        '204':
          description: successful operation
      summary: STAGE=UNK Toggle one or more entry between hidden and unhidden.
      tags:
        - boards
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/hidden_entries");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"entry_id\":[\"<ADD STRING VALUE>\"]}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/boards/hidden_entries");
            var request = new RestRequest(Method.PATCH);
            request.AddParameter("undefined", "{\"entry_id\":[\"<ADD STRING VALUE>\"]}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request PATCH \
              --url https://www.directfreight.com/api/boards/hidden_entries \
              --data '{"entry_id":["<ADD STRING VALUE>"]}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_entries\"\n\n\tpayload := strings.NewReader(\"{\\\"entry_id\\\":[\\\"<ADD STRING VALUE>\\\"]}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"entry_id\":[\"<ADD STRING VALUE>\"]}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/hidden_entries")
              .patch(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.patch("https://www.directfreight.com/api/boards/hidden_entries")
              .body("{\"entry_id\":[\"<ADD STRING VALUE>\"]}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/hidden_entries",
              "method": "PATCH",
              "headers": {},
              "processData": false,
              "data": "{\"entry_id\":[\"<ADD STRING VALUE>\"]}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "entry_id": [
                "<ADD STRING VALUE>"
              ]
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("PATCH", "https://www.directfreight.com/api/boards/hidden_entries");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "PATCH",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/hidden_entries",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ entry_id: [ '<ADD STRING VALUE>' ] }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'PATCH',
              url: 'https://www.directfreight.com/api/boards/hidden_entries',
              body: { entry_id: [ '<ADD STRING VALUE>' ] },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("PATCH", "https://www.directfreight.com/api/boards/hidden_entries");

            req.type("json");
            req.send({
              "entry_id": [
                "<ADD STRING VALUE>"
              ]
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"entry_id": @[ @"<ADD STRING VALUE>" ] };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/hidden_entries"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"PATCH"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/hidden_entries" in
            let body = Cohttp_lwt_body.of_string "{\"entry_id\":[\"<ADD STRING VALUE>\"]}" in

            Client.call ~body `PATCH uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("PATCH",
            "https://www.directfreight.com/api/boards/hidden_entries");
            $request->content('{"entry_id":["<ADD STRING VALUE>"]}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/hidden_entries",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS => "{\"entry_id\":[\"<ADD STRING VALUE>\"]}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('PATCH');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/hidden_entries');
            $request->setMethod(HttpRequest::HTTP_METH_PATCH);

            $request->setBody('{"entry_id":["<ADD STRING VALUE>"]}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"entry_id":["<ADD STRING VALUE>"]}');

            $request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_entries');
            $request->setRequestMethod('PATCH');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"entry_id\":[\"<ADD STRING VALUE>\"]}"

            conn.request("PATCH", "/api/boards/hidden_entries", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/hidden_entries"

            payload = "{\"entry_id\":[\"<ADD STRING VALUE>\"]}"
            response = requests.request("PATCH", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/boards/hidden_entries")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Patch.new(url)
            request.body = "{\"entry_id\":[\"<ADD STRING VALUE>\"]}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"entry_id":["<ADD STRING VALUE>"]}' |  \
              http PATCH https://www.directfreight.com/api/boards/hidden_entries
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = ["entry_id": ["<ADD STRING VALUE>"]]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/hidden_entries")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "PATCH"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method PATCH \
              --body-data '{"entry_id":["<ADD STRING VALUE>"]}' \
              --output-document \
              - https://www.directfreight.com/api/boards/hidden_entries
    post:
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: 'The entry that need to be marked as hidden. '
          in: query
          items:
            type: string
          name: entry_id
          required: true
          type: array
      responses:
        '201':
          $ref: '#/responses/object_created'
      summary: STAGE=UNK Mark a set of entries as hidden.
      tags:
        - boards
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE");
            var request = new RestRequest(Method.POST);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request POST \
              --url 'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE")
              .post(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE",
              "method": "POST",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://www.directfreight.com/api/boards/hidden_entries',
              qs: { entry_id: 'SOME_ARRAY_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("POST", "https://www.directfreight.com/api/boards/hidden_entries");

            req.query({
              "entry_id": "SOME_ARRAY_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"POST"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE" in

            Client.call `POST uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("POST",
            "'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/hidden_entries');
            $request->setMethod(HTTP_METH_POST);

            $request->setQueryData(array(
              'entry_id' => 'SOME_ARRAY_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_entries');
            $request->setRequestMethod('POST');
            $request->setQuery(new http\QueryString(array(
              'entry_id' => 'SOME_ARRAY_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("POST", "/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/hidden_entries"

            querystring = {"entry_id":"SOME_ARRAY_VALUE"}

            response = requests.request("POST", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http POST ''https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "POST"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method POST \
              --output-document \
              - 'https://www.directfreight.com/api/boards/hidden_entries?entry_id=SOME_ARRAY_VALUE'
    x-restlet:
      section: BOARDS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/hidden_entries");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/boards/hidden_entries
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/hidden_entries\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/hidden_entries")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/boards/hidden_entries")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/hidden_entries",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/boards/hidden_entries");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/hidden_entries",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/boards/hidden_entries' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/boards/hidden_entries");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/hidden_entries"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/hidden_entries" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/boards/hidden_entries");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/hidden_entries",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/hidden_entries');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/boards/hidden_entries');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/boards/hidden_entries")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/hidden_entries"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/boards/hidden_entries")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/boards/hidden_entries'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/hidden_entries")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/boards/hidden_entries
  /boards/notes:
    delete:
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: 'The entry to associate the note with. '
          in: query
          name: note_id
          required: true
          type: string
      responses:
        '204':
          description: successful operation
      summary: STAGE=UNK Delete a note.
      tags:
        - boards
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE");
            var request = new RestRequest(Method.DELETE);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request DELETE \
              --url 'https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE")
              .delete(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.delete("https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE",
              "method": "DELETE",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("DELETE", "https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "DELETE",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/notes?note_id=SOME_STRING_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'DELETE',
              url: 'https://www.directfreight.com/api/boards/notes',
              qs: { note_id: 'SOME_STRING_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("DELETE", "https://www.directfreight.com/api/boards/notes");

            req.query({
              "note_id": "SOME_STRING_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"DELETE"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE" in

            Client.call `DELETE uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("DELETE",
            "'https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/notes');
            $request->setMethod(HTTP_METH_DELETE);

            $request->setQueryData(array(
              'note_id' => 'SOME_STRING_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/boards/notes');
            $request->setRequestMethod('DELETE');
            $request->setQuery(new http\QueryString(array(
              'note_id' => 'SOME_STRING_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("DELETE", "/api/boards/notes?note_id=SOME_STRING_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/notes"

            querystring = {"note_id":"SOME_STRING_VALUE"}

            response = requests.request("DELETE", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Delete.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http DELETE ''https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "DELETE"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method DELETE \
              --output-document \
              - 'https://www.directfreight.com/api/boards/notes?note_id=SOME_STRING_VALUE'
    get:
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: 'Optionally just check if certain loads have notes associated with them. '
          in: query
          items:
            type: string
          name: entry_id
          required: false
          type: array
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/get_boards_notes_response'
      summary: STAGE=UNK Get notes that this user has written.
      tags:
        - boards
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url 'https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/notes?entry_id=SOME_ARRAY_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/boards/notes',
              qs: { entry_id: 'SOME_ARRAY_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/boards/notes");

            req.query({
              "entry_id": "SOME_ARRAY_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "'https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/notes');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData(array(
              'entry_id' => 'SOME_ARRAY_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/boards/notes');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString(array(
              'entry_id' => 'SOME_ARRAY_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/boards/notes?entry_id=SOME_ARRAY_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/notes"

            querystring = {"entry_id":"SOME_ARRAY_VALUE"}

            response = requests.request("GET", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET ''https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - 'https://www.directfreight.com/api/boards/notes?entry_id=SOME_ARRAY_VALUE'
    patch:
      consumes: []
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/update_notes'
      responses:
        '204':
          description: successful operation
      summary: STAGE=UNK Update a note.
      tags:
        - boards
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/notes");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/boards/notes");
            var request = new RestRequest(Method.PATCH);
            request.AddParameter("undefined", "{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request PATCH \
              --url https://www.directfreight.com/api/boards/notes \
              --data '{"body":"<ADD STRING VALUE>","title":"<ADD STRING VALUE>"}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/notes\"\n\n\tpayload := strings.NewReader(\"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/notes")
              .patch(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.patch("https://www.directfreight.com/api/boards/notes")
              .body("{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/notes",
              "method": "PATCH",
              "headers": {},
              "processData": false,
              "data": "{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "body": "<ADD STRING VALUE>",
              "title": "<ADD STRING VALUE>"
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("PATCH", "https://www.directfreight.com/api/boards/notes");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "PATCH",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/notes",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ body: '<ADD STRING VALUE>', title: '<ADD STRING VALUE>' }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'PATCH',
              url: 'https://www.directfreight.com/api/boards/notes',
              body: { body: '<ADD STRING VALUE>', title: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("PATCH", "https://www.directfreight.com/api/boards/notes");

            req.type("json");
            req.send({
              "body": "<ADD STRING VALUE>",
              "title": "<ADD STRING VALUE>"
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"body": @"<ADD STRING VALUE>",
                                          @"title": @"<ADD STRING VALUE>" };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/notes"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"PATCH"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/notes" in
            let body = Cohttp_lwt_body.of_string "{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}" in

            Client.call ~body `PATCH uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("PATCH",
            "https://www.directfreight.com/api/boards/notes");
            $request->content('{"body":"<ADD STRING VALUE>","title":"<ADD STRING VALUE>"}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/notes",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS => "{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('PATCH');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/notes');
            $request->setMethod(HttpRequest::HTTP_METH_PATCH);

            $request->setBody('{"body":"<ADD STRING VALUE>","title":"<ADD STRING VALUE>"}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"body":"<ADD STRING VALUE>","title":"<ADD STRING VALUE>"}');

            $request->setRequestUrl('https://www.directfreight.com/api/boards/notes');
            $request->setRequestMethod('PATCH');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}"

            conn.request("PATCH", "/api/boards/notes", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/notes"

            payload = "{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}"
            response = requests.request("PATCH", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/boards/notes")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Patch.new(url)
            request.body = "{\"body\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"body":"<ADD STRING VALUE>","title":"<ADD STRING VALUE>"}' |  \
              http PATCH https://www.directfreight.com/api/boards/notes
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "body": "<ADD STRING VALUE>",
              "title": "<ADD STRING VALUE>"
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/notes")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "PATCH"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method PATCH \
              --body-data '{"body":"<ADD STRING VALUE>","title":"<ADD STRING VALUE>"}' \
              --output-document \
              - https://www.directfreight.com/api/boards/notes
    post:
      consumes: []
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/create_notes'
      responses:
        '201':
          $ref: '#/responses/object_created'
      summary: STAGE=UNK Create a new note.
      tags:
        - boards
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/notes");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/boards/notes");
            var request = new RestRequest(Method.POST);
            request.AddParameter("undefined", "{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request POST \
              --url https://www.directfreight.com/api/boards/notes \
              --data '{"body":"<ADD STRING VALUE>","entry_id":0,"title":"<ADD STRING VALUE>"}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/notes\"\n\n\tpayload := strings.NewReader(\"{\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"entry_id\\\":0,\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/notes")
              .post(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://www.directfreight.com/api/boards/notes")
              .body("{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/notes",
              "method": "POST",
              "headers": {},
              "processData": false,
              "data": "{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "body": "<ADD STRING VALUE>",
              "entry_id": 0,
              "title": "<ADD STRING VALUE>"
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://www.directfreight.com/api/boards/notes");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/notes",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ body: '<ADD STRING VALUE>',
              entry_id: 0,
              title: '<ADD STRING VALUE>' }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://www.directfreight.com/api/boards/notes',
              body: 
               { body: '<ADD STRING VALUE>',
                 entry_id: 0,
                 title: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("POST", "https://www.directfreight.com/api/boards/notes");

            req.type("json");
            req.send({
              "body": "<ADD STRING VALUE>",
              "entry_id": 0,
              "title": "<ADD STRING VALUE>"
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"body": @"<ADD STRING VALUE>",
                                          @"entry_id": @0,
                                          @"title": @"<ADD STRING VALUE>" };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/notes"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"POST"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/notes" in
            let body = Cohttp_lwt_body.of_string "{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}" in

            Client.call ~body `POST uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("POST",
            "https://www.directfreight.com/api/boards/notes");
            $request->content('{"body":"<ADD STRING VALUE>","entry_id":0,"title":"<ADD STRING VALUE>"}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/notes",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/notes');
            $request->setMethod(HTTP_METH_POST);

            $request->setBody('{"body":"<ADD STRING VALUE>","entry_id":0,"title":"<ADD STRING VALUE>"}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"body":"<ADD STRING VALUE>","entry_id":0,"title":"<ADD STRING VALUE>"}');

            $request->setRequestUrl('https://www.directfreight.com/api/boards/notes');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}"

            conn.request("POST", "/api/boards/notes", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/notes"

            payload = "{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}"
            response = requests.request("POST", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/boards/notes")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)
            request.body = "{\"body\":\"<ADD STRING VALUE>\",\"entry_id\":0,\"title\":\"<ADD STRING VALUE>\"}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"body":"<ADD STRING VALUE>","entry_id":0,"title":"<ADD STRING VALUE>"}' |  \
              http POST https://www.directfreight.com/api/boards/notes
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "body": "<ADD STRING VALUE>",
              "entry_id": 0,
              "title": "<ADD STRING VALUE>"
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/notes")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "POST"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method POST \
              --body-data '{"body":"<ADD STRING VALUE>","entry_id":0,"title":"<ADD STRING VALUE>"}' \
              --output-document \
              - https://www.directfreight.com/api/boards/notes
    x-restlet:
      section: BOARDS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/boards/notes");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/boards/notes
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/boards/notes\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/boards/notes")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/boards/notes")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/boards/notes",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/boards/notes");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/boards/notes",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/boards/notes' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/boards/notes");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/boards/notes"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/boards/notes" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/boards/notes");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/boards/notes",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/boards/notes');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/boards/notes');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/boards/notes")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/boards/notes"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/boards/notes")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/boards/notes'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/boards/notes")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/boards/notes
  /credit_reports:
    get:
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: A special id returned with the board entries.
          in: query
          name: credit_report_id
          required: true
          type: string
        - description: Return format. Currently only supports html and json.
          in: query
          name: format
          required: true
          type: string
      responses:
        '200':
          description: successful operation
      summary: STAGE=UNK Request access to a credit report.
      tags:
        - credit_reports
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url 'https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/credit_reports',
              qs: 
               { credit_report_id: 'SOME_STRING_VALUE',
                 format: 'SOME_STRING_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/credit_reports");

            req.query({
              "credit_report_id": "SOME_STRING_VALUE",
              "format": "SOME_STRING_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "'https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/credit_reports');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData(array(
              'credit_report_id' => 'SOME_STRING_VALUE',
              'format' => 'SOME_STRING_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/credit_reports');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString(array(
              'credit_report_id' => 'SOME_STRING_VALUE',
              'format' => 'SOME_STRING_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/credit_reports"

            querystring = {"credit_report_id":"SOME_STRING_VALUE","format":"SOME_STRING_VALUE"}

            response = requests.request("GET", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET ''https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - 'https://www.directfreight.com/api/credit_reports?credit_report_id=SOME_STRING_VALUE&format=SOME_STRING_VALUE'
    x-restlet:
      section: CREDIT_REPORTS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/credit_reports");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/credit_reports
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/credit_reports\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/credit_reports")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/credit_reports")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/credit_reports",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/credit_reports");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/credit_reports",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/credit_reports' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/credit_reports");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/credit_reports"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/credit_reports" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/credit_reports");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/credit_reports",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/credit_reports');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/credit_reports');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/credit_reports")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/credit_reports"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/credit_reports")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/credit_reports'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/credit_reports")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/credit_reports
  /end_user_authentication/users:
    post:
      consumes: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/user'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/end-user-token'
        '422':
          $ref: '#/responses/error_422'
      summary: STAGE=UNK Create a new user.
      tags:
        - end_user_authentications
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/end_user_authentication/users");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/end_user_authentication/users");
            var request = new RestRequest(Method.POST);
            request.AddParameter("undefined", "{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request POST \
              --url https://www.directfreight.com/api/end_user_authentication/users \
              --data '{"email":"<ADD STRING VALUE>","password":"<ADD STRING VALUE>"}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentication/users\"\n\n\tpayload := strings.NewReader(\"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/end_user_authentication/users")
              .post(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://www.directfreight.com/api/end_user_authentication/users")
              .body("{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/end_user_authentication/users",
              "method": "POST",
              "headers": {},
              "processData": false,
              "data": "{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "email": "<ADD STRING VALUE>",
              "password": "<ADD STRING VALUE>"
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://www.directfreight.com/api/end_user_authentication/users");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/end_user_authentication/users",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ email: '<ADD STRING VALUE>', password: '<ADD STRING VALUE>' }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://www.directfreight.com/api/end_user_authentication/users',
              body: { email: '<ADD STRING VALUE>', password: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("POST", "https://www.directfreight.com/api/end_user_authentication/users");

            req.type("json");
            req.send({
              "email": "<ADD STRING VALUE>",
              "password": "<ADD STRING VALUE>"
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"email": @"<ADD STRING VALUE>",
                                          @"password": @"<ADD STRING VALUE>" };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/end_user_authentication/users"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"POST"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/end_user_authentication/users" in
            let body = Cohttp_lwt_body.of_string "{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}" in

            Client.call ~body `POST uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("POST",
            "https://www.directfreight.com/api/end_user_authentication/users");
            $request->content('{"email":"<ADD STRING VALUE>","password":"<ADD STRING VALUE>"}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/end_user_authentication/users",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/end_user_authentication/users');
            $request->setMethod(HTTP_METH_POST);

            $request->setBody('{"email":"<ADD STRING VALUE>","password":"<ADD STRING VALUE>"}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"email":"<ADD STRING VALUE>","password":"<ADD STRING VALUE>"}');

            $request->setRequestUrl('https://www.directfreight.com/api/end_user_authentication/users');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}"

            conn.request("POST", "/api/end_user_authentication/users", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/end_user_authentication/users"

            payload = "{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}"
            response = requests.request("POST", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/end_user_authentication/users")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)
            request.body = "{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"email":"<ADD STRING VALUE>","password":"<ADD STRING VALUE>"}' |  \
              http POST https://www.directfreight.com/api/end_user_authentication/users
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "email": "<ADD STRING VALUE>",
              "password": "<ADD STRING VALUE>"
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/end_user_authentication/users")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "POST"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method POST \
              --body-data '{"email":"<ADD STRING VALUE>","password":"<ADD STRING VALUE>"}' \
              --output-document \
              - https://www.directfreight.com/api/end_user_authentication/users
    x-restlet:
      section: END_USER_AUTHENTICATIONS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/end_user_authentication/users");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/end_user_authentication/users
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentication/users\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/end_user_authentication/users")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/end_user_authentication/users")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/end_user_authentication/users",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/end_user_authentication/users");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/end_user_authentication/users",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/end_user_authentication/users' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/end_user_authentication/users");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/end_user_authentication/users"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/end_user_authentication/users" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/end_user_authentication/users");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/end_user_authentication/users",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/end_user_authentication/users');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/end_user_authentication/users');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/end_user_authentication/users")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/end_user_authentication/users"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/end_user_authentication/users")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/end_user_authentication/users'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/end_user_authentication/users")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/end_user_authentication/users
  /end_user_authentications:
    delete:
      description: This logs a user out. the end-user-token will no longer be valid.
      parameters:
        - $ref: '#/parameters/end-user-token'
      responses:
        '204':
          description: Will not return content on a successful logout.
      summary: Logs a user out.
      tags:
        - end_user_authentications
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/end_user_authentications");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/end_user_authentications");
            var request = new RestRequest(Method.DELETE);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request DELETE \
              --url https://www.directfreight.com/api/end_user_authentications
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/end_user_authentications")
              .delete(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.delete("https://www.directfreight.com/api/end_user_authentications")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/end_user_authentications",
              "method": "DELETE",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("DELETE", "https://www.directfreight.com/api/end_user_authentications");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "DELETE",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/end_user_authentications",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'DELETE',
              url: 'https://www.directfreight.com/api/end_user_authentications' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("DELETE", "https://www.directfreight.com/api/end_user_authentications");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/end_user_authentications"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"DELETE"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/end_user_authentications" in

            Client.call `DELETE uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("DELETE",
            "https://www.directfreight.com/api/end_user_authentications");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/end_user_authentications",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/end_user_authentications');
            $request->setMethod(HTTP_METH_DELETE);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications');
            $request->setRequestMethod('DELETE');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("DELETE", "/api/end_user_authentications")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/end_user_authentications"

            response = requests.request("DELETE", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/end_user_authentications")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Delete.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http DELETE https://www.directfreight.com/api/end_user_authentications'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/end_user_authentications")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "DELETE"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method DELETE \
              --output-document \
              - https://www.directfreight.com/api/end_user_authentications
    get:
      parameters:
        - $ref: '#/parameters/end-user-token-optional'
      responses:
        '200':
          description: successful operation
          examples:
            application/json: '{status: "Subscribed"}'
          schema:
            properties:
              status:
                description: 'Will return the logged in user''s status. Valid status''s are "Subscribed", "Posting", "Overdue", or "Not Logged In".'
                type: string
            type: object
      summary: Get current authentication level for the user.
      tags:
        - end_user_authentications
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/end_user_authentications");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/end_user_authentications");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url https://www.directfreight.com/api/end_user_authentications
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/end_user_authentications")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/end_user_authentications")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/end_user_authentications",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/end_user_authentications");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/end_user_authentications",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/end_user_authentications' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/end_user_authentications");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/end_user_authentications"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/end_user_authentications" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "https://www.directfreight.com/api/end_user_authentications");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/end_user_authentications",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/end_user_authentications');
            $request->setMethod(HTTP_METH_GET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications');
            $request->setRequestMethod('GET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/end_user_authentications")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/end_user_authentications"

            response = requests.request("GET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/end_user_authentications")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET https://www.directfreight.com/api/end_user_authentications'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/end_user_authentications")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - https://www.directfreight.com/api/end_user_authentications
    post:
      consumes: []
      description: 'This function sends login credentials, and retrieves a stateless token.'
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/login_credentials'
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/end-user-token'
        '422':
          $ref: '#/responses/error_422'
      summary: Logs a user in.
      tags:
        - end_user_authentications
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/end_user_authentications");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/end_user_authentications");
            var request = new RestRequest(Method.POST);
            request.AddParameter("undefined", "{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request POST \
              --url https://www.directfreight.com/api/end_user_authentications \
              --data '{"login":"<ADD STRING VALUE>","realm":"username","secret":"<ADD STRING VALUE>"}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications\"\n\n\tpayload := strings.NewReader(\"{\\\"login\\\":\\\"<ADD STRING VALUE>\\\",\\\"realm\\\":\\\"username\\\",\\\"secret\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/end_user_authentications")
              .post(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://www.directfreight.com/api/end_user_authentications")
              .body("{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/end_user_authentications",
              "method": "POST",
              "headers": {},
              "processData": false,
              "data": "{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "login": "<ADD STRING VALUE>",
              "realm": "username",
              "secret": "<ADD STRING VALUE>"
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://www.directfreight.com/api/end_user_authentications");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/end_user_authentications",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ login: '<ADD STRING VALUE>',
              realm: 'username',
              secret: '<ADD STRING VALUE>' }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://www.directfreight.com/api/end_user_authentications',
              body: 
               { login: '<ADD STRING VALUE>',
                 realm: 'username',
                 secret: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("POST", "https://www.directfreight.com/api/end_user_authentications");

            req.type("json");
            req.send({
              "login": "<ADD STRING VALUE>",
              "realm": "username",
              "secret": "<ADD STRING VALUE>"
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"login": @"<ADD STRING VALUE>",
                                          @"realm": @"username",
                                          @"secret": @"<ADD STRING VALUE>" };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/end_user_authentications"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"POST"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/end_user_authentications" in
            let body = Cohttp_lwt_body.of_string "{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}" in

            Client.call ~body `POST uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("POST",
            "https://www.directfreight.com/api/end_user_authentications");
            $request->content('{"login":"<ADD STRING VALUE>","realm":"username","secret":"<ADD STRING VALUE>"}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/end_user_authentications",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/end_user_authentications');
            $request->setMethod(HTTP_METH_POST);

            $request->setBody('{"login":"<ADD STRING VALUE>","realm":"username","secret":"<ADD STRING VALUE>"}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"login":"<ADD STRING VALUE>","realm":"username","secret":"<ADD STRING VALUE>"}');

            $request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}"

            conn.request("POST", "/api/end_user_authentications", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/end_user_authentications"

            payload = "{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}"
            response = requests.request("POST", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/end_user_authentications")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)
            request.body = "{\"login\":\"<ADD STRING VALUE>\",\"realm\":\"username\",\"secret\":\"<ADD STRING VALUE>\"}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"login":"<ADD STRING VALUE>","realm":"username","secret":"<ADD STRING VALUE>"}' |  \
              http POST https://www.directfreight.com/api/end_user_authentications
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "login": "<ADD STRING VALUE>",
              "realm": "username",
              "secret": "<ADD STRING VALUE>"
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/end_user_authentications")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "POST"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method POST \
              --body-data '{"login":"<ADD STRING VALUE>","realm":"username","secret":"<ADD STRING VALUE>"}' \
              --output-document \
              - https://www.directfreight.com/api/end_user_authentications
    x-restlet:
      section: END_USER_AUTHENTICATIONS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/end_user_authentications");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/end_user_authentications
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/end_user_authentications")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/end_user_authentications")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/end_user_authentications",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/end_user_authentications");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/end_user_authentications",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/end_user_authentications' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/end_user_authentications");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/end_user_authentications"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/end_user_authentications" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/end_user_authentications");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/end_user_authentications",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/end_user_authentications');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/end_user_authentications")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/end_user_authentications"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/end_user_authentications")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/end_user_authentications'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/end_user_authentications")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/end_user_authentications
  /end_user_authentications/dates:
    get:
      parameters: []
      responses:
        '200':
          description: successful operation
          examples:
            application/json: |-
              {
                "now": "now"
              }
          schema:
            properties:
              now:
                description: The current date and time based on our server.
                type: string
            type: object
      summary: Gets an authoritative date_time string.
      tags:
        - end_user_authentications
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/end_user_authentications/dates");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/end_user_authentications/dates");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url https://www.directfreight.com/api/end_user_authentications/dates
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications/dates\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/end_user_authentications/dates")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/end_user_authentications/dates")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/end_user_authentications/dates",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/end_user_authentications/dates");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/end_user_authentications/dates",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/end_user_authentications/dates' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/end_user_authentications/dates");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/end_user_authentications/dates"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/end_user_authentications/dates" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "https://www.directfreight.com/api/end_user_authentications/dates");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/end_user_authentications/dates",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/end_user_authentications/dates');
            $request->setMethod(HTTP_METH_GET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications/dates');
            $request->setRequestMethod('GET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/end_user_authentications/dates")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/end_user_authentications/dates"

            response = requests.request("GET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/end_user_authentications/dates")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET https://www.directfreight.com/api/end_user_authentications/dates'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/end_user_authentications/dates")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - https://www.directfreight.com/api/end_user_authentications/dates
    x-restlet:
      section: END_USER_AUTHENTICATIONS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/end_user_authentications/dates");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/end_user_authentications/dates
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications/dates\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/end_user_authentications/dates")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/end_user_authentications/dates")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/end_user_authentications/dates",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/end_user_authentications/dates");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/end_user_authentications/dates",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/end_user_authentications/dates' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/end_user_authentications/dates");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/end_user_authentications/dates"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/end_user_authentications/dates" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/end_user_authentications/dates");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/end_user_authentications/dates",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/end_user_authentications/dates');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications/dates');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/end_user_authentications/dates")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/end_user_authentications/dates"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/end_user_authentications/dates")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/end_user_authentications/dates'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/end_user_authentications/dates")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/end_user_authentications/dates
  /end_user_authentications/passwords:
    get:
      parameters:
        - description: The user e-mail to send a password to if valid.
          in: query
          name: email
          required: true
          type: string
      responses:
        '200':
          description: This will return a success even if the e-mail is not in our records.
        '422':
          $ref: '#/responses/error_422'
      summary: STAGE=UNK Request a forgotten password.
      tags:
        - end_user_authentications
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url 'https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/end_user_authentications/passwords?email=SOME_STRING_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/end_user_authentications/passwords',
              qs: { email: 'SOME_STRING_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/end_user_authentications/passwords");

            req.query({
              "email": "SOME_STRING_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "'https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/end_user_authentications/passwords');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData(array(
              'email' => 'SOME_STRING_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications/passwords');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString(array(
              'email' => 'SOME_STRING_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/end_user_authentications/passwords?email=SOME_STRING_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/end_user_authentications/passwords"

            querystring = {"email":"SOME_STRING_VALUE"}

            response = requests.request("GET", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET ''https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - 'https://www.directfreight.com/api/end_user_authentications/passwords?email=SOME_STRING_VALUE'
    patch:
      consumes: []
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            properties:
              new_password:
                description: The user's new password.
                type: string
              old_password:
                description: Thee user's old password.
                type: string
            required:
              - new_password
              - old_password
            type: object
      responses:
        '204':
          description: A successful operation.
        '422':
          $ref: '#/responses/error_422'
      summary: STAGE=UNK Update a users password.
      tags:
        - end_user_authentications
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/end_user_authentications/passwords");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/end_user_authentications/passwords");
            var request = new RestRequest(Method.PATCH);
            request.AddParameter("undefined", "{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request PATCH \
              --url https://www.directfreight.com/api/end_user_authentications/passwords \
              --data '{"new_password":"<ADD STRING VALUE>","old_password":"<ADD STRING VALUE>"}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications/passwords\"\n\n\tpayload := strings.NewReader(\"{\\\"new_password\\\":\\\"<ADD STRING VALUE>\\\",\\\"old_password\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/end_user_authentications/passwords")
              .patch(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.patch("https://www.directfreight.com/api/end_user_authentications/passwords")
              .body("{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/end_user_authentications/passwords",
              "method": "PATCH",
              "headers": {},
              "processData": false,
              "data": "{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "new_password": "<ADD STRING VALUE>",
              "old_password": "<ADD STRING VALUE>"
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("PATCH", "https://www.directfreight.com/api/end_user_authentications/passwords");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "PATCH",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/end_user_authentications/passwords",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ new_password: '<ADD STRING VALUE>',
              old_password: '<ADD STRING VALUE>' }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'PATCH',
              url: 'https://www.directfreight.com/api/end_user_authentications/passwords',
              body: 
               { new_password: '<ADD STRING VALUE>',
                 old_password: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("PATCH", "https://www.directfreight.com/api/end_user_authentications/passwords");

            req.type("json");
            req.send({
              "new_password": "<ADD STRING VALUE>",
              "old_password": "<ADD STRING VALUE>"
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"new_password": @"<ADD STRING VALUE>",
                                          @"old_password": @"<ADD STRING VALUE>" };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/end_user_authentications/passwords"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"PATCH"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/end_user_authentications/passwords" in
            let body = Cohttp_lwt_body.of_string "{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}" in

            Client.call ~body `PATCH uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("PATCH",
            "https://www.directfreight.com/api/end_user_authentications/passwords");
            $request->content('{"new_password":"<ADD STRING VALUE>","old_password":"<ADD STRING VALUE>"}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/end_user_authentications/passwords",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS => "{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('PATCH');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/end_user_authentications/passwords');
            $request->setMethod(HttpRequest::HTTP_METH_PATCH);

            $request->setBody('{"new_password":"<ADD STRING VALUE>","old_password":"<ADD STRING VALUE>"}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"new_password":"<ADD STRING VALUE>","old_password":"<ADD STRING VALUE>"}');

            $request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications/passwords');
            $request->setRequestMethod('PATCH');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}"

            conn.request("PATCH", "/api/end_user_authentications/passwords", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/end_user_authentications/passwords"

            payload = "{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}"
            response = requests.request("PATCH", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/end_user_authentications/passwords")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Patch.new(url)
            request.body = "{\"new_password\":\"<ADD STRING VALUE>\",\"old_password\":\"<ADD STRING VALUE>\"}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"new_password":"<ADD STRING VALUE>","old_password":"<ADD STRING VALUE>"}' |  \
              http PATCH https://www.directfreight.com/api/end_user_authentications/passwords
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "new_password": "<ADD STRING VALUE>",
              "old_password": "<ADD STRING VALUE>"
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/end_user_authentications/passwords")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "PATCH"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method PATCH \
              --body-data '{"new_password":"<ADD STRING VALUE>","old_password":"<ADD STRING VALUE>"}' \
              --output-document \
              - https://www.directfreight.com/api/end_user_authentications/passwords
    x-restlet:
      section: END_USER_AUTHENTICATIONS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/end_user_authentications/passwords");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/end_user_authentications/passwords
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/end_user_authentications/passwords\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/end_user_authentications/passwords")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/end_user_authentications/passwords")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/end_user_authentications/passwords",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/end_user_authentications/passwords");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/end_user_authentications/passwords",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/end_user_authentications/passwords' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/end_user_authentications/passwords");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/end_user_authentications/passwords"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/end_user_authentications/passwords" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/end_user_authentications/passwords");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/end_user_authentications/passwords",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/end_user_authentications/passwords');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/end_user_authentications/passwords');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/end_user_authentications/passwords")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/end_user_authentications/passwords"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/end_user_authentications/passwords")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/end_user_authentications/passwords'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/end_user_authentications/passwords")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/end_user_authentications/passwords
  /location/distance:
    get:
      parameters:
        - in: query
          name: origin_city
          required: true
          type: string
        - in: query
          name: origin_state
          required: true
          type: string
        - in: query
          items:
            type: string
          name: destination_city
          required: true
          type: array
        - in: query
          items:
            type: string
          name: destination_state
          required: true
          type: array
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/get_location_distance_response'
      summary: STAGE=UNK Get the distance between 2 locations. This is used to calculate dead head miles.
      tags:
        - locations
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url 'https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/location/distance',
              qs: 
               { origin_city: 'SOME_STRING_VALUE',
                 origin_state: 'SOME_STRING_VALUE',
                 destination_city: 'SOME_ARRAY_VALUE',
                 destination_state: 'SOME_ARRAY_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/location/distance");

            req.query({
              "origin_city": "SOME_STRING_VALUE",
              "origin_state": "SOME_STRING_VALUE",
              "destination_city": "SOME_ARRAY_VALUE",
              "destination_state": "SOME_ARRAY_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "'https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/location/distance');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData(array(
              'origin_city' => 'SOME_STRING_VALUE',
              'origin_state' => 'SOME_STRING_VALUE',
              'destination_city' => 'SOME_ARRAY_VALUE',
              'destination_state' => 'SOME_ARRAY_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/location/distance');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString(array(
              'origin_city' => 'SOME_STRING_VALUE',
              'origin_state' => 'SOME_STRING_VALUE',
              'destination_city' => 'SOME_ARRAY_VALUE',
              'destination_state' => 'SOME_ARRAY_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/location/distance"

            querystring = {"origin_city":"SOME_STRING_VALUE","origin_state":"SOME_STRING_VALUE","destination_city":"SOME_ARRAY_VALUE","destination_state":"SOME_ARRAY_VALUE"}

            response = requests.request("GET", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET ''https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - 'https://www.directfreight.com/api/location/distance?origin_city=SOME_STRING_VALUE&origin_state=SOME_STRING_VALUE&destination_city=SOME_ARRAY_VALUE&destination_state=SOME_ARRAY_VALUE'
    x-restlet:
      section: LOCATIONS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/location/distance");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/location/distance
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/location/distance\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/location/distance")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/location/distance")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/location/distance",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/location/distance");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/location/distance",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/location/distance' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/location/distance");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/location/distance"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/location/distance" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/location/distance");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/location/distance",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/location/distance');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/location/distance');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/location/distance")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/location/distance"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/location/distance")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/location/distance'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/location/distance")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/location/distance
  /locations/closest_city:
    get:
      parameters:
        - format: float
          in: query
          name: latitude
          required: true
          type: number
        - format: float
          in: query
          name: longitude
          required: true
          type: number
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/get_closest_city_response'
      summary: STAGE=UNK Will return the closest city to a lat/lon point.
      tags:
        - locations
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url 'https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/locations/closest_city',
              qs: 
               { latitude: 'SOME_NUMBER_VALUE',
                 longitude: 'SOME_NUMBER_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/locations/closest_city");

            req.query({
              "latitude": "SOME_NUMBER_VALUE",
              "longitude": "SOME_NUMBER_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "'https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/locations/closest_city');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData(array(
              'latitude' => 'SOME_NUMBER_VALUE',
              'longitude' => 'SOME_NUMBER_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/locations/closest_city');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString(array(
              'latitude' => 'SOME_NUMBER_VALUE',
              'longitude' => 'SOME_NUMBER_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/locations/closest_city"

            querystring = {"latitude":"SOME_NUMBER_VALUE","longitude":"SOME_NUMBER_VALUE"}

            response = requests.request("GET", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET ''https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - 'https://www.directfreight.com/api/locations/closest_city?latitude=SOME_NUMBER_VALUE&longitude=SOME_NUMBER_VALUE'
    x-restlet:
      section: LOCATIONS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/locations/closest_city");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/locations/closest_city
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/locations/closest_city\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/locations/closest_city")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/locations/closest_city")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/locations/closest_city",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/locations/closest_city");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/locations/closest_city",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/locations/closest_city' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/locations/closest_city");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/locations/closest_city"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/locations/closest_city" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/locations/closest_city");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/locations/closest_city",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/locations/closest_city');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/locations/closest_city');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/locations/closest_city")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/locations/closest_city"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/locations/closest_city")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/locations/closest_city'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/locations/closest_city")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/locations/closest_city
  /locations/partial_match:
    get:
      parameters:
        - description: 'City/State term to search for.   It matches city name and state name and state abbreviation.  So for instance "MI" would return Michigan, Missouri, and Miami, FL'
          in: query
          name: term
          required: true
          type: string
        - description: '"state", and "city" will return only the respective information for that search type. Misspelling or blank will default to both.'
          enum:
            - city
            - state
            - both
          in: query
          name: search_type
          required: false
          type: string
      responses:
        '200':
          description: successful operation
      summary: 'A string of a partial city or state name, and returns a list of possible matches.'
      tags:
        - locations
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url 'https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/locations/partial_match',
              qs: { term: 'SOME_STRING_VALUE', search_type: 'SOME_STRING_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/locations/partial_match");

            req.query({
              "term": "SOME_STRING_VALUE",
              "search_type": "SOME_STRING_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "'https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/locations/partial_match');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData(array(
              'term' => 'SOME_STRING_VALUE',
              'search_type' => 'SOME_STRING_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/locations/partial_match');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString(array(
              'term' => 'SOME_STRING_VALUE',
              'search_type' => 'SOME_STRING_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/locations/partial_match"

            querystring = {"term":"SOME_STRING_VALUE","search_type":"SOME_STRING_VALUE"}

            response = requests.request("GET", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET ''https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - 'https://www.directfreight.com/api/locations/partial_match?term=SOME_STRING_VALUE&search_type=SOME_STRING_VALUE'
    x-restlet:
      section: LOCATIONS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/locations/partial_match");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/locations/partial_match
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/locations/partial_match\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/locations/partial_match")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/locations/partial_match")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/locations/partial_match",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/locations/partial_match");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/locations/partial_match",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/locations/partial_match' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/locations/partial_match");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/locations/partial_match"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/locations/partial_match" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/locations/partial_match");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/locations/partial_match",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/locations/partial_match');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/locations/partial_match');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/locations/partial_match")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/locations/partial_match"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/locations/partial_match")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/locations/partial_match'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/locations/partial_match")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/locations/partial_match
  '/postings/{posting_type}':
    delete:
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: You must specify which entry to remove.
          in: query
          items:
            type: string
          name: posting_id
          required: true
          type: array
      responses:
        '204':
          description: success operation
      summary: Remove one or more postings.
      tags:
        - postings
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE");
            var request = new RestRequest(Method.DELETE);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request DELETE \
              --url 'https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE")
              .delete(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.delete("https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE",
              "method": "DELETE",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("DELETE", "https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "DELETE",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'DELETE',
              url: 'https://www.directfreight.com/api/postings/%7Bposting_type%7D',
              qs: { posting_id: 'SOME_ARRAY_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("DELETE", "https://www.directfreight.com/api/postings/%7Bposting_type%7D");

            req.query({
              "posting_id": "SOME_ARRAY_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"DELETE"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE" in

            Client.call `DELETE uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("DELETE",
            "'https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');
            $request->setMethod(HTTP_METH_DELETE);

            $request->setQueryData(array(
              'posting_id' => 'SOME_ARRAY_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');
            $request->setRequestMethod('DELETE');
            $request->setQuery(new http\QueryString(array(
              'posting_id' => 'SOME_ARRAY_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("DELETE", "/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/postings/%7Bposting_type%7D"

            querystring = {"posting_id":"SOME_ARRAY_VALUE"}

            response = requests.request("DELETE", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Delete.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http DELETE ''https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "DELETE"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method DELETE \
              --output-document \
              - 'https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'
    get:
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: To just return information about some postings.
          in: query
          items:
            type: string
          name: posting_id
          required: false
          type: array
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/posting_post_response'
      summary: Get posts by this user.
      tags:
        - postings
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url 'https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/postings/%7Bposting_type%7D',
              qs: { posting_id: 'SOME_ARRAY_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/postings/%7Bposting_type%7D");

            req.query({
              "posting_id": "SOME_ARRAY_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "'https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData(array(
              'posting_id' => 'SOME_ARRAY_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString(array(
              'posting_id' => 'SOME_ARRAY_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/postings/%7Bposting_type%7D"

            querystring = {"posting_id":"SOME_ARRAY_VALUE"}

            response = requests.request("GET", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET ''https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - 'https://www.directfreight.com/api/postings/%7Bposting_type%7D?posting_id=SOME_ARRAY_VALUE'
    parameters:
      - $ref: '#/parameters/posting_type'
    patch:
      consumes: []
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/postings_patch_request'
      responses:
        '204':
          description: successful operation
      summary: STAGE=UNK Update an posting.
      tags:
        - postings
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/postings/%7Bposting_type%7D");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/postings/%7Bposting_type%7D");
            var request = new RestRequest(Method.PATCH);
            request.AddParameter("undefined", "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request PATCH \
              --url https://www.directfreight.com/api/postings/%7Bposting_type%7D \
              --data '{"comment":"<ADD STRING VALUE>","custom_id":0,"destination_city":"<ADD STRING VALUE>","destination_state":["<ADD STRING VALUE>"],"full_load":false,"height":0,"length":0,"origin_city":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","other_trailer_types":"<ADD STRING VALUE>","pay_rate":0,"posting_id":0,"receive_date":"<ADD STRING VALUE>","ship_date":"<ADD STRING VALUE>","trailer_type":["V"],"weight":0,"width":0}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"posting_id\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/postings/%7Bposting_type%7D")
              .patch(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.patch("https://www.directfreight.com/api/postings/%7Bposting_type%7D")
              .body("{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/postings/%7Bposting_type%7D",
              "method": "PATCH",
              "headers": {},
              "processData": false,
              "data": "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "comment": "<ADD STRING VALUE>",
              "custom_id": 0,
              "destination_city": "<ADD STRING VALUE>",
              "destination_state": [
                "<ADD STRING VALUE>"
              ],
              "full_load": false,
              "height": 0,
              "length": 0,
              "origin_city": "<ADD STRING VALUE>",
              "origin_state": "<ADD STRING VALUE>",
              "other_trailer_types": "<ADD STRING VALUE>",
              "pay_rate": 0,
              "posting_id": 0,
              "receive_date": "<ADD STRING VALUE>",
              "ship_date": "<ADD STRING VALUE>",
              "trailer_type": [
                "V"
              ],
              "weight": 0,
              "width": 0
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("PATCH", "https://www.directfreight.com/api/postings/%7Bposting_type%7D");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "PATCH",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/postings/%7Bposting_type%7D",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ comment: '<ADD STRING VALUE>',
              custom_id: 0,
              destination_city: '<ADD STRING VALUE>',
              destination_state: [ '<ADD STRING VALUE>' ],
              full_load: false,
              height: 0,
              length: 0,
              origin_city: '<ADD STRING VALUE>',
              origin_state: '<ADD STRING VALUE>',
              other_trailer_types: '<ADD STRING VALUE>',
              pay_rate: 0,
              posting_id: 0,
              receive_date: '<ADD STRING VALUE>',
              ship_date: '<ADD STRING VALUE>',
              trailer_type: [ 'V' ],
              weight: 0,
              width: 0 }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'PATCH',
              url: 'https://www.directfreight.com/api/postings/%7Bposting_type%7D',
              body: 
               { comment: '<ADD STRING VALUE>',
                 custom_id: 0,
                 destination_city: '<ADD STRING VALUE>',
                 destination_state: [ '<ADD STRING VALUE>' ],
                 full_load: false,
                 height: 0,
                 length: 0,
                 origin_city: '<ADD STRING VALUE>',
                 origin_state: '<ADD STRING VALUE>',
                 other_trailer_types: '<ADD STRING VALUE>',
                 pay_rate: 0,
                 posting_id: 0,
                 receive_date: '<ADD STRING VALUE>',
                 ship_date: '<ADD STRING VALUE>',
                 trailer_type: [ 'V' ],
                 weight: 0,
                 width: 0 },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("PATCH", "https://www.directfreight.com/api/postings/%7Bposting_type%7D");

            req.type("json");
            req.send({
              "comment": "<ADD STRING VALUE>",
              "custom_id": 0,
              "destination_city": "<ADD STRING VALUE>",
              "destination_state": [
                "<ADD STRING VALUE>"
              ],
              "full_load": false,
              "height": 0,
              "length": 0,
              "origin_city": "<ADD STRING VALUE>",
              "origin_state": "<ADD STRING VALUE>",
              "other_trailer_types": "<ADD STRING VALUE>",
              "pay_rate": 0,
              "posting_id": 0,
              "receive_date": "<ADD STRING VALUE>",
              "ship_date": "<ADD STRING VALUE>",
              "trailer_type": [
                "V"
              ],
              "weight": 0,
              "width": 0
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"comment": @"<ADD STRING VALUE>",
                                          @"custom_id": @0,
                                          @"destination_city": @"<ADD STRING VALUE>",
                                          @"destination_state": @[ @"<ADD STRING VALUE>" ],
                                          @"full_load": @NO,
                                          @"height": @0,
                                          @"length": @0,
                                          @"origin_city": @"<ADD STRING VALUE>",
                                          @"origin_state": @"<ADD STRING VALUE>",
                                          @"other_trailer_types": @"<ADD STRING VALUE>",
                                          @"pay_rate": @0,
                                          @"posting_id": @0,
                                          @"receive_date": @"<ADD STRING VALUE>",
                                          @"ship_date": @"<ADD STRING VALUE>",
                                          @"trailer_type": @[ @"V" ],
                                          @"weight": @0,
                                          @"width": @0 };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/postings/%7Bposting_type%7D"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"PATCH"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/postings/%7Bposting_type%7D" in
            let body = Cohttp_lwt_body.of_string "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}" in

            Client.call ~body `PATCH uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("PATCH",
            "https://www.directfreight.com/api/postings/%7Bposting_type%7D");
            $request->content('{"comment":"<ADD STRING VALUE>","custom_id":0,"destination_city":"<ADD STRING VALUE>","destination_state":["<ADD STRING VALUE>"],"full_load":false,"height":0,"length":0,"origin_city":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","other_trailer_types":"<ADD STRING VALUE>","pay_rate":0,"posting_id":0,"receive_date":"<ADD STRING VALUE>","ship_date":"<ADD STRING VALUE>","trailer_type":["V"],"weight":0,"width":0}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/postings/%7Bposting_type%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS => "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('PATCH');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');
            $request->setMethod(HttpRequest::HTTP_METH_PATCH);

            $request->setBody('{"comment":"<ADD STRING VALUE>","custom_id":0,"destination_city":"<ADD STRING VALUE>","destination_state":["<ADD STRING VALUE>"],"full_load":false,"height":0,"length":0,"origin_city":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","other_trailer_types":"<ADD STRING VALUE>","pay_rate":0,"posting_id":0,"receive_date":"<ADD STRING VALUE>","ship_date":"<ADD STRING VALUE>","trailer_type":["V"],"weight":0,"width":0}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"comment":"<ADD STRING VALUE>","custom_id":0,"destination_city":"<ADD STRING VALUE>","destination_state":["<ADD STRING VALUE>"],"full_load":false,"height":0,"length":0,"origin_city":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","other_trailer_types":"<ADD STRING VALUE>","pay_rate":0,"posting_id":0,"receive_date":"<ADD STRING VALUE>","ship_date":"<ADD STRING VALUE>","trailer_type":["V"],"weight":0,"width":0}');

            $request->setRequestUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');
            $request->setRequestMethod('PATCH');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}"

            conn.request("PATCH", "/api/postings/%7Bposting_type%7D", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/postings/%7Bposting_type%7D"

            payload = "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}"
            response = requests.request("PATCH", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/postings/%7Bposting_type%7D")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Patch.new(url)
            request.body = "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"posting_id\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"comment":"<ADD STRING VALUE>","custom_id":0,"destination_city":"<ADD STRING VALUE>","destination_state":["<ADD STRING VALUE>"],"full_load":false,"height":0,"length":0,"origin_city":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","other_trailer_types":"<ADD STRING VALUE>","pay_rate":0,"posting_id":0,"receive_date":"<ADD STRING VALUE>","ship_date":"<ADD STRING VALUE>","trailer_type":["V"],"weight":0,"width":0}' |  \
              http PATCH https://www.directfreight.com/api/postings/%7Bposting_type%7D
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "comment": "<ADD STRING VALUE>",
              "custom_id": 0,
              "destination_city": "<ADD STRING VALUE>",
              "destination_state": ["<ADD STRING VALUE>"],
              "full_load": false,
              "height": 0,
              "length": 0,
              "origin_city": "<ADD STRING VALUE>",
              "origin_state": "<ADD STRING VALUE>",
              "other_trailer_types": "<ADD STRING VALUE>",
              "pay_rate": 0,
              "posting_id": 0,
              "receive_date": "<ADD STRING VALUE>",
              "ship_date": "<ADD STRING VALUE>",
              "trailer_type": ["V"],
              "weight": 0,
              "width": 0
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/postings/%7Bposting_type%7D")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "PATCH"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method PATCH \
              --body-data '{"comment":"<ADD STRING VALUE>","custom_id":0,"destination_city":"<ADD STRING VALUE>","destination_state":["<ADD STRING VALUE>"],"full_load":false,"height":0,"length":0,"origin_city":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","other_trailer_types":"<ADD STRING VALUE>","pay_rate":0,"posting_id":0,"receive_date":"<ADD STRING VALUE>","ship_date":"<ADD STRING VALUE>","trailer_type":["V"],"weight":0,"width":0}' \
              --output-document \
              - https://www.directfreight.com/api/postings/%7Bposting_type%7D
    post:
      consumes: []
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/postings_post_request'
      responses:
        '201':
          $ref: '#/responses/object_created'
      summary: Create a posting
      tags:
        - postings
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/postings/%7Bposting_type%7D");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/postings/%7Bposting_type%7D");
            var request = new RestRequest(Method.POST);
            request.AddParameter("undefined", "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request POST \
              --url https://www.directfreight.com/api/postings/%7Bposting_type%7D \
              --data '{"comment":"<ADD STRING VALUE>","custom_id":0,"destination_city":"<ADD STRING VALUE>","destination_state":["<ADD STRING VALUE>"],"full_load":false,"height":0,"length":0,"origin_city":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","other_trailer_types":"<ADD STRING VALUE>","pay_rate":0,"receive_date":"<ADD STRING VALUE>","ship_date":"<ADD STRING VALUE>","trailer_type":["V"],"weight":0,"width":0}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"comment\\\":\\\"<ADD STRING VALUE>\\\",\\\"custom_id\\\":0,\\\"destination_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"destination_state\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"full_load\\\":false,\\\"height\\\":0,\\\"length\\\":0,\\\"origin_city\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin_state\\\":\\\"<ADD STRING VALUE>\\\",\\\"other_trailer_types\\\":\\\"<ADD STRING VALUE>\\\",\\\"pay_rate\\\":0,\\\"receive_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"ship_date\\\":\\\"<ADD STRING VALUE>\\\",\\\"trailer_type\\\":[\\\"V\\\"],\\\"weight\\\":0,\\\"width\\\":0}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/postings/%7Bposting_type%7D")
              .post(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://www.directfreight.com/api/postings/%7Bposting_type%7D")
              .body("{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/postings/%7Bposting_type%7D",
              "method": "POST",
              "headers": {},
              "processData": false,
              "data": "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "comment": "<ADD STRING VALUE>",
              "custom_id": 0,
              "destination_city": "<ADD STRING VALUE>",
              "destination_state": [
                "<ADD STRING VALUE>"
              ],
              "full_load": false,
              "height": 0,
              "length": 0,
              "origin_city": "<ADD STRING VALUE>",
              "origin_state": "<ADD STRING VALUE>",
              "other_trailer_types": "<ADD STRING VALUE>",
              "pay_rate": 0,
              "receive_date": "<ADD STRING VALUE>",
              "ship_date": "<ADD STRING VALUE>",
              "trailer_type": [
                "V"
              ],
              "weight": 0,
              "width": 0
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://www.directfreight.com/api/postings/%7Bposting_type%7D");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/postings/%7Bposting_type%7D",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ comment: '<ADD STRING VALUE>',
              custom_id: 0,
              destination_city: '<ADD STRING VALUE>',
              destination_state: [ '<ADD STRING VALUE>' ],
              full_load: false,
              height: 0,
              length: 0,
              origin_city: '<ADD STRING VALUE>',
              origin_state: '<ADD STRING VALUE>',
              other_trailer_types: '<ADD STRING VALUE>',
              pay_rate: 0,
              receive_date: '<ADD STRING VALUE>',
              ship_date: '<ADD STRING VALUE>',
              trailer_type: [ 'V' ],
              weight: 0,
              width: 0 }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://www.directfreight.com/api/postings/%7Bposting_type%7D',
              body: 
               { comment: '<ADD STRING VALUE>',
                 custom_id: 0,
                 destination_city: '<ADD STRING VALUE>',
                 destination_state: [ '<ADD STRING VALUE>' ],
                 full_load: false,
                 height: 0,
                 length: 0,
                 origin_city: '<ADD STRING VALUE>',
                 origin_state: '<ADD STRING VALUE>',
                 other_trailer_types: '<ADD STRING VALUE>',
                 pay_rate: 0,
                 receive_date: '<ADD STRING VALUE>',
                 ship_date: '<ADD STRING VALUE>',
                 trailer_type: [ 'V' ],
                 weight: 0,
                 width: 0 },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("POST", "https://www.directfreight.com/api/postings/%7Bposting_type%7D");

            req.type("json");
            req.send({
              "comment": "<ADD STRING VALUE>",
              "custom_id": 0,
              "destination_city": "<ADD STRING VALUE>",
              "destination_state": [
                "<ADD STRING VALUE>"
              ],
              "full_load": false,
              "height": 0,
              "length": 0,
              "origin_city": "<ADD STRING VALUE>",
              "origin_state": "<ADD STRING VALUE>",
              "other_trailer_types": "<ADD STRING VALUE>",
              "pay_rate": 0,
              "receive_date": "<ADD STRING VALUE>",
              "ship_date": "<ADD STRING VALUE>",
              "trailer_type": [
                "V"
              ],
              "weight": 0,
              "width": 0
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"comment": @"<ADD STRING VALUE>",
                                          @"custom_id": @0,
                                          @"destination_city": @"<ADD STRING VALUE>",
                                          @"destination_state": @[ @"<ADD STRING VALUE>" ],
                                          @"full_load": @NO,
                                          @"height": @0,
                                          @"length": @0,
                                          @"origin_city": @"<ADD STRING VALUE>",
                                          @"origin_state": @"<ADD STRING VALUE>",
                                          @"other_trailer_types": @"<ADD STRING VALUE>",
                                          @"pay_rate": @0,
                                          @"receive_date": @"<ADD STRING VALUE>",
                                          @"ship_date": @"<ADD STRING VALUE>",
                                          @"trailer_type": @[ @"V" ],
                                          @"weight": @0,
                                          @"width": @0 };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/postings/%7Bposting_type%7D"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"POST"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/postings/%7Bposting_type%7D" in
            let body = Cohttp_lwt_body.of_string "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}" in

            Client.call ~body `POST uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("POST",
            "https://www.directfreight.com/api/postings/%7Bposting_type%7D");
            $request->content('{"comment":"<ADD STRING VALUE>","custom_id":0,"destination_city":"<ADD STRING VALUE>","destination_state":["<ADD STRING VALUE>"],"full_load":false,"height":0,"length":0,"origin_city":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","other_trailer_types":"<ADD STRING VALUE>","pay_rate":0,"receive_date":"<ADD STRING VALUE>","ship_date":"<ADD STRING VALUE>","trailer_type":["V"],"weight":0,"width":0}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/postings/%7Bposting_type%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');
            $request->setMethod(HTTP_METH_POST);

            $request->setBody('{"comment":"<ADD STRING VALUE>","custom_id":0,"destination_city":"<ADD STRING VALUE>","destination_state":["<ADD STRING VALUE>"],"full_load":false,"height":0,"length":0,"origin_city":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","other_trailer_types":"<ADD STRING VALUE>","pay_rate":0,"receive_date":"<ADD STRING VALUE>","ship_date":"<ADD STRING VALUE>","trailer_type":["V"],"weight":0,"width":0}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"comment":"<ADD STRING VALUE>","custom_id":0,"destination_city":"<ADD STRING VALUE>","destination_state":["<ADD STRING VALUE>"],"full_load":false,"height":0,"length":0,"origin_city":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","other_trailer_types":"<ADD STRING VALUE>","pay_rate":0,"receive_date":"<ADD STRING VALUE>","ship_date":"<ADD STRING VALUE>","trailer_type":["V"],"weight":0,"width":0}');

            $request->setRequestUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}"

            conn.request("POST", "/api/postings/%7Bposting_type%7D", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/postings/%7Bposting_type%7D"

            payload = "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}"
            response = requests.request("POST", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/postings/%7Bposting_type%7D")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)
            request.body = "{\"comment\":\"<ADD STRING VALUE>\",\"custom_id\":0,\"destination_city\":\"<ADD STRING VALUE>\",\"destination_state\":[\"<ADD STRING VALUE>\"],\"full_load\":false,\"height\":0,\"length\":0,\"origin_city\":\"<ADD STRING VALUE>\",\"origin_state\":\"<ADD STRING VALUE>\",\"other_trailer_types\":\"<ADD STRING VALUE>\",\"pay_rate\":0,\"receive_date\":\"<ADD STRING VALUE>\",\"ship_date\":\"<ADD STRING VALUE>\",\"trailer_type\":[\"V\"],\"weight\":0,\"width\":0}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"comment":"<ADD STRING VALUE>","custom_id":0,"destination_city":"<ADD STRING VALUE>","destination_state":["<ADD STRING VALUE>"],"full_load":false,"height":0,"length":0,"origin_city":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","other_trailer_types":"<ADD STRING VALUE>","pay_rate":0,"receive_date":"<ADD STRING VALUE>","ship_date":"<ADD STRING VALUE>","trailer_type":["V"],"weight":0,"width":0}' |  \
              http POST https://www.directfreight.com/api/postings/%7Bposting_type%7D
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "comment": "<ADD STRING VALUE>",
              "custom_id": 0,
              "destination_city": "<ADD STRING VALUE>",
              "destination_state": ["<ADD STRING VALUE>"],
              "full_load": false,
              "height": 0,
              "length": 0,
              "origin_city": "<ADD STRING VALUE>",
              "origin_state": "<ADD STRING VALUE>",
              "other_trailer_types": "<ADD STRING VALUE>",
              "pay_rate": 0,
              "receive_date": "<ADD STRING VALUE>",
              "ship_date": "<ADD STRING VALUE>",
              "trailer_type": ["V"],
              "weight": 0,
              "width": 0
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/postings/%7Bposting_type%7D")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "POST"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method POST \
              --body-data '{"comment":"<ADD STRING VALUE>","custom_id":0,"destination_city":"<ADD STRING VALUE>","destination_state":["<ADD STRING VALUE>"],"full_load":false,"height":0,"length":0,"origin_city":"<ADD STRING VALUE>","origin_state":"<ADD STRING VALUE>","other_trailer_types":"<ADD STRING VALUE>","pay_rate":0,"receive_date":"<ADD STRING VALUE>","ship_date":"<ADD STRING VALUE>","trailer_type":["V"],"weight":0,"width":0}' \
              --output-document \
              - https://www.directfreight.com/api/postings/%7Bposting_type%7D
    x-restlet:
      section: POSTINGS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/postings/%7Bposting_type%7D");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/postings/%7Bposting_type%7D
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/%7Bposting_type%7D\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/postings/%7Bposting_type%7D")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/postings/%7Bposting_type%7D")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/postings/%7Bposting_type%7D",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/postings/%7Bposting_type%7D");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/postings/%7Bposting_type%7D",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/postings/%7Bposting_type%7D' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/postings/%7Bposting_type%7D");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/postings/%7Bposting_type%7D"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/postings/%7Bposting_type%7D" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/postings/%7Bposting_type%7D");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/postings/%7Bposting_type%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/postings/%7Bposting_type%7D")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/postings/%7Bposting_type%7D"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/postings/%7Bposting_type%7D")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/postings/%7Bposting_type%7D'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/postings/%7Bposting_type%7D")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/postings/%7Bposting_type%7D
  '/postings/{posting_type}/{action}':
    parameters:
      - $ref: '#/parameters/posting_type'
      - description: 'Specified in the url. Valid types are "copy", and "move"'
        in: path
        name: action
        required: true
        type: string
    post:
      consumes: []
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/post_posting_type_action_body'
      responses:
        '201':
          $ref: '#/responses/object_created'
      summary: STAGE=UNK Copy or Move an posting.
      tags:
        - postings
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D");
            var request = new RestRequest(Method.POST);
            request.AddParameter("undefined", "{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request POST \
              --url https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D \
              --data '{"source_id":{},"source_posting":"<ADD STRING VALUE>"}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"source_id\\\":{},\\\"source_posting\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D")
              .post(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D")
              .body("{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D",
              "method": "POST",
              "headers": {},
              "processData": false,
              "data": "{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "source_id": {},
              "source_posting": "<ADD STRING VALUE>"
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/postings/%7Bposting_type%7D/%7Baction%7D",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ source_id: {}, source_posting: '<ADD STRING VALUE>' }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D',
              body: { source_id: {}, source_posting: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("POST", "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D");

            req.type("json");
            req.send({
              "source_id": {},
              "source_posting": "<ADD STRING VALUE>"
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"source_id": @{  },
                                          @"source_posting": @"<ADD STRING VALUE>" };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"POST"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D" in
            let body = Cohttp_lwt_body.of_string "{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}" in

            Client.call ~body `POST uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("POST",
            "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D");
            $request->content('{"source_id":{},"source_posting":"<ADD STRING VALUE>"}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D');
            $request->setMethod(HTTP_METH_POST);

            $request->setBody('{"source_id":{},"source_posting":"<ADD STRING VALUE>"}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"source_id":{},"source_posting":"<ADD STRING VALUE>"}');

            $request->setRequestUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}"

            conn.request("POST", "/api/postings/%7Bposting_type%7D/%7Baction%7D", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D"

            payload = "{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}"
            response = requests.request("POST", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)
            request.body = "{\"source_id\":{},\"source_posting\":\"<ADD STRING VALUE>\"}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"source_id":{},"source_posting":"<ADD STRING VALUE>"}' |  \
              http POST https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "source_id": [],
              "source_posting": "<ADD STRING VALUE>"
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "POST"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method POST \
              --body-data '{"source_id":{},"source_posting":"<ADD STRING VALUE>"}' \
              --output-document \
              - https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D
    x-restlet:
      section: POSTINGS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/postings/%7Bposting_type%7D/%7Baction%7D",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/postings/%7Bposting_type%7D/%7Baction%7D")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/postings/%7Bposting_type%7D/%7Baction%7D
  '/postings/custom_categories/{category_type}':
    delete:
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: To just delete information about some postings.
          in: query
          items:
            type: string
          name: category_id
          required: false
          type: array
      responses:
        '204':
          description: 200 OK
      summary: 'STAGE=UNK Delete some or all custom columns, or custom_column data.'
      tags:
        - postings
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE");
            var request = new RestRequest(Method.DELETE);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request DELETE \
              --url 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE")
              .delete(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.delete("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE",
              "method": "DELETE",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("DELETE", "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "DELETE",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'DELETE',
              url: 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D',
              qs: { category_id: 'SOME_ARRAY_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("DELETE", "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");

            req.query({
              "category_id": "SOME_ARRAY_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"DELETE"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE" in

            Client.call `DELETE uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("DELETE",
            "'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');
            $request->setMethod(HTTP_METH_DELETE);

            $request->setQueryData(array(
              'category_id' => 'SOME_ARRAY_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');
            $request->setRequestMethod('DELETE');
            $request->setQuery(new http\QueryString(array(
              'category_id' => 'SOME_ARRAY_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("DELETE", "/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"

            querystring = {"category_id":"SOME_ARRAY_VALUE"}

            response = requests.request("DELETE", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Delete.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http DELETE ''https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "DELETE"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method DELETE \
              --output-document \
              - 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'
    get:
      parameters:
        - $ref: '#/parameters/end-user-token'
        - description: To just return information about some postings.
          in: query
          items:
            type: string
          name: category_id
          required: false
          type: array
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/get_custom_categories_response'
      summary: 'STAGE=UNK Get a list of custom columns, or custom_column data.'
      tags:
        - postings
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D',
              qs: { category_id: 'SOME_ARRAY_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");

            req.query({
              "category_id": "SOME_ARRAY_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData(array(
              'category_id' => 'SOME_ARRAY_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString(array(
              'category_id' => 'SOME_ARRAY_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"

            querystring = {"category_id":"SOME_ARRAY_VALUE"}

            response = requests.request("GET", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET ''https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D?category_id=SOME_ARRAY_VALUE'
    parameters:
      - description: 'Valid types are "names", and "data".'
        in: path
        name: category_type
        required: true
        type: string
    patch:
      parameters:
        - $ref: '#/parameters/end-user-token'
      responses:
        '204':
          description: successful operation
      summary: 'STAGE=UNK Update a category name, or value.'
      tags:
        - postings
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");
            var request = new RestRequest(Method.PATCH);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request PATCH \
              --url https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\"\n\n\treq, _ := http.NewRequest(\"PATCH\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D")
              .patch(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.patch("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D",
              "method": "PATCH",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("PATCH", "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "PATCH",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/postings/custom_categories/%7Bcategory_type%7D",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'PATCH',
              url: 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("PATCH", "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"PATCH"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D" in

            Client.call `PATCH uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("PATCH",
            "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('PATCH');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');
            $request->setMethod(HttpRequest::HTTP_METH_PATCH);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');
            $request->setRequestMethod('PATCH');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("PATCH", "/api/postings/custom_categories/%7Bcategory_type%7D")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"

            response = requests.request("PATCH", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Patch.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http PATCH https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "PATCH"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method PATCH \
              --output-document \
              - https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D
    post:
      parameters:
        - $ref: '#/parameters/end-user-token'
      responses:
        '201':
          $ref: '#/responses/object_created'
      summary: 'STAGE=UNK Create new category names, or add new data.'
      tags:
        - postings
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");
            var request = new RestRequest(Method.POST);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request POST \
              --url https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D")
              .post(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D",
              "method": "POST",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/postings/custom_categories/%7Bcategory_type%7D",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("POST", "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"POST"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D" in

            Client.call `POST uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("POST",
            "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');
            $request->setMethod(HTTP_METH_POST);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');
            $request->setRequestMethod('POST');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("POST", "/api/postings/custom_categories/%7Bcategory_type%7D")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"

            response = requests.request("POST", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http POST https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "POST"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method POST \
              --output-document \
              - https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D
    x-restlet:
      section: POSTINGS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/postings/custom_categories/%7Bcategory_type%7D",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/postings/custom_categories/%7Bcategory_type%7D")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/postings/custom_categories/%7Bcategory_type%7D
  '/postings/multiple/{posting_type}':
    parameters:
      - $ref: '#/parameters/posting_type'
    post:
      consumes: []
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/create_multiple_postings'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/post_posting_multiple_response'
      summary: 'STAGE=UNK Create, multiple entries at once. This is a convenience method.'
      tags:
        - postings
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D");
            var request = new RestRequest(Method.POST);
            request.AddParameter("undefined", "{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request POST \
              --url https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D \
              --data '{"contact_fax":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_phone":"<ADD STRING VALUE>","delete_current_before_posting":false,"list":["<ADD STRING VALUE>"]}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"contact_fax\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_phone\\\":\\\"<ADD STRING VALUE>\\\",\\\"delete_current_before_posting\\\":false,\\\"list\\\":[\\\"<ADD STRING VALUE>\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D")
              .post(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D")
              .body("{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D",
              "method": "POST",
              "headers": {},
              "processData": false,
              "data": "{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "contact_fax": "<ADD STRING VALUE>",
              "contact_name": "<ADD STRING VALUE>",
              "contact_phone": "<ADD STRING VALUE>",
              "delete_current_before_posting": false,
              "list": [
                "<ADD STRING VALUE>"
              ]
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/postings/multiple/%7Bposting_type%7D",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ contact_fax: '<ADD STRING VALUE>',
              contact_name: '<ADD STRING VALUE>',
              contact_phone: '<ADD STRING VALUE>',
              delete_current_before_posting: false,
              list: [ '<ADD STRING VALUE>' ] }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D',
              body: 
               { contact_fax: '<ADD STRING VALUE>',
                 contact_name: '<ADD STRING VALUE>',
                 contact_phone: '<ADD STRING VALUE>',
                 delete_current_before_posting: false,
                 list: [ '<ADD STRING VALUE>' ] },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("POST", "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D");

            req.type("json");
            req.send({
              "contact_fax": "<ADD STRING VALUE>",
              "contact_name": "<ADD STRING VALUE>",
              "contact_phone": "<ADD STRING VALUE>",
              "delete_current_before_posting": false,
              "list": [
                "<ADD STRING VALUE>"
              ]
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"contact_fax": @"<ADD STRING VALUE>",
                                          @"contact_name": @"<ADD STRING VALUE>",
                                          @"contact_phone": @"<ADD STRING VALUE>",
                                          @"delete_current_before_posting": @NO,
                                          @"list": @[ @"<ADD STRING VALUE>" ] };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"POST"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D" in
            let body = Cohttp_lwt_body.of_string "{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}" in

            Client.call ~body `POST uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("POST",
            "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D");
            $request->content('{"contact_fax":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_phone":"<ADD STRING VALUE>","delete_current_before_posting":false,"list":["<ADD STRING VALUE>"]}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D');
            $request->setMethod(HTTP_METH_POST);

            $request->setBody('{"contact_fax":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_phone":"<ADD STRING VALUE>","delete_current_before_posting":false,"list":["<ADD STRING VALUE>"]}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"contact_fax":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_phone":"<ADD STRING VALUE>","delete_current_before_posting":false,"list":["<ADD STRING VALUE>"]}');

            $request->setRequestUrl('https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}"

            conn.request("POST", "/api/postings/multiple/%7Bposting_type%7D", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D"

            payload = "{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}"
            response = requests.request("POST", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)
            request.body = "{\"contact_fax\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_phone\":\"<ADD STRING VALUE>\",\"delete_current_before_posting\":false,\"list\":[\"<ADD STRING VALUE>\"]}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"contact_fax":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_phone":"<ADD STRING VALUE>","delete_current_before_posting":false,"list":["<ADD STRING VALUE>"]}' |  \
              http POST https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "contact_fax": "<ADD STRING VALUE>",
              "contact_name": "<ADD STRING VALUE>",
              "contact_phone": "<ADD STRING VALUE>",
              "delete_current_before_posting": false,
              "list": ["<ADD STRING VALUE>"]
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "POST"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method POST \
              --body-data '{"contact_fax":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_phone":"<ADD STRING VALUE>","delete_current_before_posting":false,"list":["<ADD STRING VALUE>"]}' \
              --output-document \
              - https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D
    x-restlet:
      section: POSTINGS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/postings/multiple/%7Bposting_type%7D",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/postings/multiple/%7Bposting_type%7D")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/postings/multiple/%7Bposting_type%7D
  /profiles:
    get:
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: query
          items:
            type: integer
          name: posting_id
          required: false
          type: array
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/profile_model'
      summary: STAGE=UNK Request the logged in user's profile.
      tags:
        - profiles
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url 'https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles?posting_id=SOME_ARRAY_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/profiles',
              qs: { posting_id: 'SOME_ARRAY_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/profiles");

            req.query({
              "posting_id": "SOME_ARRAY_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "'https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData(array(
              'posting_id' => 'SOME_ARRAY_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/profiles');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString(array(
              'posting_id' => 'SOME_ARRAY_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/profiles?posting_id=SOME_ARRAY_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles"

            querystring = {"posting_id":"SOME_ARRAY_VALUE"}

            response = requests.request("GET", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET ''https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - 'https://www.directfreight.com/api/profiles?posting_id=SOME_ARRAY_VALUE'
    patch:
      consumes: []
      description: Please send in at least one field to be updated.
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/patch_profile'
      responses:
        '204':
          description: successful operation
      summary: STAGE=UNK Update profile information.
      tags:
        - profiles
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/profiles");
            var request = new RestRequest(Method.PATCH);
            request.AddParameter("undefined", "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request PATCH \
              --url https://www.directfreight.com/api/profiles \
              --data '{"address":"<ADD STRING VALUE>","city":"<ADD STRING VALUE>","company":"<ADD STRING VALUE>","contact_extension":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_number":"<ADD STRING VALUE>","dot_number":"<ADD STRING VALUE>","fax_number":"<ADD STRING VALUE>","mc_number":"<ADD STRING VALUE>","mobile_carrier":0,"mobile_number":"<ADD STRING VALUE>","state":"<ADD STRING VALUE>","web_page":"<ADD STRING VALUE>","zip":"<ADD STRING VALUE>"}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles\"\n\n\tpayload := strings.NewReader(\"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles")
              .patch(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.patch("https://www.directfreight.com/api/profiles")
              .body("{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles",
              "method": "PATCH",
              "headers": {},
              "processData": false,
              "data": "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "address": "<ADD STRING VALUE>",
              "city": "<ADD STRING VALUE>",
              "company": "<ADD STRING VALUE>",
              "contact_extension": "<ADD STRING VALUE>",
              "contact_name": "<ADD STRING VALUE>",
              "contact_number": "<ADD STRING VALUE>",
              "dot_number": "<ADD STRING VALUE>",
              "fax_number": "<ADD STRING VALUE>",
              "mc_number": "<ADD STRING VALUE>",
              "mobile_carrier": 0,
              "mobile_number": "<ADD STRING VALUE>",
              "state": "<ADD STRING VALUE>",
              "web_page": "<ADD STRING VALUE>",
              "zip": "<ADD STRING VALUE>"
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("PATCH", "https://www.directfreight.com/api/profiles");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "PATCH",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ address: '<ADD STRING VALUE>',
              city: '<ADD STRING VALUE>',
              company: '<ADD STRING VALUE>',
              contact_extension: '<ADD STRING VALUE>',
              contact_name: '<ADD STRING VALUE>',
              contact_number: '<ADD STRING VALUE>',
              dot_number: '<ADD STRING VALUE>',
              fax_number: '<ADD STRING VALUE>',
              mc_number: '<ADD STRING VALUE>',
              mobile_carrier: 0,
              mobile_number: '<ADD STRING VALUE>',
              state: '<ADD STRING VALUE>',
              web_page: '<ADD STRING VALUE>',
              zip: '<ADD STRING VALUE>' }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'PATCH',
              url: 'https://www.directfreight.com/api/profiles',
              body: 
               { address: '<ADD STRING VALUE>',
                 city: '<ADD STRING VALUE>',
                 company: '<ADD STRING VALUE>',
                 contact_extension: '<ADD STRING VALUE>',
                 contact_name: '<ADD STRING VALUE>',
                 contact_number: '<ADD STRING VALUE>',
                 dot_number: '<ADD STRING VALUE>',
                 fax_number: '<ADD STRING VALUE>',
                 mc_number: '<ADD STRING VALUE>',
                 mobile_carrier: 0,
                 mobile_number: '<ADD STRING VALUE>',
                 state: '<ADD STRING VALUE>',
                 web_page: '<ADD STRING VALUE>',
                 zip: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("PATCH", "https://www.directfreight.com/api/profiles");

            req.type("json");
            req.send({
              "address": "<ADD STRING VALUE>",
              "city": "<ADD STRING VALUE>",
              "company": "<ADD STRING VALUE>",
              "contact_extension": "<ADD STRING VALUE>",
              "contact_name": "<ADD STRING VALUE>",
              "contact_number": "<ADD STRING VALUE>",
              "dot_number": "<ADD STRING VALUE>",
              "fax_number": "<ADD STRING VALUE>",
              "mc_number": "<ADD STRING VALUE>",
              "mobile_carrier": 0,
              "mobile_number": "<ADD STRING VALUE>",
              "state": "<ADD STRING VALUE>",
              "web_page": "<ADD STRING VALUE>",
              "zip": "<ADD STRING VALUE>"
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"address": @"<ADD STRING VALUE>",
                                          @"city": @"<ADD STRING VALUE>",
                                          @"company": @"<ADD STRING VALUE>",
                                          @"contact_extension": @"<ADD STRING VALUE>",
                                          @"contact_name": @"<ADD STRING VALUE>",
                                          @"contact_number": @"<ADD STRING VALUE>",
                                          @"dot_number": @"<ADD STRING VALUE>",
                                          @"fax_number": @"<ADD STRING VALUE>",
                                          @"mc_number": @"<ADD STRING VALUE>",
                                          @"mobile_carrier": @0,
                                          @"mobile_number": @"<ADD STRING VALUE>",
                                          @"state": @"<ADD STRING VALUE>",
                                          @"web_page": @"<ADD STRING VALUE>",
                                          @"zip": @"<ADD STRING VALUE>" };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"PATCH"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles" in
            let body = Cohttp_lwt_body.of_string "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}" in

            Client.call ~body `PATCH uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("PATCH",
            "https://www.directfreight.com/api/profiles");
            $request->content('{"address":"<ADD STRING VALUE>","city":"<ADD STRING VALUE>","company":"<ADD STRING VALUE>","contact_extension":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_number":"<ADD STRING VALUE>","dot_number":"<ADD STRING VALUE>","fax_number":"<ADD STRING VALUE>","mc_number":"<ADD STRING VALUE>","mobile_carrier":0,"mobile_number":"<ADD STRING VALUE>","state":"<ADD STRING VALUE>","web_page":"<ADD STRING VALUE>","zip":"<ADD STRING VALUE>"}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS => "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('PATCH');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles');
            $request->setMethod(HttpRequest::HTTP_METH_PATCH);

            $request->setBody('{"address":"<ADD STRING VALUE>","city":"<ADD STRING VALUE>","company":"<ADD STRING VALUE>","contact_extension":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_number":"<ADD STRING VALUE>","dot_number":"<ADD STRING VALUE>","fax_number":"<ADD STRING VALUE>","mc_number":"<ADD STRING VALUE>","mobile_carrier":0,"mobile_number":"<ADD STRING VALUE>","state":"<ADD STRING VALUE>","web_page":"<ADD STRING VALUE>","zip":"<ADD STRING VALUE>"}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"address":"<ADD STRING VALUE>","city":"<ADD STRING VALUE>","company":"<ADD STRING VALUE>","contact_extension":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_number":"<ADD STRING VALUE>","dot_number":"<ADD STRING VALUE>","fax_number":"<ADD STRING VALUE>","mc_number":"<ADD STRING VALUE>","mobile_carrier":0,"mobile_number":"<ADD STRING VALUE>","state":"<ADD STRING VALUE>","web_page":"<ADD STRING VALUE>","zip":"<ADD STRING VALUE>"}');

            $request->setRequestUrl('https://www.directfreight.com/api/profiles');
            $request->setRequestMethod('PATCH');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}"

            conn.request("PATCH", "/api/profiles", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles"

            payload = "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}"
            response = requests.request("PATCH", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/profiles")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Patch.new(url)
            request.body = "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"address":"<ADD STRING VALUE>","city":"<ADD STRING VALUE>","company":"<ADD STRING VALUE>","contact_extension":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_number":"<ADD STRING VALUE>","dot_number":"<ADD STRING VALUE>","fax_number":"<ADD STRING VALUE>","mc_number":"<ADD STRING VALUE>","mobile_carrier":0,"mobile_number":"<ADD STRING VALUE>","state":"<ADD STRING VALUE>","web_page":"<ADD STRING VALUE>","zip":"<ADD STRING VALUE>"}' |  \
              http PATCH https://www.directfreight.com/api/profiles
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "address": "<ADD STRING VALUE>",
              "city": "<ADD STRING VALUE>",
              "company": "<ADD STRING VALUE>",
              "contact_extension": "<ADD STRING VALUE>",
              "contact_name": "<ADD STRING VALUE>",
              "contact_number": "<ADD STRING VALUE>",
              "dot_number": "<ADD STRING VALUE>",
              "fax_number": "<ADD STRING VALUE>",
              "mc_number": "<ADD STRING VALUE>",
              "mobile_carrier": 0,
              "mobile_number": "<ADD STRING VALUE>",
              "state": "<ADD STRING VALUE>",
              "web_page": "<ADD STRING VALUE>",
              "zip": "<ADD STRING VALUE>"
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "PATCH"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method PATCH \
              --body-data '{"address":"<ADD STRING VALUE>","city":"<ADD STRING VALUE>","company":"<ADD STRING VALUE>","contact_extension":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_number":"<ADD STRING VALUE>","dot_number":"<ADD STRING VALUE>","fax_number":"<ADD STRING VALUE>","mc_number":"<ADD STRING VALUE>","mobile_carrier":0,"mobile_number":"<ADD STRING VALUE>","state":"<ADD STRING VALUE>","web_page":"<ADD STRING VALUE>","zip":"<ADD STRING VALUE>"}' \
              --output-document \
              - https://www.directfreight.com/api/profiles
    post:
      consumes: []
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/profile_request'
      responses:
        '201':
          description: Object created check the headers for a reference URL.
          headers:
            Location:
              description: This will have a fully qualified API url you can call to get details of yoru load.
              type: string
              x-example: 'https://directfreight.com/api/postings/loads/?posting_id=1764957218'
          schema:
            properties:
              posting_id:
                type: integer
            type: object
      summary: STAGE=UNK Create a new profile.
      tags:
        - profiles
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/profiles");
            var request = new RestRequest(Method.POST);
            request.AddParameter("undefined", "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request POST \
              --url https://www.directfreight.com/api/profiles \
              --data '{"address":"<ADD STRING VALUE>","city":"<ADD STRING VALUE>","company":"<ADD STRING VALUE>","contact_extension":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_number":"<ADD STRING VALUE>","dot_number":"<ADD STRING VALUE>","fax_number":"<ADD STRING VALUE>","mc_number":"<ADD STRING VALUE>","mobile_carrier":0,"mobile_number":"<ADD STRING VALUE>","password":"<ADD STRING VALUE>","state":"<ADD STRING VALUE>","web_page":"<ADD STRING VALUE>","zip":"<ADD STRING VALUE>"}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles\"\n\n\tpayload := strings.NewReader(\"{\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\",\\\"company\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_extension\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"contact_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"dot_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"fax_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mc_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobile_carrier\\\":0,\\\"mobile_number\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"web_page\\\":\\\"<ADD STRING VALUE>\\\",\\\"zip\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles")
              .post(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://www.directfreight.com/api/profiles")
              .body("{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles",
              "method": "POST",
              "headers": {},
              "processData": false,
              "data": "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "address": "<ADD STRING VALUE>",
              "city": "<ADD STRING VALUE>",
              "company": "<ADD STRING VALUE>",
              "contact_extension": "<ADD STRING VALUE>",
              "contact_name": "<ADD STRING VALUE>",
              "contact_number": "<ADD STRING VALUE>",
              "dot_number": "<ADD STRING VALUE>",
              "fax_number": "<ADD STRING VALUE>",
              "mc_number": "<ADD STRING VALUE>",
              "mobile_carrier": 0,
              "mobile_number": "<ADD STRING VALUE>",
              "password": "<ADD STRING VALUE>",
              "state": "<ADD STRING VALUE>",
              "web_page": "<ADD STRING VALUE>",
              "zip": "<ADD STRING VALUE>"
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://www.directfreight.com/api/profiles");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ address: '<ADD STRING VALUE>',
              city: '<ADD STRING VALUE>',
              company: '<ADD STRING VALUE>',
              contact_extension: '<ADD STRING VALUE>',
              contact_name: '<ADD STRING VALUE>',
              contact_number: '<ADD STRING VALUE>',
              dot_number: '<ADD STRING VALUE>',
              fax_number: '<ADD STRING VALUE>',
              mc_number: '<ADD STRING VALUE>',
              mobile_carrier: 0,
              mobile_number: '<ADD STRING VALUE>',
              password: '<ADD STRING VALUE>',
              state: '<ADD STRING VALUE>',
              web_page: '<ADD STRING VALUE>',
              zip: '<ADD STRING VALUE>' }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://www.directfreight.com/api/profiles',
              body: 
               { address: '<ADD STRING VALUE>',
                 city: '<ADD STRING VALUE>',
                 company: '<ADD STRING VALUE>',
                 contact_extension: '<ADD STRING VALUE>',
                 contact_name: '<ADD STRING VALUE>',
                 contact_number: '<ADD STRING VALUE>',
                 dot_number: '<ADD STRING VALUE>',
                 fax_number: '<ADD STRING VALUE>',
                 mc_number: '<ADD STRING VALUE>',
                 mobile_carrier: 0,
                 mobile_number: '<ADD STRING VALUE>',
                 password: '<ADD STRING VALUE>',
                 state: '<ADD STRING VALUE>',
                 web_page: '<ADD STRING VALUE>',
                 zip: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("POST", "https://www.directfreight.com/api/profiles");

            req.type("json");
            req.send({
              "address": "<ADD STRING VALUE>",
              "city": "<ADD STRING VALUE>",
              "company": "<ADD STRING VALUE>",
              "contact_extension": "<ADD STRING VALUE>",
              "contact_name": "<ADD STRING VALUE>",
              "contact_number": "<ADD STRING VALUE>",
              "dot_number": "<ADD STRING VALUE>",
              "fax_number": "<ADD STRING VALUE>",
              "mc_number": "<ADD STRING VALUE>",
              "mobile_carrier": 0,
              "mobile_number": "<ADD STRING VALUE>",
              "password": "<ADD STRING VALUE>",
              "state": "<ADD STRING VALUE>",
              "web_page": "<ADD STRING VALUE>",
              "zip": "<ADD STRING VALUE>"
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"address": @"<ADD STRING VALUE>",
                                          @"city": @"<ADD STRING VALUE>",
                                          @"company": @"<ADD STRING VALUE>",
                                          @"contact_extension": @"<ADD STRING VALUE>",
                                          @"contact_name": @"<ADD STRING VALUE>",
                                          @"contact_number": @"<ADD STRING VALUE>",
                                          @"dot_number": @"<ADD STRING VALUE>",
                                          @"fax_number": @"<ADD STRING VALUE>",
                                          @"mc_number": @"<ADD STRING VALUE>",
                                          @"mobile_carrier": @0,
                                          @"mobile_number": @"<ADD STRING VALUE>",
                                          @"password": @"<ADD STRING VALUE>",
                                          @"state": @"<ADD STRING VALUE>",
                                          @"web_page": @"<ADD STRING VALUE>",
                                          @"zip": @"<ADD STRING VALUE>" };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"POST"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles" in
            let body = Cohttp_lwt_body.of_string "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}" in

            Client.call ~body `POST uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("POST",
            "https://www.directfreight.com/api/profiles");
            $request->content('{"address":"<ADD STRING VALUE>","city":"<ADD STRING VALUE>","company":"<ADD STRING VALUE>","contact_extension":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_number":"<ADD STRING VALUE>","dot_number":"<ADD STRING VALUE>","fax_number":"<ADD STRING VALUE>","mc_number":"<ADD STRING VALUE>","mobile_carrier":0,"mobile_number":"<ADD STRING VALUE>","password":"<ADD STRING VALUE>","state":"<ADD STRING VALUE>","web_page":"<ADD STRING VALUE>","zip":"<ADD STRING VALUE>"}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles');
            $request->setMethod(HTTP_METH_POST);

            $request->setBody('{"address":"<ADD STRING VALUE>","city":"<ADD STRING VALUE>","company":"<ADD STRING VALUE>","contact_extension":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_number":"<ADD STRING VALUE>","dot_number":"<ADD STRING VALUE>","fax_number":"<ADD STRING VALUE>","mc_number":"<ADD STRING VALUE>","mobile_carrier":0,"mobile_number":"<ADD STRING VALUE>","password":"<ADD STRING VALUE>","state":"<ADD STRING VALUE>","web_page":"<ADD STRING VALUE>","zip":"<ADD STRING VALUE>"}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"address":"<ADD STRING VALUE>","city":"<ADD STRING VALUE>","company":"<ADD STRING VALUE>","contact_extension":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_number":"<ADD STRING VALUE>","dot_number":"<ADD STRING VALUE>","fax_number":"<ADD STRING VALUE>","mc_number":"<ADD STRING VALUE>","mobile_carrier":0,"mobile_number":"<ADD STRING VALUE>","password":"<ADD STRING VALUE>","state":"<ADD STRING VALUE>","web_page":"<ADD STRING VALUE>","zip":"<ADD STRING VALUE>"}');

            $request->setRequestUrl('https://www.directfreight.com/api/profiles');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}"

            conn.request("POST", "/api/profiles", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles"

            payload = "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}"
            response = requests.request("POST", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/profiles")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)
            request.body = "{\"address\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\",\"company\":\"<ADD STRING VALUE>\",\"contact_extension\":\"<ADD STRING VALUE>\",\"contact_name\":\"<ADD STRING VALUE>\",\"contact_number\":\"<ADD STRING VALUE>\",\"dot_number\":\"<ADD STRING VALUE>\",\"fax_number\":\"<ADD STRING VALUE>\",\"mc_number\":\"<ADD STRING VALUE>\",\"mobile_carrier\":0,\"mobile_number\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"web_page\":\"<ADD STRING VALUE>\",\"zip\":\"<ADD STRING VALUE>\"}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"address":"<ADD STRING VALUE>","city":"<ADD STRING VALUE>","company":"<ADD STRING VALUE>","contact_extension":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_number":"<ADD STRING VALUE>","dot_number":"<ADD STRING VALUE>","fax_number":"<ADD STRING VALUE>","mc_number":"<ADD STRING VALUE>","mobile_carrier":0,"mobile_number":"<ADD STRING VALUE>","password":"<ADD STRING VALUE>","state":"<ADD STRING VALUE>","web_page":"<ADD STRING VALUE>","zip":"<ADD STRING VALUE>"}' |  \
              http POST https://www.directfreight.com/api/profiles
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "address": "<ADD STRING VALUE>",
              "city": "<ADD STRING VALUE>",
              "company": "<ADD STRING VALUE>",
              "contact_extension": "<ADD STRING VALUE>",
              "contact_name": "<ADD STRING VALUE>",
              "contact_number": "<ADD STRING VALUE>",
              "dot_number": "<ADD STRING VALUE>",
              "fax_number": "<ADD STRING VALUE>",
              "mc_number": "<ADD STRING VALUE>",
              "mobile_carrier": 0,
              "mobile_number": "<ADD STRING VALUE>",
              "password": "<ADD STRING VALUE>",
              "state": "<ADD STRING VALUE>",
              "web_page": "<ADD STRING VALUE>",
              "zip": "<ADD STRING VALUE>"
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "POST"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method POST \
              --body-data '{"address":"<ADD STRING VALUE>","city":"<ADD STRING VALUE>","company":"<ADD STRING VALUE>","contact_extension":"<ADD STRING VALUE>","contact_name":"<ADD STRING VALUE>","contact_number":"<ADD STRING VALUE>","dot_number":"<ADD STRING VALUE>","fax_number":"<ADD STRING VALUE>","mc_number":"<ADD STRING VALUE>","mobile_carrier":0,"mobile_number":"<ADD STRING VALUE>","password":"<ADD STRING VALUE>","state":"<ADD STRING VALUE>","web_page":"<ADD STRING VALUE>","zip":"<ADD STRING VALUE>"}' \
              --output-document \
              - https://www.directfreight.com/api/profiles
    x-restlet:
      section: PROFILES
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/profiles
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/profiles")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/profiles");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/profiles' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/profiles");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/profiles");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/profiles');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/profiles")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/profiles")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/profiles'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/profiles
  /profiles/documents:
    delete:
      parameters:
        - $ref: '#/parameters/end-user-token'
      responses:
        '204':
          description: success operation
      summary: STAGE=UNK Delete the document.
      tags:
        - profiles
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles/documents");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/profiles/documents");
            var request = new RestRequest(Method.DELETE);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request DELETE \
              --url https://www.directfreight.com/api/profiles/documents
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/documents\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles/documents")
              .delete(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.delete("https://www.directfreight.com/api/profiles/documents")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles/documents",
              "method": "DELETE",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("DELETE", "https://www.directfreight.com/api/profiles/documents");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "DELETE",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles/documents",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'DELETE',
              url: 'https://www.directfreight.com/api/profiles/documents' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("DELETE", "https://www.directfreight.com/api/profiles/documents");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles/documents"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"DELETE"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles/documents" in

            Client.call `DELETE uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("DELETE",
            "https://www.directfreight.com/api/profiles/documents");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles/documents",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles/documents');
            $request->setMethod(HTTP_METH_DELETE);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/profiles/documents');
            $request->setRequestMethod('DELETE');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("DELETE", "/api/profiles/documents")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles/documents"

            response = requests.request("DELETE", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/profiles/documents")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Delete.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http DELETE https://www.directfreight.com/api/profiles/documents'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles/documents")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "DELETE"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method DELETE \
              --output-document \
              - https://www.directfreight.com/api/profiles/documents
    get:
      description: Retrieve documents
      parameters:
        - $ref: '#/parameters/end-user-token'
      responses:
        '200':
          description: success
      summary: STAGE=UNK Retrieve documents
      tags:
        - profiles
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles/documents");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/profiles/documents");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url https://www.directfreight.com/api/profiles/documents
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/documents\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles/documents")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/profiles/documents")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles/documents",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/profiles/documents");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles/documents",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/profiles/documents' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/profiles/documents");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles/documents"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles/documents" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "https://www.directfreight.com/api/profiles/documents");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles/documents",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles/documents');
            $request->setMethod(HTTP_METH_GET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/profiles/documents');
            $request->setRequestMethod('GET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/profiles/documents")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles/documents"

            response = requests.request("GET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/profiles/documents")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET https://www.directfreight.com/api/profiles/documents'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles/documents")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - https://www.directfreight.com/api/profiles/documents
    patch:
      consumes: []
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/rename_document'
      responses:
        '204':
          description: success
      summary: STAGE=UNK Rename a document.
      tags:
        - profiles
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles/documents");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/profiles/documents");
            var request = new RestRequest(Method.PATCH);
            request.AddParameter("undefined", "{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request PATCH \
              --url https://www.directfreight.com/api/profiles/documents \
              --data '{"current_name":"<ADD STRING VALUE>","new_name":"<ADD STRING VALUE>"}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/documents\"\n\n\tpayload := strings.NewReader(\"{\\\"current_name\\\":\\\"<ADD STRING VALUE>\\\",\\\"new_name\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles/documents")
              .patch(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.patch("https://www.directfreight.com/api/profiles/documents")
              .body("{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles/documents",
              "method": "PATCH",
              "headers": {},
              "processData": false,
              "data": "{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "current_name": "<ADD STRING VALUE>",
              "new_name": "<ADD STRING VALUE>"
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("PATCH", "https://www.directfreight.com/api/profiles/documents");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "PATCH",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles/documents",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ current_name: '<ADD STRING VALUE>',
              new_name: '<ADD STRING VALUE>' }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'PATCH',
              url: 'https://www.directfreight.com/api/profiles/documents',
              body: 
               { current_name: '<ADD STRING VALUE>',
                 new_name: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("PATCH", "https://www.directfreight.com/api/profiles/documents");

            req.type("json");
            req.send({
              "current_name": "<ADD STRING VALUE>",
              "new_name": "<ADD STRING VALUE>"
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"current_name": @"<ADD STRING VALUE>",
                                          @"new_name": @"<ADD STRING VALUE>" };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles/documents"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"PATCH"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles/documents" in
            let body = Cohttp_lwt_body.of_string "{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}" in

            Client.call ~body `PATCH uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("PATCH",
            "https://www.directfreight.com/api/profiles/documents");
            $request->content('{"current_name":"<ADD STRING VALUE>","new_name":"<ADD STRING VALUE>"}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles/documents",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS => "{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('PATCH');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles/documents');
            $request->setMethod(HttpRequest::HTTP_METH_PATCH);

            $request->setBody('{"current_name":"<ADD STRING VALUE>","new_name":"<ADD STRING VALUE>"}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"current_name":"<ADD STRING VALUE>","new_name":"<ADD STRING VALUE>"}');

            $request->setRequestUrl('https://www.directfreight.com/api/profiles/documents');
            $request->setRequestMethod('PATCH');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}"

            conn.request("PATCH", "/api/profiles/documents", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles/documents"

            payload = "{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}"
            response = requests.request("PATCH", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/profiles/documents")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Patch.new(url)
            request.body = "{\"current_name\":\"<ADD STRING VALUE>\",\"new_name\":\"<ADD STRING VALUE>\"}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"current_name":"<ADD STRING VALUE>","new_name":"<ADD STRING VALUE>"}' |  \
              http PATCH https://www.directfreight.com/api/profiles/documents
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = [
              "current_name": "<ADD STRING VALUE>",
              "new_name": "<ADD STRING VALUE>"
            ]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles/documents")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "PATCH"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method PATCH \
              --body-data '{"current_name":"<ADD STRING VALUE>","new_name":"<ADD STRING VALUE>"}' \
              --output-document \
              - https://www.directfreight.com/api/profiles/documents
    post:
      consumes: []
      parameters:
        - $ref: '#/parameters/end-user-token'
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/upload_document'
      responses:
        '201':
          $ref: '#/responses/object_created'
      summary: STAGE=UNK Upload a new document.
      tags:
        - profiles
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles/documents");

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"The\":{}}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/profiles/documents");
            var request = new RestRequest(Method.POST);
            request.AddParameter("undefined", "{\"The\":{}}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request POST \
              --url https://www.directfreight.com/api/profiles/documents \
              --data '{"The":{}}'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/documents\"\n\n\tpayload := strings.NewReader(\"{\\\"The\\\":{}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"The\":{}}");
            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles/documents")
              .post(body)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://www.directfreight.com/api/profiles/documents")
              .body("{\"The\":{}}")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles/documents",
              "method": "POST",
              "headers": {},
              "processData": false,
              "data": "{\"The\":{}}"
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = JSON.stringify({
              "The": {}
            });

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://www.directfreight.com/api/profiles/documents");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles/documents",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({ The: {} }));
            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://www.directfreight.com/api/profiles/documents',
              body: { The: {} },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("POST", "https://www.directfreight.com/api/profiles/documents");

            req.type("json");
            req.send({
              "The": {}
            });

            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>
            NSDictionary *parameters = @{ @"The": @{  } };

            NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles/documents"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"POST"];
            [request setHTTPBody:postData];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles/documents" in
            let body = Cohttp_lwt_body.of_string "{\"The\":{}}" in

            Client.call ~body `POST uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("POST",
            "https://www.directfreight.com/api/profiles/documents");
            $request->content('{"The":{}}');
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles/documents",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"The\":{}}",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles/documents');
            $request->setMethod(HTTP_METH_POST);

            $request->setBody('{"The":{}}');

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $body = new http\Message\Body;
            $body->append('{"The":{}}');

            $request->setRequestUrl('https://www.directfreight.com/api/profiles/documents');
            $request->setRequestMethod('POST');
            $request->setBody($body);

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            payload = "{\"The\":{}}"

            conn.request("POST", "/api/profiles/documents", payload)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles/documents"

            payload = "{\"The\":{}}"
            response = requests.request("POST", url, data=payload)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/profiles/documents")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)
            request.body = "{\"The\":{}}"

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: |-
            echo '{"The":{}}' |  \
              http POST https://www.directfreight.com/api/profiles/documents
        - lang: Swift_nsurlsession
          source: |-
            import Foundation
            let parameters = ["The": []]

            let postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles/documents")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "POST"
            request.HTTPBody = postData

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method POST \
              --body-data '{"The":{}}' \
              --output-document \
              - https://www.directfreight.com/api/profiles/documents
    x-restlet:
      section: PROFILES
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles/documents");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/profiles/documents
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/documents\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles/documents")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/profiles/documents")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles/documents",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/profiles/documents");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles/documents",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/profiles/documents' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/profiles/documents");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles/documents"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles/documents" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/profiles/documents");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles/documents",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles/documents');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/profiles/documents');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/profiles/documents")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles/documents"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/profiles/documents")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/profiles/documents'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles/documents")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/profiles/documents
  /profiles/mobile_carriers:
    get:
      description: Retrieve a list of supported carriers.
      parameters:
        - description: A way to just get back the info for just one carrier.
          format: int32
          in: query
          name: carrier_id
          required: false
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/mobile_carrier_response'
      summary: 'STAGE=UNK Retrieve one or more mobile carriers. '
      tags:
        - profiles
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url 'https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/profiles/mobile_carriers',
              qs: { carrier_id: 'SOME_INTEGER_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/profiles/mobile_carriers");

            req.query({
              "carrier_id": "SOME_INTEGER_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "'https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles/mobile_carriers');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData(array(
              'carrier_id' => 'SOME_INTEGER_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/profiles/mobile_carriers');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString(array(
              'carrier_id' => 'SOME_INTEGER_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles/mobile_carriers"

            querystring = {"carrier_id":"SOME_INTEGER_VALUE"}

            response = requests.request("GET", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET ''https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - 'https://www.directfreight.com/api/profiles/mobile_carriers?carrier_id=SOME_INTEGER_VALUE'
    x-restlet:
      section: PROFILES
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles/mobile_carriers");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/profiles/mobile_carriers
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/mobile_carriers\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles/mobile_carriers")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/profiles/mobile_carriers")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles/mobile_carriers",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/profiles/mobile_carriers");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles/mobile_carriers",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/profiles/mobile_carriers' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/profiles/mobile_carriers");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles/mobile_carriers"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles/mobile_carriers" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/profiles/mobile_carriers");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles/mobile_carriers",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles/mobile_carriers');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/profiles/mobile_carriers');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/profiles/mobile_carriers")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles/mobile_carriers"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/profiles/mobile_carriers")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/profiles/mobile_carriers'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles/mobile_carriers")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/profiles/mobile_carriers
  /profiles/optins:
    delete:
      parameters:
        - $ref: '#/parameters/end-user-token'
      responses:
        '204':
          description: successful operation
      summary: STAGE=UNK Marks the profile as opted out.
      tags:
        - profiles
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles/optins");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/profiles/optins");
            var request = new RestRequest(Method.DELETE);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request DELETE \
              --url https://www.directfreight.com/api/profiles/optins
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/optins\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles/optins")
              .delete(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.delete("https://www.directfreight.com/api/profiles/optins")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles/optins",
              "method": "DELETE",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("DELETE", "https://www.directfreight.com/api/profiles/optins");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "DELETE",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles/optins",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'DELETE',
              url: 'https://www.directfreight.com/api/profiles/optins' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("DELETE", "https://www.directfreight.com/api/profiles/optins");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles/optins"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"DELETE"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles/optins" in

            Client.call `DELETE uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("DELETE",
            "https://www.directfreight.com/api/profiles/optins");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles/optins",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles/optins');
            $request->setMethod(HTTP_METH_DELETE);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/profiles/optins');
            $request->setRequestMethod('DELETE');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("DELETE", "/api/profiles/optins")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles/optins"

            response = requests.request("DELETE", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/profiles/optins")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Delete.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http DELETE https://www.directfreight.com/api/profiles/optins'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles/optins")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "DELETE"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method DELETE \
              --output-document \
              - https://www.directfreight.com/api/profiles/optins
    get:
      parameters:
        - $ref: '#/parameters/end-user-token'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/success_status_response'
      summary: STAGE=UNK Check if the profile has opted to being contacted by text.
      tags:
        - profiles
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles/optins");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/profiles/optins");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url https://www.directfreight.com/api/profiles/optins
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/optins\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles/optins")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/profiles/optins")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles/optins",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/profiles/optins");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles/optins",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/profiles/optins' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/profiles/optins");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles/optins"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles/optins" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "https://www.directfreight.com/api/profiles/optins");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles/optins",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles/optins');
            $request->setMethod(HTTP_METH_GET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/profiles/optins');
            $request->setRequestMethod('GET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/profiles/optins")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles/optins"

            response = requests.request("GET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/profiles/optins")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET https://www.directfreight.com/api/profiles/optins'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles/optins")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - https://www.directfreight.com/api/profiles/optins
    patch:
      parameters:
        - $ref: '#/parameters/end-user-token'
      responses:
        '204':
          description: successful operation
      summary: STAGE=UNK Marks the profile as opted in.
      tags:
        - profiles
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles/optins");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/profiles/optins");
            var request = new RestRequest(Method.PATCH);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request PATCH \
              --url https://www.directfreight.com/api/profiles/optins
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/optins\"\n\n\treq, _ := http.NewRequest(\"PATCH\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles/optins")
              .patch(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.patch("https://www.directfreight.com/api/profiles/optins")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles/optins",
              "method": "PATCH",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("PATCH", "https://www.directfreight.com/api/profiles/optins");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "PATCH",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles/optins",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'PATCH',
              url: 'https://www.directfreight.com/api/profiles/optins' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("PATCH", "https://www.directfreight.com/api/profiles/optins");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles/optins"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"PATCH"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles/optins" in

            Client.call `PATCH uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("PATCH",
            "https://www.directfreight.com/api/profiles/optins");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles/optins",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('PATCH');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles/optins');
            $request->setMethod(HttpRequest::HTTP_METH_PATCH);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/profiles/optins');
            $request->setRequestMethod('PATCH');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("PATCH", "/api/profiles/optins")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles/optins"

            response = requests.request("PATCH", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/profiles/optins")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Patch.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http PATCH https://www.directfreight.com/api/profiles/optins'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles/optins")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "PATCH"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method PATCH \
              --output-document \
              - https://www.directfreight.com/api/profiles/optins
    post:
      parameters:
        - $ref: '#/parameters/end-user-token'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/post_optin_code_response'
      summary: 'STAGE=UNK Create, and send an Optin Code.'
      tags:
        - profiles
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles/optins");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/profiles/optins");
            var request = new RestRequest(Method.POST);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request POST \
              --url https://www.directfreight.com/api/profiles/optins
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/optins\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles/optins")
              .post(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.post("https://www.directfreight.com/api/profiles/optins")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles/optins",
              "method": "POST",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "https://www.directfreight.com/api/profiles/optins");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "POST",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles/optins",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://www.directfreight.com/api/profiles/optins' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("POST", "https://www.directfreight.com/api/profiles/optins");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles/optins"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"POST"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles/optins" in

            Client.call `POST uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("POST",
            "https://www.directfreight.com/api/profiles/optins");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles/optins",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles/optins');
            $request->setMethod(HTTP_METH_POST);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/profiles/optins');
            $request->setRequestMethod('POST');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("POST", "/api/profiles/optins")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles/optins"

            response = requests.request("POST", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/profiles/optins")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Post.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http POST https://www.directfreight.com/api/profiles/optins'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles/optins")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "POST"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method POST \
              --output-document \
              - https://www.directfreight.com/api/profiles/optins
    x-restlet:
      section: PROFILES
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/profiles/optins");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/profiles/optins
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/profiles/optins\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/profiles/optins")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/profiles/optins")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/profiles/optins",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/profiles/optins");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/profiles/optins",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/profiles/optins' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/profiles/optins");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/profiles/optins"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/profiles/optins" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/profiles/optins");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/profiles/optins",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/profiles/optins');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/profiles/optins');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/profiles/optins")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/profiles/optins"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/profiles/optins")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/profiles/optins'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/profiles/optins")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/profiles/optins
  /validations/email_exists:
    get:
      description: Enter an e-mail to see if it is available. Can be used as ?email=xxx or as a JSON request.
      parameters:
        - $ref: '#/parameters/end-user-token'
        - name: email
          in: query
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/get_email_exists_response'
      summary: STAGE=UNK Check if an e-mail exists.
      tags:
        - validations
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: |-
            var client = new RestClient("https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: curl
          source: |-
            curl --request GET \
              --url 'https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE'
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.get("https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE",
              "method": "GET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("GET", "https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "GET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/validations/email_exists?email=SOME_STRING_VALUE",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url: 'https://www.directfreight.com/api/validations/email_exists',
              qs: { email: 'SOME_STRING_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("GET", "https://www.directfreight.com/api/validations/email_exists");

            req.query({
              "email": "SOME_STRING_VALUE"
            });


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"GET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE" in

            Client.call `GET uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("GET",
            "'https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE'");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/validations/email_exists');
            $request->setMethod(HTTP_METH_GET);

            $request->setQueryData(array(
              'email' => 'SOME_STRING_VALUE'
            ));

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/validations/email_exists');
            $request->setRequestMethod('GET');
            $request->setQuery(new http\QueryString(array(
              'email' => 'SOME_STRING_VALUE'
            )));

            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("GET", "/api/validations/email_exists?email=SOME_STRING_VALUE")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/validations/email_exists"

            querystring = {"email":"SOME_STRING_VALUE"}

            response = requests.request("GET", url, params=querystring)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            url = URI("https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http GET ''https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE'''
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "GET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method GET \
              --output-document \
              - 'https://www.directfreight.com/api/validations/email_exists?email=SOME_STRING_VALUE'
    x-restlet:
      section: VALIDATIONS
      x-code-samples:
        - lang: C_libcurl
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "X-RESTLET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://www.directfreight.com/api/validations/email_exists");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: Csharp_restsharp
          source: Method not supported
        - lang: curl
          source: |-
            curl --request X-RESTLET \
              --url https://www.directfreight.com/api/validations/email_exists
        - lang: Go_native
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://www.directfreight.com/api/validations/email_exists\"\n\n\treq, _ := http.NewRequest(\"X-RESTLET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java_okhttp
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://www.directfreight.com/api/validations/email_exists")
              .method("X-RESTLET", null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Java_unirest
          source: |-
            HttpResponse<String> response = Unirest.customMethod("X-RESTLET","https://www.directfreight.com/api/validations/email_exists")
              .asString();
        - lang: Javascript_jquery
          source: |-
            var settings = {
              "async": true,
              "crossDomain": true,
              "url": "https://www.directfreight.com/api/validations/email_exists",
              "method": "X-RESTLET",
              "headers": {}
            }

            $.ajax(settings).done(function (response) {
              console.log(response);
            });
        - lang: Javascript_xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("X-RESTLET", "https://www.directfreight.com/api/validations/email_exists");

            xhr.send(data);
        - lang: Node_native
          source: |-
            var http = require("https");

            var options = {
              "method": "X-RESTLET",
              "hostname": "www.directfreight.com",
              "port": null,
              "path": "/api/validations/email_exists",
              "headers": {}
            };

            var req = http.request(options, function (res) {
              var chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                var body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Node_request
          source: |
            var request = require("request");

            var options = { method: 'X-RESTLET',
              url: 'https://www.directfreight.com/api/validations/email_exists' };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Node_unirest
          source: |
            var unirest = require("unirest");

            var req = unirest("X-RESTLET", "https://www.directfreight.com/api/validations/email_exists");


            req.end(function (res) {
              if (res.error) throw new Error(res.error);

              console.log(res.body);
            });
        - lang: Objc_nsurlsession
          source: |-
            #import <Foundation/Foundation.h>

            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://www.directfreight.com/api/validations/email_exists"]
                                                                   cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                               timeoutInterval:10.0];
            [request setHTTPMethod:@"X-RESTLET"];

            NSURLSession *session = [NSURLSession sharedSession];
            NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                                        completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                            if (error) {
                                                                NSLog(@"%@", error);
                                                            } else {
                                                                NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                                NSLog(@"%@", httpResponse);
                                                            }
                                                        }];
            [dataTask resume];
        - lang: Ocaml_cohttp
          source: |-
            open Cohttp_lwt_unix
            open Cohttp
            open Lwt

            let uri = Uri.of_string "https://www.directfreight.com/api/validations/email_exists" in

            Client.call (Code.method_of_string "X-RESTLET") uri
            >>= fun (res, body_stream) ->
              (* Do stuff with the result *)
        - lang: Perl_perl5
          source: |-
            #!/usr/bin/perl
            use Modern::Perl;
            use Data::Dumper;
            use HTTP::Request::JSON;
            use LWP::UserAgent::JSON;
            my $request = HTTP::Request::JSON->new("X-RESTLET",
            "https://www.directfreight.com/api/validations/email_exists");
            my $browser = LWP::UserAgent::JSON->new();
            my $response = $browser->request($request);
            print Dumper($response->json_content);
        - lang: Php_curl
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://www.directfreight.com/api/validations/email_exists",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "X-RESTLET",
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Php_http1
          source: |-
            <?php

            HttpRequest::methodRegister('X-RESTLET');
            $request = new HttpRequest();
            $request->setUrl('https://www.directfreight.com/api/validations/email_exists');
            $request->setMethod(HttpRequest::HTTP_METH_X-RESTLET);

            try {
              $response = $request->send();

              echo $response->getBody();
            } catch (HttpException $ex) {
              echo $ex;
            }
        - lang: Php_http2
          source: |-
            <?php

            $client = new http\Client;
            $request = new http\Client\Request;

            $request->setRequestUrl('https://www.directfreight.com/api/validations/email_exists');
            $request->setRequestMethod('X-RESTLET');
            $client->enqueue($request)->send();
            $response = $client->getResponse();

            echo $response->getBody();
        - lang: Python_python3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("www.directfreight.com")

            conn.request("X-RESTLET", "/api/validations/email_exists")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Python_requests
          source: |-
            import requests

            url = "https://www.directfreight.com/api/validations/email_exists"

            response = requests.request("X-RESTLET", url)

            print(response.text)
        - lang: Ruby_native
          source: |-
            require 'uri'
            require 'net/http'

            class Net::HTTP::X-restlet < Net::HTTPRequest
              METHOD = 'X-RESTLET'
              REQUEST_HAS_BODY = 'false'
              RESPONSE_HAS_BODY = true
            end

            url = URI("https://www.directfreight.com/api/validations/email_exists")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::X-restlet.new(url)

            response = http.request(request)
            puts response.read_body
        - lang: Shell_httpie
          source: 'http X-RESTLET https://www.directfreight.com/api/validations/email_exists'
        - lang: Swift_nsurlsession
          source: |-
            import Foundation

            var request = NSMutableURLRequest(URL: NSURL(string: "https://www.directfreight.com/api/validations/email_exists")!,
                                                    cachePolicy: .UseProtocolCachePolicy,
                                                timeoutInterval: 10.0)
            request.HTTPMethod = "X-RESTLET"

            let session = NSURLSession.sharedSession()
            let dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in
              if (error != nil) {
                println(error)
              } else {
                let httpResponse = response as? NSHTTPURLResponse
                println(httpResponse)
              }
            })

            dataTask.resume()
        - lang: wget
          source: |-
            wget --quiet \
              --method X-RESTLET \
              --output-document \
              - https://www.directfreight.com/api/validations/email_exists
definitions:
  alert_list:
    description: 'A hash containing a list of objects. Each entry should have 1 alert object, and 1 search object, and 2 integer counts. One for the number of new loads, and one for the number of total loads that match the search critera.'
    example: |-
      {
        "data": [
          "{}",
          "{}"
        ]
      }
    properties:
      data:
        items:
          $ref: '#/definitions/alert'
        type: array
    type: object
    x-restlet:
      section: ALERTS
  alert:
    type: object
    required:
      - days_of_week
      - email_address
      - end_hour
      - expires_after
      - list_order
      - list_type
      - minute_frequency
      - search
      - send_type
      - start_hour
      - time_zone
    properties:
      days_of_week:
        type: object
        description: 'Limit the days that alerts are sent to the days listed. Send an array of strings. Valid strings are ''Sun'',''Mon'',''Tue'',''Wed'',''Thu'',''Fri'',and ''Sat''.'
      email_address:
        type: string
        description: The address for the alert.
      end_hour:
        type: object
        description: Has the same values as start_hour
      expires_after:
        type: object
        description: The last day the alert will be valid. Valid time frames are from today until one year into the future.
      list_order:
        type: object
        description: Any value that is valid in the boards sort_order is also valid here.
      list_type:
        type: object
        description: 'This specify the type of list that is returned, including disabling the list from being sent at all. Valid values are ''complete-list'',''only-new'', and ''not-active''.'
      minute_frequency:
        type: object
        description: 'How many minutes to wait before sending another alert. Valid values are ''15'',''30'',''60'',''120'',''240'',''480'', and ''1440''.'
      send_type:
        type: object
        description: 'What method to send the alert list. Valid types are ''email'',or ''text''.'
      start_hour:
        type: object
        description: A value between 3-21 corresponding to the hour of the day.
      time_zone:
        type: object
        description: 'A number between -1 and 2. -1 = EST, 0 = CST, 1 = MST, 2 = PST'
      search:
        type: object
        properties:
          search_id:
            type: integer
          search_type:
            type: string
          date_received:
            type: string
            format: date
          trailers:
            type: string
          date_available:
            type: string
            format: date
          origin_state:
            type: string
          origin_city:
            type: string
          origin_radius:
            type: integer
          destination_state:
            type: string
          destination_city:
            type: string
          destination_radius:
            type: integer
          load_size:
            type: string
    x-restlet:
      section: ALERTS
  bill_user:
    type: object
    required:
      - billing_address
    properties:
      billing_address:
        type: object
        description: 'first_name, last_name, address, city, state, and phone all needed. '
      cc_data:
        type: object
        description: 'This is optional if a check number is provided. '
      check_data:
        type: object
        description: 'This is optional if a credit number is provided. '
      promo_code:
        type: string
        description: 'Optional Promo Code for a discount. '
    x-restlet:
      section: BILLINGS
  board_request:
    properties:
      alert_id:
        description: 'By specifying an alert_id we will record the loads seen by this user, and associate it with their alert. '
        example: 5555
        type: integer
      destination_city:
        example: chicago
        minLength: 2
        type: string
      destination_radius:
        default: 30
        description: 'If both city and state are specified, it will search for all entries within # Miles of the city. '
        maximum: 300
        minimum: 1
        type: integer
      destination_state:
        description: 'If the city field is filled out, the first state in the array list will be used with it.'
        example: '["CA", "OR", "WA"]'
        items:
          maxLength: 2
          minLength: 2
          type: string
        type: array
      full_load:
        description: This is only valid on load boards. Add it to limit results to just full or partial loads.
        type: boolean
      item_count:
        default: 50
        description: This argument adjusts how many items per page will be returned.
        maximum: 100
        minimum: 1
        type: integer
      origin_city:
        example: chillicothe
        minLength: 2
        type: string
      origin_radius:
        default: 30
        description: 'If both city and state, boards will return all entries within # miles of the city.'
        maximum: 300
        minimum: 1
        type: integer
      origin_state:
        description: 'If the city field is filled out, the first state in the array list will be used with it.'
        example: '["MO", "IL"]'
        items:
          maxLength: 2
          minLength: 2
          type: string
        type: array
      page_number:
        description: The page you want to return. Will return an empty board on an invalid page.
        minimum: 1
        type: integer
      return_count:
        description: 'If included this will return a total count instead of a list. '
        type: boolean
      return_only_new:
        description: 'This will only return unseen results. This requires an alert_id to be specified. '
        type: boolean
      ship_date:
        description: 'Limit the board to only show loads with X ship date. '
        example: '["2019-12-20", "2018-01-09", "2017-08-15"]'
        items:
          description: Please use the YYYY-MM-DD format.
          format: date
          type: string
        type: array
      sort_parameter:
        default: age
        description: The system automatically chooses the most common order based on the parameter chosen. Because of this there is no reverse order option.
        enum:
          - origin_city
          - origin_state
          - origin_radius
          - destination_city
          - destination_state
          - destination_radius
          - trailer_type
          - load_size
          - pay_rate
          - credit_score
          - age
          - load_points
          - trip_miles
          - dead_head
          - length
          - weight
          - company_name
          - ship_date
          - receive_date
        type: string
      trailer_type:
        description: 'A string array of valid trailer types to limit the search. '
        example: '["F", "F+T", "F+S"]'
        items:
          enum:
            - V
            - VINT
            - SD
            - MX
            - HS
            - AC
            - LB
            - F+T
            - F
            - FINT
            - DD
            - V+V
            - V+A
            - CRG
            - HB
            - LA
            - PO
            - R
            - RINT
            - RGN
            - CV
            - DT
            - TNK
            - F+S
            - PNEU
            - CONT
            - OTHER
          type: string
        type: array
    type: object
    x-restlet:
      section: BOARDS
  board_response_item:
    properties:
      age:
        description: how long since we received this information.
        type: integer
      alert_id:
        description: 'By specifying an alert_id we will record the loads seen by this user, and associate it with their alert. '
        example: 5555
        type: integer
      comment:
        type: string
      company_name:
        description: To see this you must also send an end_user_token that has the subscribed access level.
        type: string
      contact_info:
        description: To see this you must also send an end_user_token that has the subscribed access level.
        type: string
      credit_score:
        type: integer
      dead_head:
        description: 'Distance between origin_city, and searched city. Will be null if doing a state search.'
        type: integer
      destination_city:
        example: chicago
        minLength: 2
        type: string
      destination_state:
        example: '"OR"'
        type: string
      full_load:
        description: Will always return false for trucks.
        type: boolean
      green_light:
        type: boolean
      md5sum:
        description: unique identifier for this item.
        type: string
      origin_city:
        example: chillicothe
        minLength: 2
        type: string
      origin_state:
        example: '"MO"'
        type: string
      receive_date:
        format: date
        type: string
      ship_date:
        description: 'Limit the board to only show loads with X ship date. '
        example: '"2017-08-15"'
        format: date
        type: string
      trailer_type:
        description: A string array of valid trailer types.
        example: '["F", "F+T", "F+S"]'
        items:
          type: string
        type: array
      trip_miles:
        description: Distance between origin and destination.
        type: integer
      user_hid:
        description: This field is only returned for logged in searches. The value when true represents that the user wishes the entry hidden. Look at the boards/hidden_entries/ documentation for more information on how to set and update this value.
        type: boolean
    required:
      - age
      - credit_score
      - destination_city
      - destination_state
      - full_load
      - green_light
      - md5sum
      - origin_city
      - origin_state
      - ship_date
      - trailer_type
    type: object
    x-restlet:
      section: BOARDS
  board_response:
    example: |-
      {
        "list": "{}",
        "page_number": "{}",
        "total_items": "{}",
        "total_pages": 0
      }
    properties:
      list:
        description: A list of entries for this board.
        items:
          $ref: '#/definitions/board_response_item'
        type: array
      page_number:
        description: The page you are on.
        type: object
      total_items:
        description: A count of all the entry objects for the specified search.
        type: object
      total_pages:
        description: 'A count of the # of pages based on the search parameters.'
        type: integer
    required:
      - list
    type: object
    x-restlet:
      section: BOARDS
  create_multiple_postings:
    type: object
    required:
      - list
    properties:
      contact_fax:
        type: string
        description: 'By default we use the number listed in their profile. '
      contact_name:
        type: string
        description: 'The dispatchers name. By default we use the profile information. '
      contact_phone:
        type: string
        description: 'By default we use the number listed in their profile. '
      delete_current_before_posting:
        type: boolean
        description: 'An optional argument that will first delete all of the users loads before entering the fresh list. Caution, this will still delete everything even if some of the entries fail to be created. '
      list:
        type: array
        description: 'Valid types are &quot;loads&quot;, &quot;trucks&quot;, &quot;private_loads&quot;, &quot;private_trucks&quot;, &quot;test_loads&quot;, and &quot;test_trucks&quot; '
        items:
          type: string
    x-restlet:
      section: POSTINGS
  create_notes:
    type: object
    required:
      - body
      - entry_id
      - title
    properties:
      body:
        type: string
      entry_id:
        type: integer
        description: 'The entry to associate the note with. '
      title:
        type: string
        description: 'Subject of the note. '
    x-restlet:
      section: BOARDS
  create_status:
    properties:
      success:
        type: integer
    type: object
    x-restlet:
      section: common_definitions
  end-user-token:
    properties:
      end-user-token:
        description: On success and end-user-token is returned.
        example: XX423ASOEUHT4AESUTH
        type: string
    type: object
    x-restlet:
      section: END_USER_AUTHENTICATIONS
  error_object:
    example: |-
      {
        "code": 1,
        "error": "Generic Validation",
        "description": "The e-mail address must be valid."
      }
    properties:
      code:
        type: integer
      description:
        type: string
      error:
        type: string
    required:
      - code
      - description
      - error
    type: object
    x-restlet:
      section: common_definitions
  get_billing_response:
    type: object
    properties:
      amount:
        type: integer
        format: int32
        description: Amount How much the user will be charged. This may be 0.
      promo_conditions:
        type: object
        description: Any extra text relating to the promo code. For example "15 Day Free. 34.95 charged after that."
    example: |-
      {
        "amount": 0,
        "promo_conditions": "{}"
      }
    x-restlet:
      section: BILLINGS
  get_boards_notes_response:
    type: object
    properties:
      entry_id:
        type: array
        description: 'A hash with each entry id as the name, and a note_object as the value.'
        items:
          type: string
    example: |-
      {
        "entry_id": [
          "entry_id",
          "entry_id"
        ]
      }
    x-restlet:
      section: BOARDS
  get_closest_city_response:
    example: |-
      {
        "city": "city",
        "state_abbreviation": "{}",
        "state_name": "{}"
      }
    properties:
      city:
        type: string
      state_abbreviation:
        type: object
      state_name:
        type: object
    type: object
    x-restlet:
      section: LOCATIONS
  get_custom_categories_response:
    example: |-
      {
        "categories": [
          "categories",
          "categories"
        ]
      }
    properties:
      categories:
        description: 'A list of each category, type and it''s corresponding position.'
        items:
          type: string
        type: array
    type: object
    x-restlet:
      section: not categorized yet
  get_email_exists_response:
    example: |-
      {
        "exists": true
      }
    properties:
      exists:
        description: Returns a true value if it is associated with an account.
        type: boolean
    type: object
    x-restlet:
      section: not categorized yet
  get_hidden_companies_response:
    example: |-
      {
        "company_name": [
          "company_name",
          "company_name"
        ]
      }
    properties:
      company_name:
        description: A subset of companies that need to be marked as hidden.
        items:
          type: string
        type: array
    type: object
    x-restlet:
      section: not categorized yet
  get_hidden_entries:
    example:
      entry_id:
        - entry_id
        - entry_id
    properties:
      entry_id:
        description: A subset of entries that need to be marked as hidden.
        items:
          type: string
        type: array
    type: object
    x-restlet:
      section: not categorized yet
  get_location_distance_response:
    example: |-
      {
        "distance": 0
      }
    properties:
      distance:
        description: A number representing the miles between the two locations.
        format: int32
        type: integer
    type: object
    x-restlet:
      section: LOCATIONS
  get_state_list_response:
    example:
      state_totals: '{     "MS": 1449,     "NS": 24,     "VT": 145,     "MD": 520,     "ID": 2091,     "SK": 126,     "WA": 2207,     "SC": 1619,     "VA": 1781,     "PQ": 10,     "ON": 270,     "KS": 969,     "NE": 1386,     "OR": 2984,     "WI": 2714,     "GA": 3184,     "IN": 3363,     "KY": 1731,     "NV": 534,     "NC": 1824,     "BC": 124,     "DC": 7,     .... }'
    properties:
      state_totals:
        description: A hash of state totals.
        example: '{     "MS": 1449,     "NS": 24,     "VT": 145,     "MD": 520,     "ID": 2091,     "SK": 126,     "WA": 2207,     "SC": 1619,     "VA": 1781,     "PQ": 10,     "ON": 270,     "KS": 969,     "NE": 1386,     "OR": 2984,     "WI": 2714,     "GA": 3184,     "IN": 3363,     "KY": 1731,     "NV": 534,     "NC": 1824,     "BC": 124,     "DC": 7,     .... }'
        type: object
    type: object
    x-restlet:
      section: BOARDS
  login_credentials:
    properties:
      login:
        description: 'The e-mail, or username information needed to log in. '
        type: string
      realm:
        description: 'This specifies who to log in with. If left blank we will assume email/password. Valid realms are username, email, facebook(not implemneted), google(not implemented), and linkedin(not implemented). '
        enum:
          - username
          - email
        type: string
      secret:
        description: 'The password, or token required for this login. '
        type: string
    required:
      - login
      - realm
      - secret
    type: object
    x-restlet:
      section: END_USER_AUTHENTICATIONS
  mark_hidden_companies:
    properties:
      company_name:
        description: 'The comapny that need to be marked as hidden. '
        type: string
    required:
      - company_name
    type: object
    x-restlet:
      section: not categorized yet
  mobile_carrier_response:
    example:
      carrier_id: 0
      carrier_name: '{}'
    properties:
      carrier_id:
        description: The carrier ID.
        format: int32
        type: integer
      carrier_name:
        description: Their mobile carrier.
        type: object
    type: object
    x-restlet:
      section: not categorized yet
  patch_alert_properties:
    properties:
      days_of_week:
        description: 'Limit the days that alerts are sent to the days listed. Send an array of strings. Valid strings are ''Sun'',''Mon'',''Tue'',''Wed'',''Thu'',''Fri'',and ''Sat''.'
        type: object
      end_hour:
        description: Has the same values as start_hour
        type: object
      expires_after:
        description: The last day the alert will be valid. Valid time frames are from today until one year into the future.
        type: object
      list_order:
        description: Any value that is valid in the boards sort_order is also valid here.
        type: object
      list_type:
        description: 'This specify the type of list that is returned, including disabling the list from being sent at all. Valid values are ''complete-list'',''only-new'', and ''not-active''.'
        type: object
      minute_frequency:
        description: 'How many minutes to wait before sending another alert. Valid values are ''15'',''30'',''60'',''120'',''240'',''480'', and ''1440''.'
        type: object
      send_type:
        description: 'What method to send the alert list. Valid types are ''email'',or ''text''.'
        type: object
      start_hour:
        description: A value between 3-21 corresponding to the hour of the day.
        type: object
      time_zone:
        description: 'A number between -1 and 2. -1 = EST, 0 = CST, 1 = MST, 2 = PST'
        type: object
    type: object
    x-restlet:
      section: ALERTS
  patch_profile:
    properties:
      address:
        type: string
      city:
        type: string
      company:
        description: 'Company name. '
        type: string
      contact_extension:
        type: string
      contact_name:
        description: 'Contact name. '
        type: string
      contact_number:
        type: string
      dot_number:
        type: string
      fax_number:
        type: string
      mc_number:
        type: string
      mobile_carrier:
        type: integer
      mobile_number:
        type: string
      state:
        type: string
      web_page:
        type: string
      zip:
        type: string
    required:
      - address
      - city
      - company
      - contact_extension
      - contact_name
      - contact_number
      - dot_number
      - fax_number
      - mc_number
      - mobile_carrier
      - mobile_number
      - state
      - web_page
      - zip
    type: object
    x-restlet:
      section: PROFILES
  post_optin_code_response:
    example:
      optin_code: optin_code
    properties:
      optin_code:
        description: A text string with the code sent.
        type: string
    type: object
    x-restlet:
      section: not categorized yet
  post_posting_multiple_response:
    example: |-
      {
        "success": true
      }
    properties:
      success:
        description: 'This will return true, and have a unique location in the location header.'
        type: boolean
    type: object
    x-restlet:
      section: POSTINGS
  post_posting_type_action_body:
    properties:
      source_id:
        description: The posting id of the posting you are moving or copying. Optional for create.
        type: object
      source_posting:
        description: The posting_type where you are moving or copying the posting from. Optional for create. Items can only be moved to like types. loads -> private_private loads.
        type: string
    required:
      - source_id
      - source_posting
    type: object
    x-restlet:
      section: not categorized yet
  posting_post_response:
    example: |-
      {
        "list": [
          .....
        ]
      }
    properties:
      list:
        description: A list of posting objects you can iterate over.
        items:
          $ref: '#/definitions/postings_post_response_item'
        type: array
    type: object
    x-restlet:
      section: POSTINGS
  postings_patch_request:
    properties:
      comment:
        type: string
      custom_id:
        description: A unique identifier a user can provide for their own records.
        type: integer
      destination_city:
        description: For truck type entries this is optional.
        type: string
      destination_state:
        description: For truck type entries this is optional.
        items:
          type: string
        type: array
      full_load:
        type: boolean
      height:
        description: This number represents inches.
        type: integer
      length:
        description: This number represents inches.
        type: integer
      origin_city:
        description: Required for all entry types.
        type: string
      origin_state:
        description: 'Required, 2 character limit.'
        type: string
      other_trailer_types:
        description: This may be empty.
        type: string
      pay_rate:
        type: integer
      posting_id:
        description: A unique id in our system for the user's entry.
        format: int32
        type: integer
      receive_date:
        format: date
        type: string
      ship_date:
        format: date
        type: string
      trailer_type:
        description: This can have 1 or more standard trailer types.
        items:
          enum:
            - V
            - VINT
            - SD
            - MX
            - HS
            - AC
            - LB
            - F+T
            - F
            - FINT
            - DD
            - V+V
            - V+A
            - CRG
            - HB
            - LA
            - PO
            - R
            - RINT
            - RGN
            - CV
            - DT
            - TNK
            - F+S
            - PNEU
            - CONT
            - OTHER
          type: string
        type: array
      weight:
        description: This number represents pounds.
        type: integer
      width:
        description: This number represents inches.
        type: integer
    required:
      - posting_id
    type: object
    x-restlet:
      section: POSTINGS
  postings_post_request:
    properties:
      comment:
        type: string
      custom_id:
        description: A unique identifier a user can provide for their own records.
        type: integer
      destination_city:
        description: For truck type entries this is optional.
        type: string
      destination_state:
        description: For truck type entries this is optional.
        items:
          type: string
        type: array
      full_load:
        description: The load will be defaulted to full if this argument isn't included and marked to false.
        type: boolean
      height:
        description: This number represents inches.
        type: integer
      length:
        description: This number represents inches.
        type: integer
      origin_city:
        description: Required for all entry types.
        type: string
      origin_state:
        description: Use the 2 digit state abbreviation.
        maxLength: 2
        minLength: 2
        type: string
      other_trailer_types:
        description: To include custom trailer types.
        type: string
      pay_rate:
        description: 'We expect one of 2 formats. either the per mile, or total sum.'
        type: integer
      receive_date:
        format: date
        type: string
      ship_date:
        description: The date you wish the load to be shipped.
        format: date
        type: string
      trailer_type:
        description: This can have 1 or more standard trailer types.
        items:
          enum:
            - V
            - VINT
            - SD
            - MX
            - HS
            - AC
            - LB
            - F+T
            - F
            - FINT
            - DD
            - V+V
            - V+A
            - CRG
            - HB
            - LA
            - PO
            - R
            - RINT
            - RGN
            - CV
            - DT
            - TNK
            - F+S
            - PNEU
            - CONT
            - OTHER
          type: string
        type: array
      weight:
        description: This number represents pounds.
        type: integer
      width:
        description: This number represents inches.
        type: integer
    required:
      - origin_city
      - origin_state
      - ship_date
      - trailer_type
    type: object
    x-restlet:
      section: POSTINGS
  postings_post_response_item:
    properties:
      comment:
        type: string
      contact_info:
        description: This is generated from the logged in users profile information.
        type: string
      contact_name:
        description: This is generated from the logged in users profile information.
        type: string
      custom_id:
        description: A unique identifier a user can provide for their own records.
        type: integer
      destination_city:
        description: For truck type entries this is optional.
        type: string
      destination_state:
        description: For truck type entries this is optional.
        items:
          type: string
        type: array
      full_load:
        description: For trucks this will always be false.
        type: boolean
      height:
        description: This number represents inches.
        type: integer
      length:
        description: This number represents inches.
        type: integer
      origin_city:
        description: Required for all entry types.
        type: string
      origin_state:
        description: Use the 2 digit state abbreviation.
        maxLength: 2
        minLength: 2
        type: string
      other_trailer_types:
        description: To include custom trailer types.
        type: string
      pay_rate:
        description: 'We expect one of 2 formats. either the per mile, or total sum.'
        type: integer
      posting_id:
        description: This is the unique ID of this post.
        type: integer
      receive_date:
        format: date
        type: string
      ship_date:
        description: The date you wish the load to be shipped.
        format: date
        type: string
      trailer_type:
        description: This can have 1 or more standard trailer types.
        items:
          enum:
            - V
            - VINT
            - SD
            - MX
            - HS
            - AC
            - LB
            - F+T
            - F
            - FINT
            - DD
            - V+V
            - V+A
            - CRG
            - HB
            - LA
            - PO
            - R
            - RINT
            - RGN
            - CV
            - DT
            - TNK
            - F+S
            - PNEU
            - CONT
            - OTHER
          type: string
        type: array
      weight:
        description: This number represents pounds.
        type: integer
      width:
        description: This number represents inches.
        type: integer
    required:
      - contact_info
      - full_load
      - origin_city
      - origin_state
      - posting_id
      - ship_date
      - trailer_type
    type: object
    x-restlet:
      section: POSTINGS
  profile_model:
    example:
      address: P.O. Box 131
      city: Chillicothe
      company: Direct Freight
      contact_extension: x333
      contact_name: Joe Doe
      contact_number: 555-555-5555
      dot_number: 123456
      fax_number: 555-555-5555
      mc_number: 123456
      mobile_carrier: Company_X
      mobile_number: 555-555-1234
      state: MO
      web_page: 'http://www.directfreight.com'
      zip: 55555
    properties:
      address:
        description: The address associated with their entries.
        type: string
      city:
        type: string
      company:
        type: string
      contact_extension:
        type: string
      contact_name:
        description: Contact name.
        type: string
      contact_number:
        type: string
      dot_number:
        type: string
      fax_number:
        type: string
      mc_number:
        type: string
      mobile_carrier:
        type: string
      mobile_number:
        type: string
      state:
        type: string
      web_page:
        type: string
      zip:
        type: string
    type: object
    x-restlet:
      section: PROFILES
  profile_request:
    properties:
      address:
        type: string
      city:
        type: string
      company:
        description: 'Company name. '
        type: string
      contact_extension:
        type: string
      contact_name:
        description: 'Contact name. '
        type: string
      contact_number:
        type: string
      dot_number:
        type: string
      fax_number:
        type: string
      mc_number:
        type: string
      mobile_carrier:
        type: integer
      mobile_number:
        type: string
      password:
        description: 'Needed to set up the user/pass for authentication. '
        type: string
      state:
        type: string
      web_page:
        type: string
      zip:
        type: string
    required:
      - address
      - city
      - company
      - contact_extension
      - contact_name
      - contact_number
      - dot_number
      - fax_number
      - mc_number
      - mobile_carrier
      - mobile_number
      - password
      - state
      - web_page
      - zip
    type: object
    x-restlet:
      section: PROFILES
  rename_document:
    properties:
      current_name:
        description: 'The document to be renamed. '
        type: string
      new_name:
        description: 'Replacement name. '
        type: string
    required:
      - current_name
      - new_name
    type: object
    x-restlet:
      section: PROFILES
  success_status_response:
    example:
      status: status
    properties:
      status:
        description: 'A text status like OPTIN, NORESPONSE, OPTOUT.'
        type: string
    type: object
    x-restlet:
      section: not categorized yet
  toggle_hidden_companies:
    properties:
      company_id:
        description: 'The company name that need to be toggled. '
        type: string
    required:
      - company_id
    type: object
    x-restlet:
      section: not categorized yet
  toggle_hidden_entries:
    properties:
      entry_id:
        description: 'The entry that need to be toggled. '
        items:
          type: string
        type: array
    required:
      - entry_id
    type: object
    x-restlet:
      section: BOARDS
  update_notes:
    type: object
    required:
      - body
      - title
    properties:
      body:
        type: string
      title:
        type: string
        description: 'Subject of the note. '
    x-restlet:
      section: BOARDS
  upload_document:
    properties:
      The:
        description: 'file to be uploaded. '
        type: object
    required:
      - The
    type: object
    x-restlet:
      section: PROFILES
  user:
    properties:
      email:
        description: 'This must be a valid e-mail. '
        type: string
      password:
        description: 'Currently this is a 6-10 digit alphanumeric password. '
        type: string
    required:
      - email
      - password
    type: object
    x-restlet:
      section: END_USER_AUTHENTICATIONS
